<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>linux中，如何排查内存泄漏？</title>
    <link href="/2025/05/05/note/linux/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5/"/>
    <url>/2025/05/05/note/linux/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>linux中，如何排查内存泄漏？</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><h5 id="1、长期稳定性测试"><a href="#1、长期稳定性测试" class="headerlink" title="1、长期稳定性测试"></a>1、长期稳定性测试</h5><p>保证软件至少运行7*24小时，测试过程中有持续的数据变化。</p><h5 id="2、大数据量测试"><a href="#2、大数据量测试" class="headerlink" title="2、大数据量测试"></a>2、大数据量测试</h5><p>这里的大数据量不仅指总数据量大，也包括单个数据的数据量大，比如单块磁盘大小超过2TB、单个虚拟机数据量超过4TB。</p><p>但大数据量只是发现内存泄漏问题的充分不必要条件。</p><h5 id="3、结合free、top等命令进行资源监控"><a href="#3、结合free、top等命令进行资源监控" class="headerlink" title="3、结合free、top等命令进行资源监控"></a>3、结合free、top等命令进行资源监控</h5><p><img src="/2025/05/05/note/linux/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5/img.png" alt="img.png"></p><h5 id="4、持续观察上层应用运行情况"><a href="#4、持续观察上层应用运行情况" class="headerlink" title="4、持续观察上层应用运行情况"></a>4、持续观察上层应用运行情况</h5><p>在长期和大数据量环境下，内存泄漏可能会导致上层应用卡死、应用进程被kill等现象。此时可以通过日志查看是否与内存有关。<br>查看日志文件：可以在&#x2F;var&#x2F;log&#x2F;messages文件中查看操作系统的日志信息，若出现“Out of memory”的报错，则可能存在内存泄漏的问题。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>内存泄漏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux中，使用targetcli搭建iscsi</title>
    <link href="/2025/05/05/note/linux/targetcli%E6%90%AD%E5%BB%BAiscsi/targetcli%E6%90%AD%E5%BB%BAiscsi/"/>
    <url>/2025/05/05/note/linux/targetcli%E6%90%AD%E5%BB%BAiscsi/targetcli%E6%90%AD%E5%BB%BAiscsi/</url>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>linux中，使用targetcli搭建iscsi</p><p>假设使用磁盘分区或者逻辑卷，&#x2F;dev&#x2F;sdb1 &#x2F;dev&#x2F;sdb2，并且一台机器为服务器，两台机器为客户端</p><p>服务器：192.168.0.3<br>客户端：192.168.0.4 192.168.0.5</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><h5 id="1、下载安装软件"><a href="#1、下载安装软件" class="headerlink" title="1、下载安装软件"></a>1、下载安装软件</h5><p>Centos下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install targetcli<br><br>其他自行下载<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://pkgs.org/<br><br>自行下载<br></code></pre></td></tr></table></figure><p>下载安装后需要在服务端保证服务启动，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start target<br>或<br>systemctl start tgt.service<br></code></pre></td></tr></table></figure><p>服务端保证iSCSI正常启动，执行如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl status iscsi<br><br>systemctl start iscsi<br></code></pre></td></tr></table></figure><p><strong>防火墙或者开放端口，主要是3260端口，自行设置。</strong></p><h5 id="2、服务端配置"><a href="#2、服务端配置" class="headerlink" title="2、服务端配置"></a>2、服务端配置</h5><p>执行如下进入targetcli界面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">targetcli<br></code></pre></td></tr></table></figure><p>首先创建要使用的逻辑卷，如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">/backstores/block/ create xendata1 /dev/sdb1<br>/backstores/block/ create xendata2 /dev/sdb2<br></code></pre></td></tr></table></figure><p>如图：<br><img src="/2025/05/05/note/linux/targetcli%E6%90%AD%E5%BB%BAiscsi/targetcli%E6%90%AD%E5%BB%BAiscsi/image.png" alt="alt text"></p><p>然后配置ISCSITarget命名，即创建 IQN (Iscsi Qualified Name) ，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iscsi/ create iqn.2024-05.com.smile:smile1<br></code></pre></td></tr></table></figure><p>创建完成后开始下面的配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd iscsi/iqn.2024-05.com.smile:smile1/tpg1/<br></code></pre></td></tr></table></figure><p>创建lun(target块设备的逻辑单元)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">luns/ create /backstores/block/xendata1<br>luns/ create /backstores/block/xendata2<br></code></pre></td></tr></table></figure><p>后续我们的客户端都会共享到这两个逻辑卷，如果更多配置请自行设置。</p><p>此处如果没有portals&#x2F;，需要自行创建，并且后续使用此端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">portals/ create 0.0.0.0 3261<br></code></pre></td></tr></table></figure><p>创建ACL允许ISCSI客户机连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">acls/ create iqn.2018-06.com.xenserver:client<br><br>此处的 “iqn.2018-06.com.xenserver:client” 应该去客户端上看，位于 /etc/iscsi/initiatorname.iscsi 下，应该和此文件中的名称一致<br></code></pre></td></tr></table></figure><p>创建用户和密码，执行如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd acls/<br>cd iqn.2018-06.com.xenserver:client/<br>set auth userid=ye<br>set auth password=123456<br>info<br></code></pre></td></tr></table></figure><p>如果需要多台机器共享，重复创建acls即可<br><img src="/2025/05/05/note/linux/targetcli%E6%90%AD%E5%BB%BAiscsi/targetcli%E6%90%AD%E5%BB%BAiscsi/image-1.png" alt="alt text"><br><img src="/2025/05/05/note/linux/targetcli%E6%90%AD%E5%BB%BAiscsi/targetcli%E6%90%AD%E5%BB%BAiscsi/image-2.png" alt="alt text"></p><h5 id="3、客户端配置"><a href="#3、客户端配置" class="headerlink" title="3、客户端配置"></a>3、客户端配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">安装：<br>yum -y install iscsi-initiator-utils<br>或<br>yum -y install iscsi-initiator-utils<br></code></pre></td></tr></table></figure><p>配置ISCSIInitiator名称（此处InitiatorName须与服务端配置的ACL允许ISCSI客户机连接的名称一致），如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">InitiatorName=iqn.2018-06.com.xenserver:client<br></code></pre></td></tr></table></figure><p><strong>最好不要修改这个文件！！！！！！</strong></p><p>修改ISCSIInitiator配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/iscsi/iscsid.conf<br><br>添加：<br>node.session.auth.authmethod = CHAP<br>node.session.auth.username = ye<br>node.session.auth.password = 123456<br></code></pre></td></tr></table></figure><p>查找、连接ISCSI设备，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">iscsiadm --mode discovery --type st --portal xxxx:xx<br>iscsiadm --mode node --targetname xxx --portal xxxx:xx --login<br><br></code></pre></td></tr></table></figure><p><img src="/2025/05/05/note/linux/targetcli%E6%90%AD%E5%BB%BAiscsi/targetcli%E6%90%AD%E5%BB%BAiscsi/image-3.png" alt="alt text"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>iscsi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux磁盘与文件系统管理</title>
    <link href="/2025/05/05/note/linux/DiskManager/ch7/ch7/"/>
    <url>/2025/05/05/note/linux/DiskManager/ch7/ch7/</url>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>ch7. Linux磁盘与文件系统管理</p><p><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img.png" alt="img.png"></p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><h5 id="7-1-认识Linux文件系统"><a href="#7-1-认识Linux文件系统" class="headerlink" title="7.1 认识Linux文件系统"></a>7.1 认识Linux文件系统</h5><p>Linux 最传统的磁盘文件系统 （filesystem） 使用的是 EXT2。  </p><h6 id="7-1-1-磁盘组成与分区的复习"><a href="#7-1-1-磁盘组成与分区的复习" class="headerlink" title="7.1.1 磁盘组成与分区的复习"></a>7.1.1 磁盘组成与分区的复习</h6><p>各项磁盘的物理组成我们在第零章里面就介绍过， 同时第二章也谈过分区的概念了<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_1.png" alt="img_1.png"><br>从上面我们知道数据储存与读取的重点在于盘片，而盘片上的物理组成则为（假设此磁盘为单碟片， 盘片图示请参考第二章图2.2.1的示意）：<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_2.png" alt="img_2.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_3.png" alt="img_3.png"><br>至于磁盘的文件名部份，基本上，所有实体磁盘的文件名都已经被仿真成 &#x2F;dev&#x2F;sd[a-p] 的格式，第一颗磁盘文件名为 &#x2F;dev&#x2F;sda。<br>而分区的文件名若以第一颗磁盘为例，则为 &#x2F;dev&#x2F;sda[1-128] 。除了实体磁盘之外，虚拟机的磁盘通常为 &#x2F;dev&#x2F;vd[a-p] 的格式。 若有使用到软件磁盘<br>阵列的话，那还有 &#x2F;dev&#x2F;md[0-128] 的磁盘文件名。使用的是 LVM 时，文件名则为&#x2F;dev&#x2F;VGNAME&#x2F;LVNAME 等格式。<br>关于软件磁盘阵列与 LVM 我们会在后面继续介绍，这里主要介绍的以实体磁盘及虚拟磁盘为主喔！<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_4.png" alt="img_4.png"></p><h6 id="7-1-2-文件系统特性"><a href="#7-1-2-文件系统特性" class="headerlink" title="7.1.2 文件系统特性"></a>7.1.2 文件系统特性</h6><p>我们都知道磁盘分区完毕后还需要进行格式化（format），之后操作系统才能够使用这个文件系统。<br>为什么需要进行“格式化”呢？<br>这是因为每种操作系统所设置的文件属性&#x2F;权限并不相同， 为了存放这些文件所需的数据，因此就需要将分区进行格式化，以成为操作系统能够利用的“文件系统格式（filesystem）”。<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_5.png" alt="img_5.png"><br>传统的磁盘与文件系统之应用中，一个分区就是只能够被格式化成为一个文件系统，所以我们可以说一个 filesystem 就是一个 partition。<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_6.png" alt="img_6.png"><br>inode&#x2F;block数据图：<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_7.png" alt="img_7.png"><br>常常会听到所谓的“磁盘重组”吧？<br>需要磁盘重组的原因就是文件写入的 block 太过于离散了，此时文件读取的性能将会变的很差所致。<br>FAT 的文件系统需要三不五时的磁盘重组一下，那么 Ext2 是否需要磁盘重整呢？<br>由于 Ext2 是索引式文件系统，基本上不太需要常常进行磁盘重组的。但是如果文件系统使用太久，<br>常常删除&#x2F;编辑&#x2F;新增文件时，那么还是可能会造成文件数据太过于离散的问题，此时或许会需要进行重整一下的。  </p><h6 id="7-1-3-Linux-的-EXT2-文件系统（inode）"><a href="#7-1-3-Linux-的-EXT2-文件系统（inode）" class="headerlink" title="7.1.3 Linux 的 EXT2 文件系统（inode）"></a>7.1.3 Linux 的 EXT2 文件系统（inode）</h6><p>标准的Linux 文件系统 Ext2 就是使用这种 inode 为基础的文件系统啦！<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_8.png" alt="img_8.png"><br>在整体的规划当中，文件系统最前面有一个开机扇区（boot sector），这个开机扇区可以安装开机管理程序， 这是个非常重要的设计，<br>因为如此一来我们就能够将不同的开机管理程序安装到个别的文件系统最前端，而不用覆盖整颗磁盘唯一的 MBR， 这样也才能够制作出多重<br>开机的环境啊！<br>至于每一个区块群组（block group）的六个主要内容说明如后：<br>1、data block （数据区块）<br>data block 是用来放置文件内容数据地方，在 Ext2 文件系统中所支持的 block 大小有 1K, 2K 及 4K 三种而已。<br>在格式化时 block 的大小就固定了，且每个 block 都有编号，以方便 inode 的记录啦。<br>不过要注意的是，由于 block 大小的差异，会导致该文件系统能够支持的最大磁盘容量与最大单一文件大小并不相同。 因为 block 大小而产生的 Ext2 文件系统限制如下：<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_9.png" alt="img_9.png"><br>除此之外 Ext2 文件系统的 block 还有什么限制呢？有的！基本限制如下：<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_10.png" alt="img_10.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_11.png" alt="img_11.png">  </p><p>2、inode table （inode 表格）<br>inode 的内容在记录文件的属性以及该文件实际数据是放置在哪几号 block 内！<br>基本上，inode 记录的文件数据至少有下面这些：<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_12.png" alt="img_12.png"><br>inode 的数量与大小也是在格式化时就已经固定了，除此之外 inode 还有些什么特色呢？<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_13.png" alt="img_13.png"><br>我们约略来分析一下 EXT2 的 inode &#x2F; block 与文件大小的关系好了。<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_14.png" alt="img_14.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_15.png" alt="img_15.png"><br>即操作系统书上的图。<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_16.png" alt="img_16.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_17.png" alt="img_17.png">  </p><p>3、Superblock （超级区块）<br>Superblock 是记录整个 filesystem 相关信息的地方， 没有 Superblock ，就没有这个filesystem 了。<br>他记录的信息主要有：<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_18.png" alt="img_18.png"><br>此外，每个 block group 都可能含有 superblock 喔！<br>但是我们也说一个文件系统应该仅有一个 superblock 而已，那是怎么回事啊？<br>事实上除了第一个 block group 内会含有 superblock之外，后续的 block group 不一定含有 superblock ， 而若含有 superblock 则该 superblock<br>主要是做为第一个 block group 内 superblock 的备份咯，这样可以进行 superblock 的救援呢！  </p><p>4、Filesystem Description （文件系统描述说明）<br>这个区段可以描述每个 block group 的开始与结束的 block 号码，以及说明每个区段<br>（superblock, bitmap, inodemap, data block） 分别介于哪一个 block 号码之间。这部份也能够用 dumpe2fs 来观察的。  </p><p>5、block bitmap （区块对照表）<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_19.png" alt="img_19.png">  </p><p>6、inode bitmap （inode 对照表）<br>这个其实与 block bitmap 是类似的功能，只是 block bitmap 记录的是使用与未使用的 block 号码， 至于 inode bitmap 则是记录使用与未使用的 inode 号码啰！  </p><p>7、dumpe2fs： 查询 Ext 家族 superblock 信息的指令<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_20.png" alt="img_20.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_21.png" alt="img_21.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_22.png" alt="img_22.png"></p><h6 id="7-1-4-与目录树的关系"><a href="#7-1-4-与目录树的关系" class="headerlink" title="7.1.4 与目录树的关系"></a>7.1.4 与目录树的关系</h6><p>那么目录与文件在文件系统当中是如何记录数据的呢？基本上可以这样说：  </p><p>1、目录<br>当我们在 Linux 下的文件系统创建一个目录时，文件系统会分配一个 inode 与至少一块 block 给该目录。<br>其中，inode 记录该目录的相关权限与属性，并可记录分配到的那块 block 号码；而 block 则是记录在这个目录下的文件名与该文件名占用的 inode 号码数据。<br>也就是说目录所占用的 block 内容在记录如下的信息：<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_23.png" alt="img_23.png"><br>如果想要实际观察 root 主文件夹内的文件所占用的 inode 号码时，可以使用 ls -i 这个选项来处理：<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_24.png" alt="img_24.png">  </p><p>2、文件<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_25.png" alt="img_25.png">  </p><p>3、目录树读取：<br>好了，经过上面的说明你也应该要很清楚的知道 inode 本身并不记录文件名，文件名的记录是在目录的 block 当中。<br>到“新增&#x2F;删除&#x2F;更名文件名与目录的 w 权限有关”的特色！那么因为文件名是记录在目录的 block 当中，<br>因此当我们要读取某个文件时，就务必会经过目录的 inode 与 block ，然后才能够找到那个待读取文件的 inode 号码， 最终才会读到正确的文件的 block 内的数据。<br>由于目录树是由根目录开始读起，因此系统通过挂载的信息可以找到挂载点的 inode 号码， 此时就能够得到根目录的 inode 内容，并依据该 inode 读取根目录的 block 内的文件名数据，<br>再一层一层的往下读到正确的文件名。<br>举例来说，如果我想要读取 &#x2F;etc&#x2F;passwd 这个文件时， 系统是如何读取的呢？<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_26.png" alt="img_26.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_27.png" alt="img_27.png"></p><h6 id="7-1-5-EXT2-EXT3-EXT4-文件的存取与日志式文件系统的功能"><a href="#7-1-5-EXT2-EXT3-EXT4-文件的存取与日志式文件系统的功能" class="headerlink" title="7.1.5 EXT2&#x2F;EXT3&#x2F;EXT4 文件的存取与日志式文件系统的功能"></a>7.1.5 EXT2&#x2F;EXT3&#x2F;EXT4 文件的存取与日志式文件系统的功能</h6><p>上一小节谈到的仅是读取而已，那么如果是新建一个文件或目录时，我们的文件系统是如何处理的呢？<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_28.png" alt="img_28.png">  </p><p>一般来说，我们将 inode table 与 data block 称为数据存放区域，至于其他例如 superblock、block bitmap 与 inode bitmap 等区段就被称为 metadata （中介数据） 啰，因为 superblock,<br>inode bitmap 及 block bitmap 的数据是经常变动的，每次新增、移除、编辑时都可能会影响到这三个部分的数据，因此才被称为中介数据的啦。  </p><p>1、数据的不一致 （Inconsistent） 状态<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_29.png" alt="img_29.png">  </p><p>2、日志式文件系统 （Journaling filesystem）<br>为了避免上述提到的文件系统不一致的情况发生，因此我们的前辈们想到一个方式， 如果在我们的 filesystem 当中规划出一个区块，<br>该区块专门在记录写入或修订文件时的步骤， 那不就可以简化一致性检查的步骤了？<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_30.png" alt="img_30.png">  </p><h6 id="7-1-6-Linux-文件系统的运行"><a href="#7-1-6-Linux-文件系统的运行" class="headerlink" title="7.1.6 Linux 文件系统的运行"></a>7.1.6 Linux 文件系统的运行</h6><p><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_31.png" alt="img_31.png"><br>为了解决这个效率的问题，因此我们的 Linux 使用的方式是通过一个称为非同步处理（asynchronously） 的方式。所谓的非同步处理是这样的：<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_32.png" alt="img_32.png">  </p><h6 id="7-1-7-挂载点的意义-（mount-point）"><a href="#7-1-7-挂载点的意义-（mount-point）" class="headerlink" title="7.1.7 挂载点的意义 （mount point）"></a>7.1.7 挂载点的意义 （mount point）</h6><p>每个 filesystem 都有独立的 inode &#x2F; block &#x2F; superblock 等信息，这个文件系统要能够链接到目录树才能被我们使用。<br>将文件系统与目录树结合的动作我们称为“挂载”。挂载点一定是目录，该目录为进入该文件系统的入口。<br>因此并不是你有任何文件系统都能使用，必须要“挂载”到目录树的某个目录后，才能够使用该文件系统的。<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_33.png" alt="img_33.png"></p><h6 id="7-1-8-其他-Linux-支持的文件系统与-VFS"><a href="#7-1-8-其他-Linux-支持的文件系统与-VFS" class="headerlink" title="7.1.8 其他 Linux 支持的文件系统与 VFS"></a>7.1.8 其他 Linux 支持的文件系统与 VFS</h6><p><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_34.png" alt="img_34.png"><br>想要知道你的 Linux 支持的文件系统有哪些，可以察看下面这个目录：<br>ls -l &#x2F;lib&#x2F;modules&#x2F;$(uname -r)&#x2F;kernel&#x2F;fs<br>系统目前已载入到内存中支持的文件系统则有：<br>cat &#x2F;proc&#x2F;filesystems  </p><p>1、Linux VFS （Virtual Filesystem Switch）<br>了解了我们使用的文件系统之后，再来则是要提到，那么 Linux 的核心又是如何管理这些认识的文件系统呢？<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_35.png" alt="img_35.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_36.png" alt="img_36.png"></p><h6 id="7-1-9-XFS-文件系统简介"><a href="#7-1-9-XFS-文件系统简介" class="headerlink" title="7.1.9 XFS 文件系统简介"></a>7.1.9 XFS 文件系统简介</h6><p>CentOS 7 开始，默认的文件系统已经由原本的 EXT4 变成了 XFS 文件系统了！为啥CentOS 要舍弃对 Linux 支持度最完整的 EXT 家族而改用 XFS 呢？<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_37.png" alt="img_37.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_38.png" alt="img_38.png">  </p><p>1、XFS 文件系统的配置<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_39.png" alt="img_39.png">  </p><p>xfs 文件系统在数据的分佈上，主要规划为三个部份，一个数据区 （data section）、一个文<br>件系统活动登录区 （log section）以及一个实时运行区 （realtime section）。 这三个区域的<br>数据内容如下：<br>2、数据区 （data section）<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_40.png" alt="img_40.png"><br>3、实时运行区 （realtime section）<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_41.png" alt="img_41.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_42.png" alt="img_42.png">  </p><h5 id="7-2-文件系统的简单操作"><a href="#7-2-文件系统的简单操作" class="headerlink" title="7.2 文件系统的简单操作"></a>7.2 文件系统的简单操作</h5><h6 id="7-2-1-磁盘与目录的容量"><a href="#7-2-1-磁盘与目录的容量" class="headerlink" title="7.2.1 磁盘与目录的容量"></a>7.2.1 磁盘与目录的容量</h6><p>df du</p><h6 id="7-2-2-实体链接与符号链接-ln"><a href="#7-2-2-实体链接与符号链接-ln" class="headerlink" title="7.2.2 实体链接与符号链接 ln"></a>7.2.2 实体链接与符号链接 ln</h6><p>在 Linux 下面的链接文件有两种，一种是类似 Windows 的捷径功能的文件，可以让你快速的<br>链接到目标文件（或目录）； 另一种则是通过文件系统的 inode 链接来产生新文件名，而不<br>是产生新文件！这种称为实体链接 （hard link）。 这两种玩意儿是完全不一样的东西呢！现<br>在就分别来谈谈。<br>1、Hard Link （实体链接, 硬式链接或实际链接）<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_43.png" alt="img_43.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_44.png" alt="img_44.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_45.png" alt="img_45.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_46.png" alt="img_46.png">  </p><p>2、Symbolic Link （符号链接，亦即是捷径）<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_47.png" alt="img_47.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_48.png" alt="img_48.png"><br>这里还是得特别留意，这个 Symbolic Link 与 Windows 的捷径可以给他划上等号，由<br>Symbolic link 所创建的文件为一个独立的新的文件，所以会占用掉 inode 与 block 喔！<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_49.png" alt="img_49.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_50.png" alt="img_50.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_51.png" alt="img_51.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_52.png" alt="img_52.png">  </p><h5 id="7-3-磁盘的分区、格式化、检验与挂载"><a href="#7-3-磁盘的分区、格式化、检验与挂载" class="headerlink" title="7.3 磁盘的分区、格式化、检验与挂载"></a>7.3 磁盘的分区、格式化、检验与挂载</h5><p><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_53.png" alt="img_53.png"></p><h6 id="7-3-1-观察磁盘分区状态"><a href="#7-3-1-观察磁盘分区状态" class="headerlink" title="7.3.1 观察磁盘分区状态"></a>7.3.1 观察磁盘分区状态</h6><h6 id="7-3-2-磁盘分区：gdisk-fdisk"><a href="#7-3-2-磁盘分区：gdisk-fdisk" class="headerlink" title="7.3.2 磁盘分区：gdisk&#x2F;fdisk"></a>7.3.2 磁盘分区：gdisk&#x2F;fdisk</h6><p>gdisk – gpt<br>fdisk – mbr  </p><h6 id="7-3-3-磁盘格式化-创建文件系统"><a href="#7-3-3-磁盘格式化-创建文件系统" class="headerlink" title="7.3.3 磁盘格式化(创建文件系统)"></a>7.3.3 磁盘格式化(创建文件系统)</h6><p>1、XFS 文件系统 mkfs.xfs<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_54.png" alt="img_54.png">  </p><p>2、XFS 文件系统 for RAID 性能优化 （Optional）  </p><h6 id="7-3-6-磁盘-文件系统参数修订"><a href="#7-3-6-磁盘-文件系统参数修订" class="headerlink" title="7.3.6 磁盘&#x2F;文件系统参数修订"></a>7.3.6 磁盘&#x2F;文件系统参数修订</h6><p>你可能会希望修改一下目前文件系统的一些相关信息：<br>1、mknod<br>还记得我们说过，在 Linux 下面所有的设备都以文件来代表吧！但是那个文件如何代表该设备呢？<br>通过文件的 major 与 minor 数值来替代的～所以，那个 major 与 minor 数值是有特殊意义的，不是随意设置的喔！<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_55.png" alt="img_55.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_56.png" alt="img_56.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_57.png" alt="img_57.png">  </p><h5 id="7-5-内存交换空间（swap）之创建"><a href="#7-5-内存交换空间（swap）之创建" class="headerlink" title="7.5 内存交换空间（swap）之创建"></a>7.5 内存交换空间（swap）之创建</h5><p><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_58.png" alt="img_58.png">  </p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>磁盘管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>磁盘配额（Quota）与进阶文件系统管理</title>
    <link href="/2025/05/05/note/linux/DiskManager/ch14/ch14/"/>
    <url>/2025/05/05/note/linux/DiskManager/ch14/ch14/</url>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>ch14. 磁盘配额（Quota）与进阶文件系统管理</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img.png" alt="img.png"></p><h5 id="14-1-磁盘配额-（Quota）-的应用与实作"><a href="#14-1-磁盘配额-（Quota）-的应用与实作" class="headerlink" title="14.1 磁盘配额 （Quota） 的应用与实作"></a>14.1 磁盘配额 （Quota） 的应用与实作</h5><p>Quota 这个玩意儿就字面上的意思来看，就是有多少“限额”的意思啦！  </p><h6 id="14-1-1-什么是-Quota"><a href="#14-1-1-什么是-Quota" class="headerlink" title="14.1.1 什么是 Quota"></a>14.1.1 什么是 Quota</h6><p>在 Linux 系统中，由于是多用户多任务的环境，所以会有多人共同使用一个硬盘空间的情况<br>发生， 如果其中有少数几个使用者大量的占掉了硬盘空间的话，那势必压缩其他使用者的使<br>用权力！ 因此管理员应该适当的限制硬盘的容量给使用者，以妥善的分配系统资源！避免有<br>人抗议呀！<br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_1.png" alt="img_1.png">  </p><h5 id="14-3-逻辑卷轴管理员-（Logical-Volume-Manager）"><a href="#14-3-逻辑卷轴管理员-（Logical-Volume-Manager）" class="headerlink" title="14.3 逻辑卷轴管理员 （Logical Volume Manager）"></a>14.3 逻辑卷轴管理员 （Logical Volume Manager）</h5><p><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_2.png" alt="img_2.png"></p><h6 id="14-3-1-什么是-LVM：-PV-PE-VG-LV-的意义"><a href="#14-3-1-什么是-LVM：-PV-PE-VG-LV-的意义" class="headerlink" title="14.3.1 什么是 LVM： PV, PE, VG, LV 的意义"></a>14.3.1 什么是 LVM： PV, PE, VG, LV 的意义</h6><p>LVM 的全名是 Logical Volume Manager，中文可以翻译作逻辑卷轴管理员。之所以称为“卷轴”可能是因为可以将 filesystem 像卷轴一样伸长或缩短之故吧！<br>LVM 的作法是将几个实体的 partitions （或 disk） 通过软件组合成为一块看起来是独立的大磁盘 （VG） ，然后将这块大<br>磁盘再经过分区成为可使用分区 （LV）， 最终就能够挂载使用了。但是为什么这样的系统可<br>以进行 filesystem 的扩充或缩小呢？其实与一个称为 PE 的项目有关！ 下面我们就得要针对<br>这几个项目来好好聊聊！  </p><p>1、Physical Volume, PV, 实体卷轴<br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_3.png" alt="img_3.png">  </p><p>2、Volume Group, VG, 卷轴群组<br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_4.png" alt="img_4.png">  </p><p>3、Physical Extent, PE, 实体范围区块<br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_5.png" alt="img_5.png">  </p><p>4、Logical Volume, LV, 逻辑卷轴<br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_6.png" alt="img_6.png">  </p><p>5、实作流程<br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_7.png" alt="img_7.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_8.png" alt="img_8.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_9.png" alt="img_9.png">  </p><h6 id="14-3-2-LVM实作流程"><a href="#14-3-2-LVM实作流程" class="headerlink" title="14.3.2 LVM实作流程"></a>14.3.2 LVM实作流程</h6><p>LVM 必需要核心有支持且需要安装 lvm2 这个软件，好佳在的是， CentOS 与其他较新的<br>distributions 已经默认将 lvm 的支持与软件都安装妥当了！所以你不需要担心这方面的问题！<br>用就对了！<br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_10.png" alt="img_10.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_11.png" alt="img_11.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_12.png" alt="img_12.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_13.png" alt="img_13.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_14.png" alt="img_14.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_15.png" alt="img_15.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_16.png" alt="img_16.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_17.png" alt="img_17.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_18.png" alt="img_18.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_19.png" alt="img_19.png">  </p><h6 id="14-3-3-放大-LV-容量"><a href="#14-3-3-放大-LV-容量" class="headerlink" title="14.3.3 放大 LV 容量"></a>14.3.3 放大 LV 容量</h6><p><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_20.png" alt="img_20.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_21.png" alt="img_21.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_22.png" alt="img_22.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_23.png" alt="img_23.png">  </p><h6 id="14-3-4-使用-LVM-thin-Volume-让-LVM-动态自动调整磁盘使用率"><a href="#14-3-4-使用-LVM-thin-Volume-让-LVM-动态自动调整磁盘使用率" class="headerlink" title="14.3.4 使用 LVM thin Volume 让 LVM 动态自动调整磁盘使用率"></a>14.3.4 使用 LVM thin Volume 让 LVM 动态自动调整磁盘使用率</h6><h6 id="14-3-5-LVM-的-LV-磁盘快照"><a href="#14-3-5-LVM-的-LV-磁盘快照" class="headerlink" title="14.3.5 LVM 的 LV 磁盘快照"></a>14.3.5 LVM 的 LV 磁盘快照</h6><p><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_24.png" alt="img_24.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_25.png" alt="img_25.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_26.png" alt="img_26.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_27.png" alt="img_27.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_28.png" alt="img_28.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_29.png" alt="img_29.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_30.png" alt="img_30.png">  </p><h6 id="14-3-6-LVM-相关指令汇整与-LVM-的关闭"><a href="#14-3-6-LVM-相关指令汇整与-LVM-的关闭" class="headerlink" title="14.3.6 LVM 相关指令汇整与 LVM 的关闭"></a>14.3.6 LVM 相关指令汇整与 LVM 的关闭</h6><p><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_31.png" alt="img_31.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_32.png" alt="img_32.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_33.png" alt="img_33.png"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>磁盘管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos 更换yum源</title>
    <link href="/2025/05/05/note/linux/CentOS%20%E6%8D%A2yum%E6%BA%90/Centos_CS/"/>
    <url>/2025/05/05/note/linux/CentOS%20%E6%8D%A2yum%E6%BA%90/Centos_CS/</url>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>由于CentOS7默认的yum源是国外的，<br>导致我们使用yum下载软件的下载速度不是很理想，这时候我们就需要将yum源更换成国内的源。</p><h3 id="可联网"><a href="#可联网" class="headerlink" title="可联网"></a>可联网</h3><h4 id="1-首先我们先对系统本身的yum源进行备份"><a href="#1-首先我们先对系统本身的yum源进行备份" class="headerlink" title="1.首先我们先对系统本身的yum源进行备份"></a>1.首先我们先对系统本身的yum源进行备份</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<br></code></pre></td></tr></table></figure><h4 id="2-下载国内yum源配置文件到-etc-yum-repos-d-CentOS-Base-repo"><a href="#2-下载国内yum源配置文件到-etc-yum-repos-d-CentOS-Base-repo" class="headerlink" title="2.下载国内yum源配置文件到&#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo"></a>2.下载国内yum源配置文件到&#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs commandline">阿里云 CentOS 7 源（推荐）：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br> <br>网易163 CentOS 7 源：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo<br> <br>搜狐 CentOS 7 源：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.sohu.com/help/CentOS7-Base-sohu.repo<br> <br>华为云 CentOS 7 源：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.myhuaweicloud.com/repo/CentOS-7.repo<br> <br>华东理工大学 CentOS 7 源：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.ustc.edu.cn/centos/7/os/x86_64<br> <br>清华大学 CentOS 7 源：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.tuna.tsinghua.edu.cn/centos/7/os/x86_64/<br> <br>北京理工大学 CentOS 7 源：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.bfsu.edu.cn/centos/7/os/x86_64/<br> <br>上海交通大学 CentOS 7 源：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo https://ftp.sjtu.edu.cn/centos/7/os/x86_64/<br> <br>中国科学技术大学 CentOS 7 源：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.ustc.edu.cn/centos/7/os/x86_64/<br> <br>兰州大学 CentOS 7 源：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirror.lzu.edu.cn/centos/7/os/x86_64/<br></code></pre></td></tr></table></figure><h4 id="3-清理yum缓存，并生成新的缓存"><a href="#3-清理yum缓存，并生成新的缓存" class="headerlink" title="3.清理yum缓存，并生成新的缓存"></a>3.清理yum缓存，并生成新的缓存</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum clean all<br>yum makecache<br></code></pre></td></tr></table></figure><h4 id="4-更新yum源检查是否生效"><a href="#4-更新yum源检查是否生效" class="headerlink" title="4. 更新yum源检查是否生效"></a>4. 更新yum源检查是否生效</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update<br></code></pre></td></tr></table></figure><h3 id="内网环境"><a href="#内网环境" class="headerlink" title="内网环境"></a>内网环境</h3><h4 id="1-下载ISO，上传到服务器上"><a href="#1-下载ISO，上传到服务器上" class="headerlink" title="1. 下载ISO，上传到服务器上"></a>1. 下载ISO，上传到服务器上</h4><h4 id="2-备份本地源"><a href="#2-备份本地源" class="headerlink" title="2. 备份本地源"></a>2. 备份本地源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/yum.repos.d<br>mkdir bak<br>mv *.repo bak/ &amp;&amp; ll<br></code></pre></td></tr></table></figure><h4 id="3-挂载镜像"><a href="#3-挂载镜像" class="headerlink" title="3. 挂载镜像"></a>3. 挂载镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /mnt/Centos<br>mount -t iso9660 /home/CentOS-7-x86_64-DVD-2009.iso /mnt/Centos<br>df -h<br></code></pre></td></tr></table></figure><h4 id="4-开机挂载（非必要）"><a href="#4-开机挂载（非必要）" class="headerlink" title="4. 开机挂载（非必要）"></a>4. 开机挂载（非必要）</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">写入开机自挂载一定要写对源路径和挂载路径，不然容易导致开不起机，非必要可以不写入开机挂载，写完后用mount -a 测试下<br>vim /etc/fstab<br>/home/CentOS-7-x86_64-DVD-2009.iso /mnt/Centos iso9660 defaults 0 0<br></code></pre></td></tr></table></figure><h4 id="5-写入源"><a href="#5-写入源" class="headerlink" title="5. 写入源"></a>5. 写入源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/yum.repos.d<br><br>tee &gt;/etc/yum.repos.d/local.repo&lt;&lt;EOF<br>[mnt]<br>name=mnt<br>baseurl=file:///mnt/Centos<br>enabled=1<br>gpgcheck=0<br>EOF<br><br>yum clean all &amp;&amp; yum makecache<br></code></pre></td></tr></table></figure><h4 id="6-测试安装软件"><a href="#6-测试安装软件" class="headerlink" title="6. 测试安装软件"></a>6. 测试安装软件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum list available<br>yum install vim<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>磁盘管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/05/05/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/05/05/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>1</p><p>2</p><p>3</p><p>45</p><p><img src="/2025/05/05/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/123.jpg" alt="123"></p><p>6</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
