<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>linux中，如何排查内存泄漏？</title>
    <link href="/2025/05/05/note/linux/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5/"/>
    <url>/2025/05/05/note/linux/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>linux中，如何排查内存泄漏？</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><h5 id="1、长期稳定性测试"><a href="#1、长期稳定性测试" class="headerlink" title="1、长期稳定性测试"></a>1、长期稳定性测试</h5><p>保证软件至少运行7*24小时，测试过程中有持续的数据变化。</p><h5 id="2、大数据量测试"><a href="#2、大数据量测试" class="headerlink" title="2、大数据量测试"></a>2、大数据量测试</h5><p>这里的大数据量不仅指总数据量大，也包括单个数据的数据量大，比如单块磁盘大小超过2TB、单个虚拟机数据量超过4TB。</p><p>但大数据量只是发现内存泄漏问题的充分不必要条件。</p><h5 id="3、结合free、top等命令进行资源监控"><a href="#3、结合free、top等命令进行资源监控" class="headerlink" title="3、结合free、top等命令进行资源监控"></a>3、结合free、top等命令进行资源监控</h5><p><img src="/2025/05/05/note/linux/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5/img.png" alt="img.png"></p><h5 id="4、持续观察上层应用运行情况"><a href="#4、持续观察上层应用运行情况" class="headerlink" title="4、持续观察上层应用运行情况"></a>4、持续观察上层应用运行情况</h5><p>在长期和大数据量环境下，内存泄漏可能会导致上层应用卡死、应用进程被kill等现象。此时可以通过日志查看是否与内存有关。<br>查看日志文件：可以在&#x2F;var&#x2F;log&#x2F;messages文件中查看操作系统的日志信息，若出现“Out of memory”的报错，则可能存在内存泄漏的问题。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>内存泄漏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux中，使用targetcli搭建iscsi</title>
    <link href="/2025/05/05/note/linux/targetcli%E6%90%AD%E5%BB%BAiscsi/targetcli%E6%90%AD%E5%BB%BAiscsi/"/>
    <url>/2025/05/05/note/linux/targetcli%E6%90%AD%E5%BB%BAiscsi/targetcli%E6%90%AD%E5%BB%BAiscsi/</url>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>linux中，使用targetcli搭建iscsi</p><p>假设使用磁盘分区或者逻辑卷，&#x2F;dev&#x2F;sdb1 &#x2F;dev&#x2F;sdb2，并且一台机器为服务器，两台机器为客户端</p><p>服务器：192.168.0.3<br>客户端：192.168.0.4 192.168.0.5</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><h5 id="1、下载安装软件"><a href="#1、下载安装软件" class="headerlink" title="1、下载安装软件"></a>1、下载安装软件</h5><p>Centos下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install targetcli<br><br>其他自行下载<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://pkgs.org/<br><br>自行下载<br></code></pre></td></tr></table></figure><p>下载安装后需要在服务端保证服务启动，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start target<br>或<br>systemctl start tgt.service<br></code></pre></td></tr></table></figure><p>服务端保证iSCSI正常启动，执行如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl status iscsi<br><br>systemctl start iscsi<br></code></pre></td></tr></table></figure><p><strong>防火墙或者开放端口，主要是3260端口，自行设置。</strong></p><h5 id="2、服务端配置"><a href="#2、服务端配置" class="headerlink" title="2、服务端配置"></a>2、服务端配置</h5><p>执行如下进入targetcli界面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">targetcli<br></code></pre></td></tr></table></figure><p>首先创建要使用的逻辑卷，如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">/backstores/block/ create xendata1 /dev/sdb1<br>/backstores/block/ create xendata2 /dev/sdb2<br></code></pre></td></tr></table></figure><p>如图：<br><img src="/2025/05/05/note/linux/targetcli%E6%90%AD%E5%BB%BAiscsi/targetcli%E6%90%AD%E5%BB%BAiscsi/image.png" alt="alt text"></p><p>然后配置ISCSITarget命名，即创建 IQN (Iscsi Qualified Name) ，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iscsi/ create iqn.2024-05.com.smile:smile1<br></code></pre></td></tr></table></figure><p>创建完成后开始下面的配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd iscsi/iqn.2024-05.com.smile:smile1/tpg1/<br></code></pre></td></tr></table></figure><p>创建lun(target块设备的逻辑单元)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">luns/ create /backstores/block/xendata1<br>luns/ create /backstores/block/xendata2<br></code></pre></td></tr></table></figure><p>后续我们的客户端都会共享到这两个逻辑卷，如果更多配置请自行设置。</p><p>此处如果没有portals&#x2F;，需要自行创建，并且后续使用此端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">portals/ create 0.0.0.0 3261<br></code></pre></td></tr></table></figure><p>创建ACL允许ISCSI客户机连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">acls/ create iqn.2018-06.com.xenserver:client<br><br>此处的 “iqn.2018-06.com.xenserver:client” 应该去客户端上看，位于 /etc/iscsi/initiatorname.iscsi 下，应该和此文件中的名称一致<br></code></pre></td></tr></table></figure><p>创建用户和密码，执行如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd acls/<br>cd iqn.2018-06.com.xenserver:client/<br>set auth userid=ye<br>set auth password=123456<br>info<br></code></pre></td></tr></table></figure><p>如果需要多台机器共享，重复创建acls即可<br><img src="/2025/05/05/note/linux/targetcli%E6%90%AD%E5%BB%BAiscsi/targetcli%E6%90%AD%E5%BB%BAiscsi/image-1.png" alt="alt text"><br><img src="/2025/05/05/note/linux/targetcli%E6%90%AD%E5%BB%BAiscsi/targetcli%E6%90%AD%E5%BB%BAiscsi/image-2.png" alt="alt text"></p><h5 id="3、客户端配置"><a href="#3、客户端配置" class="headerlink" title="3、客户端配置"></a>3、客户端配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">安装：<br>yum -y install iscsi-initiator-utils<br>或<br>yum -y install iscsi-initiator-utils<br></code></pre></td></tr></table></figure><p>配置ISCSIInitiator名称（此处InitiatorName须与服务端配置的ACL允许ISCSI客户机连接的名称一致），如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">InitiatorName=iqn.2018-06.com.xenserver:client<br></code></pre></td></tr></table></figure><p><strong>最好不要修改这个文件！！！！！！</strong></p><p>修改ISCSIInitiator配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/iscsi/iscsid.conf<br><br>添加：<br>node.session.auth.authmethod = CHAP<br>node.session.auth.username = ye<br>node.session.auth.password = 123456<br></code></pre></td></tr></table></figure><p>查找、连接ISCSI设备，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">iscsiadm --mode discovery --type st --portal xxxx:xx<br>iscsiadm --mode node --targetname xxx --portal xxxx:xx --login<br><br></code></pre></td></tr></table></figure><p><img src="/2025/05/05/note/linux/targetcli%E6%90%AD%E5%BB%BAiscsi/targetcli%E6%90%AD%E5%BB%BAiscsi/image-3.png" alt="alt text"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>iscsi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux磁盘与文件系统管理</title>
    <link href="/2025/05/05/note/linux/DiskManager/ch7/ch7/"/>
    <url>/2025/05/05/note/linux/DiskManager/ch7/ch7/</url>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>ch7. Linux磁盘与文件系统管理</p><p><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img.png" alt="img.png"></p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><h5 id="7-1-认识Linux文件系统"><a href="#7-1-认识Linux文件系统" class="headerlink" title="7.1 认识Linux文件系统"></a>7.1 认识Linux文件系统</h5><p>Linux 最传统的磁盘文件系统 （filesystem） 使用的是 EXT2。  </p><h6 id="7-1-1-磁盘组成与分区的复习"><a href="#7-1-1-磁盘组成与分区的复习" class="headerlink" title="7.1.1 磁盘组成与分区的复习"></a>7.1.1 磁盘组成与分区的复习</h6><p>各项磁盘的物理组成我们在第零章里面就介绍过， 同时第二章也谈过分区的概念了<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_1.png" alt="img_1.png"><br>从上面我们知道数据储存与读取的重点在于盘片，而盘片上的物理组成则为（假设此磁盘为单碟片， 盘片图示请参考第二章图2.2.1的示意）：<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_2.png" alt="img_2.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_3.png" alt="img_3.png"><br>至于磁盘的文件名部份，基本上，所有实体磁盘的文件名都已经被仿真成 &#x2F;dev&#x2F;sd[a-p] 的格式，第一颗磁盘文件名为 &#x2F;dev&#x2F;sda。<br>而分区的文件名若以第一颗磁盘为例，则为 &#x2F;dev&#x2F;sda[1-128] 。除了实体磁盘之外，虚拟机的磁盘通常为 &#x2F;dev&#x2F;vd[a-p] 的格式。 若有使用到软件磁盘<br>阵列的话，那还有 &#x2F;dev&#x2F;md[0-128] 的磁盘文件名。使用的是 LVM 时，文件名则为&#x2F;dev&#x2F;VGNAME&#x2F;LVNAME 等格式。<br>关于软件磁盘阵列与 LVM 我们会在后面继续介绍，这里主要介绍的以实体磁盘及虚拟磁盘为主喔！<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_4.png" alt="img_4.png"></p><h6 id="7-1-2-文件系统特性"><a href="#7-1-2-文件系统特性" class="headerlink" title="7.1.2 文件系统特性"></a>7.1.2 文件系统特性</h6><p>我们都知道磁盘分区完毕后还需要进行格式化（format），之后操作系统才能够使用这个文件系统。<br>为什么需要进行“格式化”呢？<br>这是因为每种操作系统所设置的文件属性&#x2F;权限并不相同， 为了存放这些文件所需的数据，因此就需要将分区进行格式化，以成为操作系统能够利用的“文件系统格式（filesystem）”。<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_5.png" alt="img_5.png"><br>传统的磁盘与文件系统之应用中，一个分区就是只能够被格式化成为一个文件系统，所以我们可以说一个 filesystem 就是一个 partition。<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_6.png" alt="img_6.png"><br>inode&#x2F;block数据图：<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_7.png" alt="img_7.png"><br>常常会听到所谓的“磁盘重组”吧？<br>需要磁盘重组的原因就是文件写入的 block 太过于离散了，此时文件读取的性能将会变的很差所致。<br>FAT 的文件系统需要三不五时的磁盘重组一下，那么 Ext2 是否需要磁盘重整呢？<br>由于 Ext2 是索引式文件系统，基本上不太需要常常进行磁盘重组的。但是如果文件系统使用太久，<br>常常删除&#x2F;编辑&#x2F;新增文件时，那么还是可能会造成文件数据太过于离散的问题，此时或许会需要进行重整一下的。  </p><h6 id="7-1-3-Linux-的-EXT2-文件系统（inode）"><a href="#7-1-3-Linux-的-EXT2-文件系统（inode）" class="headerlink" title="7.1.3 Linux 的 EXT2 文件系统（inode）"></a>7.1.3 Linux 的 EXT2 文件系统（inode）</h6><p>标准的Linux 文件系统 Ext2 就是使用这种 inode 为基础的文件系统啦！<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_8.png" alt="img_8.png"><br>在整体的规划当中，文件系统最前面有一个开机扇区（boot sector），这个开机扇区可以安装开机管理程序， 这是个非常重要的设计，<br>因为如此一来我们就能够将不同的开机管理程序安装到个别的文件系统最前端，而不用覆盖整颗磁盘唯一的 MBR， 这样也才能够制作出多重<br>开机的环境啊！<br>至于每一个区块群组（block group）的六个主要内容说明如后：<br>1、data block （数据区块）<br>data block 是用来放置文件内容数据地方，在 Ext2 文件系统中所支持的 block 大小有 1K, 2K 及 4K 三种而已。<br>在格式化时 block 的大小就固定了，且每个 block 都有编号，以方便 inode 的记录啦。<br>不过要注意的是，由于 block 大小的差异，会导致该文件系统能够支持的最大磁盘容量与最大单一文件大小并不相同。 因为 block 大小而产生的 Ext2 文件系统限制如下：<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_9.png" alt="img_9.png"><br>除此之外 Ext2 文件系统的 block 还有什么限制呢？有的！基本限制如下：<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_10.png" alt="img_10.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_11.png" alt="img_11.png">  </p><p>2、inode table （inode 表格）<br>inode 的内容在记录文件的属性以及该文件实际数据是放置在哪几号 block 内！<br>基本上，inode 记录的文件数据至少有下面这些：<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_12.png" alt="img_12.png"><br>inode 的数量与大小也是在格式化时就已经固定了，除此之外 inode 还有些什么特色呢？<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_13.png" alt="img_13.png"><br>我们约略来分析一下 EXT2 的 inode &#x2F; block 与文件大小的关系好了。<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_14.png" alt="img_14.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_15.png" alt="img_15.png"><br>即操作系统书上的图。<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_16.png" alt="img_16.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_17.png" alt="img_17.png">  </p><p>3、Superblock （超级区块）<br>Superblock 是记录整个 filesystem 相关信息的地方， 没有 Superblock ，就没有这个filesystem 了。<br>他记录的信息主要有：<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_18.png" alt="img_18.png"><br>此外，每个 block group 都可能含有 superblock 喔！<br>但是我们也说一个文件系统应该仅有一个 superblock 而已，那是怎么回事啊？<br>事实上除了第一个 block group 内会含有 superblock之外，后续的 block group 不一定含有 superblock ， 而若含有 superblock 则该 superblock<br>主要是做为第一个 block group 内 superblock 的备份咯，这样可以进行 superblock 的救援呢！  </p><p>4、Filesystem Description （文件系统描述说明）<br>这个区段可以描述每个 block group 的开始与结束的 block 号码，以及说明每个区段<br>（superblock, bitmap, inodemap, data block） 分别介于哪一个 block 号码之间。这部份也能够用 dumpe2fs 来观察的。  </p><p>5、block bitmap （区块对照表）<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_19.png" alt="img_19.png">  </p><p>6、inode bitmap （inode 对照表）<br>这个其实与 block bitmap 是类似的功能，只是 block bitmap 记录的是使用与未使用的 block 号码， 至于 inode bitmap 则是记录使用与未使用的 inode 号码啰！  </p><p>7、dumpe2fs： 查询 Ext 家族 superblock 信息的指令<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_20.png" alt="img_20.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_21.png" alt="img_21.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_22.png" alt="img_22.png"></p><h6 id="7-1-4-与目录树的关系"><a href="#7-1-4-与目录树的关系" class="headerlink" title="7.1.4 与目录树的关系"></a>7.1.4 与目录树的关系</h6><p>那么目录与文件在文件系统当中是如何记录数据的呢？基本上可以这样说：  </p><p>1、目录<br>当我们在 Linux 下的文件系统创建一个目录时，文件系统会分配一个 inode 与至少一块 block 给该目录。<br>其中，inode 记录该目录的相关权限与属性，并可记录分配到的那块 block 号码；而 block 则是记录在这个目录下的文件名与该文件名占用的 inode 号码数据。<br>也就是说目录所占用的 block 内容在记录如下的信息：<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_23.png" alt="img_23.png"><br>如果想要实际观察 root 主文件夹内的文件所占用的 inode 号码时，可以使用 ls -i 这个选项来处理：<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_24.png" alt="img_24.png">  </p><p>2、文件<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_25.png" alt="img_25.png">  </p><p>3、目录树读取：<br>好了，经过上面的说明你也应该要很清楚的知道 inode 本身并不记录文件名，文件名的记录是在目录的 block 当中。<br>到“新增&#x2F;删除&#x2F;更名文件名与目录的 w 权限有关”的特色！那么因为文件名是记录在目录的 block 当中，<br>因此当我们要读取某个文件时，就务必会经过目录的 inode 与 block ，然后才能够找到那个待读取文件的 inode 号码， 最终才会读到正确的文件的 block 内的数据。<br>由于目录树是由根目录开始读起，因此系统通过挂载的信息可以找到挂载点的 inode 号码， 此时就能够得到根目录的 inode 内容，并依据该 inode 读取根目录的 block 内的文件名数据，<br>再一层一层的往下读到正确的文件名。<br>举例来说，如果我想要读取 &#x2F;etc&#x2F;passwd 这个文件时， 系统是如何读取的呢？<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_26.png" alt="img_26.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_27.png" alt="img_27.png"></p><h6 id="7-1-5-EXT2-EXT3-EXT4-文件的存取与日志式文件系统的功能"><a href="#7-1-5-EXT2-EXT3-EXT4-文件的存取与日志式文件系统的功能" class="headerlink" title="7.1.5 EXT2&#x2F;EXT3&#x2F;EXT4 文件的存取与日志式文件系统的功能"></a>7.1.5 EXT2&#x2F;EXT3&#x2F;EXT4 文件的存取与日志式文件系统的功能</h6><p>上一小节谈到的仅是读取而已，那么如果是新建一个文件或目录时，我们的文件系统是如何处理的呢？<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_28.png" alt="img_28.png">  </p><p>一般来说，我们将 inode table 与 data block 称为数据存放区域，至于其他例如 superblock、block bitmap 与 inode bitmap 等区段就被称为 metadata （中介数据） 啰，因为 superblock,<br>inode bitmap 及 block bitmap 的数据是经常变动的，每次新增、移除、编辑时都可能会影响到这三个部分的数据，因此才被称为中介数据的啦。  </p><p>1、数据的不一致 （Inconsistent） 状态<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_29.png" alt="img_29.png">  </p><p>2、日志式文件系统 （Journaling filesystem）<br>为了避免上述提到的文件系统不一致的情况发生，因此我们的前辈们想到一个方式， 如果在我们的 filesystem 当中规划出一个区块，<br>该区块专门在记录写入或修订文件时的步骤， 那不就可以简化一致性检查的步骤了？<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_30.png" alt="img_30.png">  </p><h6 id="7-1-6-Linux-文件系统的运行"><a href="#7-1-6-Linux-文件系统的运行" class="headerlink" title="7.1.6 Linux 文件系统的运行"></a>7.1.6 Linux 文件系统的运行</h6><p><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_31.png" alt="img_31.png"><br>为了解决这个效率的问题，因此我们的 Linux 使用的方式是通过一个称为非同步处理（asynchronously） 的方式。所谓的非同步处理是这样的：<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_32.png" alt="img_32.png">  </p><h6 id="7-1-7-挂载点的意义-（mount-point）"><a href="#7-1-7-挂载点的意义-（mount-point）" class="headerlink" title="7.1.7 挂载点的意义 （mount point）"></a>7.1.7 挂载点的意义 （mount point）</h6><p>每个 filesystem 都有独立的 inode &#x2F; block &#x2F; superblock 等信息，这个文件系统要能够链接到目录树才能被我们使用。<br>将文件系统与目录树结合的动作我们称为“挂载”。挂载点一定是目录，该目录为进入该文件系统的入口。<br>因此并不是你有任何文件系统都能使用，必须要“挂载”到目录树的某个目录后，才能够使用该文件系统的。<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_33.png" alt="img_33.png"></p><h6 id="7-1-8-其他-Linux-支持的文件系统与-VFS"><a href="#7-1-8-其他-Linux-支持的文件系统与-VFS" class="headerlink" title="7.1.8 其他 Linux 支持的文件系统与 VFS"></a>7.1.8 其他 Linux 支持的文件系统与 VFS</h6><p><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_34.png" alt="img_34.png"><br>想要知道你的 Linux 支持的文件系统有哪些，可以察看下面这个目录：<br>ls -l &#x2F;lib&#x2F;modules&#x2F;$(uname -r)&#x2F;kernel&#x2F;fs<br>系统目前已载入到内存中支持的文件系统则有：<br>cat &#x2F;proc&#x2F;filesystems  </p><p>1、Linux VFS （Virtual Filesystem Switch）<br>了解了我们使用的文件系统之后，再来则是要提到，那么 Linux 的核心又是如何管理这些认识的文件系统呢？<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_35.png" alt="img_35.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_36.png" alt="img_36.png"></p><h6 id="7-1-9-XFS-文件系统简介"><a href="#7-1-9-XFS-文件系统简介" class="headerlink" title="7.1.9 XFS 文件系统简介"></a>7.1.9 XFS 文件系统简介</h6><p>CentOS 7 开始，默认的文件系统已经由原本的 EXT4 变成了 XFS 文件系统了！为啥CentOS 要舍弃对 Linux 支持度最完整的 EXT 家族而改用 XFS 呢？<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_37.png" alt="img_37.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_38.png" alt="img_38.png">  </p><p>1、XFS 文件系统的配置<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_39.png" alt="img_39.png">  </p><p>xfs 文件系统在数据的分佈上，主要规划为三个部份，一个数据区 （data section）、一个文<br>件系统活动登录区 （log section）以及一个实时运行区 （realtime section）。 这三个区域的<br>数据内容如下：<br>2、数据区 （data section）<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_40.png" alt="img_40.png"><br>3、实时运行区 （realtime section）<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_41.png" alt="img_41.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_42.png" alt="img_42.png">  </p><h5 id="7-2-文件系统的简单操作"><a href="#7-2-文件系统的简单操作" class="headerlink" title="7.2 文件系统的简单操作"></a>7.2 文件系统的简单操作</h5><h6 id="7-2-1-磁盘与目录的容量"><a href="#7-2-1-磁盘与目录的容量" class="headerlink" title="7.2.1 磁盘与目录的容量"></a>7.2.1 磁盘与目录的容量</h6><p>df du</p><h6 id="7-2-2-实体链接与符号链接-ln"><a href="#7-2-2-实体链接与符号链接-ln" class="headerlink" title="7.2.2 实体链接与符号链接 ln"></a>7.2.2 实体链接与符号链接 ln</h6><p>在 Linux 下面的链接文件有两种，一种是类似 Windows 的捷径功能的文件，可以让你快速的<br>链接到目标文件（或目录）； 另一种则是通过文件系统的 inode 链接来产生新文件名，而不<br>是产生新文件！这种称为实体链接 （hard link）。 这两种玩意儿是完全不一样的东西呢！现<br>在就分别来谈谈。<br>1、Hard Link （实体链接, 硬式链接或实际链接）<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_43.png" alt="img_43.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_44.png" alt="img_44.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_45.png" alt="img_45.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_46.png" alt="img_46.png">  </p><p>2、Symbolic Link （符号链接，亦即是捷径）<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_47.png" alt="img_47.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_48.png" alt="img_48.png"><br>这里还是得特别留意，这个 Symbolic Link 与 Windows 的捷径可以给他划上等号，由<br>Symbolic link 所创建的文件为一个独立的新的文件，所以会占用掉 inode 与 block 喔！<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_49.png" alt="img_49.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_50.png" alt="img_50.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_51.png" alt="img_51.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_52.png" alt="img_52.png">  </p><h5 id="7-3-磁盘的分区、格式化、检验与挂载"><a href="#7-3-磁盘的分区、格式化、检验与挂载" class="headerlink" title="7.3 磁盘的分区、格式化、检验与挂载"></a>7.3 磁盘的分区、格式化、检验与挂载</h5><p><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_53.png" alt="img_53.png"></p><h6 id="7-3-1-观察磁盘分区状态"><a href="#7-3-1-观察磁盘分区状态" class="headerlink" title="7.3.1 观察磁盘分区状态"></a>7.3.1 观察磁盘分区状态</h6><h6 id="7-3-2-磁盘分区：gdisk-fdisk"><a href="#7-3-2-磁盘分区：gdisk-fdisk" class="headerlink" title="7.3.2 磁盘分区：gdisk&#x2F;fdisk"></a>7.3.2 磁盘分区：gdisk&#x2F;fdisk</h6><p>gdisk – gpt<br>fdisk – mbr  </p><h6 id="7-3-3-磁盘格式化-创建文件系统"><a href="#7-3-3-磁盘格式化-创建文件系统" class="headerlink" title="7.3.3 磁盘格式化(创建文件系统)"></a>7.3.3 磁盘格式化(创建文件系统)</h6><p>1、XFS 文件系统 mkfs.xfs<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_54.png" alt="img_54.png">  </p><p>2、XFS 文件系统 for RAID 性能优化 （Optional）  </p><h6 id="7-3-6-磁盘-文件系统参数修订"><a href="#7-3-6-磁盘-文件系统参数修订" class="headerlink" title="7.3.6 磁盘&#x2F;文件系统参数修订"></a>7.3.6 磁盘&#x2F;文件系统参数修订</h6><p>你可能会希望修改一下目前文件系统的一些相关信息：<br>1、mknod<br>还记得我们说过，在 Linux 下面所有的设备都以文件来代表吧！但是那个文件如何代表该设备呢？<br>通过文件的 major 与 minor 数值来替代的～所以，那个 major 与 minor 数值是有特殊意义的，不是随意设置的喔！<br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_55.png" alt="img_55.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_56.png" alt="img_56.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_57.png" alt="img_57.png">  </p><h5 id="7-5-内存交换空间（swap）之创建"><a href="#7-5-内存交换空间（swap）之创建" class="headerlink" title="7.5 内存交换空间（swap）之创建"></a>7.5 内存交换空间（swap）之创建</h5><p><img src="/2025/05/05/note/linux/DiskManager/ch7/ch7/img_58.png" alt="img_58.png">  </p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>磁盘管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>磁盘配额（Quota）与进阶文件系统管理</title>
    <link href="/2025/05/05/note/linux/DiskManager/ch14/ch14/"/>
    <url>/2025/05/05/note/linux/DiskManager/ch14/ch14/</url>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>ch14. 磁盘配额（Quota）与进阶文件系统管理</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img.png" alt="img.png"></p><h5 id="14-1-磁盘配额-（Quota）-的应用与实作"><a href="#14-1-磁盘配额-（Quota）-的应用与实作" class="headerlink" title="14.1 磁盘配额 （Quota） 的应用与实作"></a>14.1 磁盘配额 （Quota） 的应用与实作</h5><p>Quota 这个玩意儿就字面上的意思来看，就是有多少“限额”的意思啦！  </p><h6 id="14-1-1-什么是-Quota"><a href="#14-1-1-什么是-Quota" class="headerlink" title="14.1.1 什么是 Quota"></a>14.1.1 什么是 Quota</h6><p>在 Linux 系统中，由于是多用户多任务的环境，所以会有多人共同使用一个硬盘空间的情况<br>发生， 如果其中有少数几个使用者大量的占掉了硬盘空间的话，那势必压缩其他使用者的使<br>用权力！ 因此管理员应该适当的限制硬盘的容量给使用者，以妥善的分配系统资源！避免有<br>人抗议呀！<br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_1.png" alt="img_1.png">  </p><h5 id="14-3-逻辑卷轴管理员-（Logical-Volume-Manager）"><a href="#14-3-逻辑卷轴管理员-（Logical-Volume-Manager）" class="headerlink" title="14.3 逻辑卷轴管理员 （Logical Volume Manager）"></a>14.3 逻辑卷轴管理员 （Logical Volume Manager）</h5><p><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_2.png" alt="img_2.png"></p><h6 id="14-3-1-什么是-LVM：-PV-PE-VG-LV-的意义"><a href="#14-3-1-什么是-LVM：-PV-PE-VG-LV-的意义" class="headerlink" title="14.3.1 什么是 LVM： PV, PE, VG, LV 的意义"></a>14.3.1 什么是 LVM： PV, PE, VG, LV 的意义</h6><p>LVM 的全名是 Logical Volume Manager，中文可以翻译作逻辑卷轴管理员。之所以称为“卷轴”可能是因为可以将 filesystem 像卷轴一样伸长或缩短之故吧！<br>LVM 的作法是将几个实体的 partitions （或 disk） 通过软件组合成为一块看起来是独立的大磁盘 （VG） ，然后将这块大<br>磁盘再经过分区成为可使用分区 （LV）， 最终就能够挂载使用了。但是为什么这样的系统可<br>以进行 filesystem 的扩充或缩小呢？其实与一个称为 PE 的项目有关！ 下面我们就得要针对<br>这几个项目来好好聊聊！  </p><p>1、Physical Volume, PV, 实体卷轴<br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_3.png" alt="img_3.png">  </p><p>2、Volume Group, VG, 卷轴群组<br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_4.png" alt="img_4.png">  </p><p>3、Physical Extent, PE, 实体范围区块<br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_5.png" alt="img_5.png">  </p><p>4、Logical Volume, LV, 逻辑卷轴<br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_6.png" alt="img_6.png">  </p><p>5、实作流程<br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_7.png" alt="img_7.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_8.png" alt="img_8.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_9.png" alt="img_9.png">  </p><h6 id="14-3-2-LVM实作流程"><a href="#14-3-2-LVM实作流程" class="headerlink" title="14.3.2 LVM实作流程"></a>14.3.2 LVM实作流程</h6><p>LVM 必需要核心有支持且需要安装 lvm2 这个软件，好佳在的是， CentOS 与其他较新的<br>distributions 已经默认将 lvm 的支持与软件都安装妥当了！所以你不需要担心这方面的问题！<br>用就对了！<br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_10.png" alt="img_10.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_11.png" alt="img_11.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_12.png" alt="img_12.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_13.png" alt="img_13.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_14.png" alt="img_14.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_15.png" alt="img_15.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_16.png" alt="img_16.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_17.png" alt="img_17.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_18.png" alt="img_18.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_19.png" alt="img_19.png">  </p><h6 id="14-3-3-放大-LV-容量"><a href="#14-3-3-放大-LV-容量" class="headerlink" title="14.3.3 放大 LV 容量"></a>14.3.3 放大 LV 容量</h6><p><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_20.png" alt="img_20.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_21.png" alt="img_21.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_22.png" alt="img_22.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_23.png" alt="img_23.png">  </p><h6 id="14-3-4-使用-LVM-thin-Volume-让-LVM-动态自动调整磁盘使用率"><a href="#14-3-4-使用-LVM-thin-Volume-让-LVM-动态自动调整磁盘使用率" class="headerlink" title="14.3.4 使用 LVM thin Volume 让 LVM 动态自动调整磁盘使用率"></a>14.3.4 使用 LVM thin Volume 让 LVM 动态自动调整磁盘使用率</h6><h6 id="14-3-5-LVM-的-LV-磁盘快照"><a href="#14-3-5-LVM-的-LV-磁盘快照" class="headerlink" title="14.3.5 LVM 的 LV 磁盘快照"></a>14.3.5 LVM 的 LV 磁盘快照</h6><p><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_24.png" alt="img_24.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_25.png" alt="img_25.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_26.png" alt="img_26.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_27.png" alt="img_27.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_28.png" alt="img_28.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_29.png" alt="img_29.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_30.png" alt="img_30.png">  </p><h6 id="14-3-6-LVM-相关指令汇整与-LVM-的关闭"><a href="#14-3-6-LVM-相关指令汇整与-LVM-的关闭" class="headerlink" title="14.3.6 LVM 相关指令汇整与 LVM 的关闭"></a>14.3.6 LVM 相关指令汇整与 LVM 的关闭</h6><p><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_31.png" alt="img_31.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_32.png" alt="img_32.png"><br><img src="/2025/05/05/note/linux/DiskManager/ch14/ch14/img_33.png" alt="img_33.png"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>磁盘管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos 更换yum源</title>
    <link href="/2025/05/05/note/linux/CentOS%20%E6%8D%A2yum%E6%BA%90/Centos_CS/"/>
    <url>/2025/05/05/note/linux/CentOS%20%E6%8D%A2yum%E6%BA%90/Centos_CS/</url>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>由于CentOS7默认的yum源是国外的，<br>导致我们使用yum下载软件的下载速度不是很理想，这时候我们就需要将yum源更换成国内的源。</p><h3 id="可联网"><a href="#可联网" class="headerlink" title="可联网"></a>可联网</h3><h4 id="1-首先我们先对系统本身的yum源进行备份"><a href="#1-首先我们先对系统本身的yum源进行备份" class="headerlink" title="1.首先我们先对系统本身的yum源进行备份"></a>1.首先我们先对系统本身的yum源进行备份</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<br></code></pre></td></tr></table></figure><h4 id="2-下载国内yum源配置文件到-etc-yum-repos-d-CentOS-Base-repo"><a href="#2-下载国内yum源配置文件到-etc-yum-repos-d-CentOS-Base-repo" class="headerlink" title="2.下载国内yum源配置文件到&#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo"></a>2.下载国内yum源配置文件到&#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs commandline">阿里云 CentOS 7 源（推荐）：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br> <br>网易163 CentOS 7 源：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo<br> <br>搜狐 CentOS 7 源：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.sohu.com/help/CentOS7-Base-sohu.repo<br> <br>华为云 CentOS 7 源：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.myhuaweicloud.com/repo/CentOS-7.repo<br> <br>华东理工大学 CentOS 7 源：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.ustc.edu.cn/centos/7/os/x86_64<br> <br>清华大学 CentOS 7 源：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.tuna.tsinghua.edu.cn/centos/7/os/x86_64/<br> <br>北京理工大学 CentOS 7 源：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.bfsu.edu.cn/centos/7/os/x86_64/<br> <br>上海交通大学 CentOS 7 源：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo https://ftp.sjtu.edu.cn/centos/7/os/x86_64/<br> <br>中国科学技术大学 CentOS 7 源：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.ustc.edu.cn/centos/7/os/x86_64/<br> <br>兰州大学 CentOS 7 源：<br>wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirror.lzu.edu.cn/centos/7/os/x86_64/<br></code></pre></td></tr></table></figure><h4 id="3-清理yum缓存，并生成新的缓存"><a href="#3-清理yum缓存，并生成新的缓存" class="headerlink" title="3.清理yum缓存，并生成新的缓存"></a>3.清理yum缓存，并生成新的缓存</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum clean all<br>yum makecache<br></code></pre></td></tr></table></figure><h4 id="4-更新yum源检查是否生效"><a href="#4-更新yum源检查是否生效" class="headerlink" title="4. 更新yum源检查是否生效"></a>4. 更新yum源检查是否生效</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update<br></code></pre></td></tr></table></figure><h3 id="内网环境"><a href="#内网环境" class="headerlink" title="内网环境"></a>内网环境</h3><h4 id="1-下载ISO，上传到服务器上"><a href="#1-下载ISO，上传到服务器上" class="headerlink" title="1. 下载ISO，上传到服务器上"></a>1. 下载ISO，上传到服务器上</h4><h4 id="2-备份本地源"><a href="#2-备份本地源" class="headerlink" title="2. 备份本地源"></a>2. 备份本地源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/yum.repos.d<br>mkdir bak<br>mv *.repo bak/ &amp;&amp; ll<br></code></pre></td></tr></table></figure><h4 id="3-挂载镜像"><a href="#3-挂载镜像" class="headerlink" title="3. 挂载镜像"></a>3. 挂载镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /mnt/Centos<br>mount -t iso9660 /home/CentOS-7-x86_64-DVD-2009.iso /mnt/Centos<br>df -h<br></code></pre></td></tr></table></figure><h4 id="4-开机挂载（非必要）"><a href="#4-开机挂载（非必要）" class="headerlink" title="4. 开机挂载（非必要）"></a>4. 开机挂载（非必要）</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">写入开机自挂载一定要写对源路径和挂载路径，不然容易导致开不起机，非必要可以不写入开机挂载，写完后用mount -a 测试下<br>vim /etc/fstab<br>/home/CentOS-7-x86_64-DVD-2009.iso /mnt/Centos iso9660 defaults 0 0<br></code></pre></td></tr></table></figure><h4 id="5-写入源"><a href="#5-写入源" class="headerlink" title="5. 写入源"></a>5. 写入源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/yum.repos.d<br><br>tee &gt;/etc/yum.repos.d/local.repo&lt;&lt;EOF<br>[mnt]<br>name=mnt<br>baseurl=file:///mnt/Centos<br>enabled=1<br>gpgcheck=0<br>EOF<br><br>yum clean all &amp;&amp; yum makecache<br></code></pre></td></tr></table></figure><h4 id="6-测试安装软件"><a href="#6-测试安装软件" class="headerlink" title="6. 测试安装软件"></a>6. 测试安装软件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum list available<br>yum install vim<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>磁盘管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQLServer 死锁优先级</title>
    <link href="/2025/05/05/note/db/sqlserver/lock/deadlock_priority/"/>
    <url>/2025/05/05/note/db/sqlserver/lock/deadlock_priority/</url>
    
    <content type="html"><![CDATA[<h2 id="SQLServer-死锁优先级"><a href="#SQLServer-死锁优先级" class="headerlink" title="SQLServer 死锁优先级"></a>SQLServer 死锁优先级</h2><p>SET DEADLOCK_PRIORITY (Transact-SQL)</p><p>本文主要内容如下：</p><table><thead><tr><th>Chapter Contents</th></tr></thead><tbody><tr><td><a href="#cp1">1 语法</a></td></tr><tr><td><a href="#cp2">2 参数</a></td></tr><tr><td><a href="#cp3">3 备注</a></td></tr><tr><td><a href="#cp4">4 权限</a></td></tr><tr><td><a href="#cp5">5 示例</a></td></tr><tr><td><a href="#cp6">6 后续步骤</a></td></tr></tbody></table><p>指定当前会话与其他会话发生死锁时继续处理的相对重要性。</p><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1 语法"></a><a name="cp1"></a>1 语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> DEADLOCK_PRIORITY &#123; LOW <span class="hljs-operator">|</span> NORMAL <span class="hljs-operator">|</span> HIGH <span class="hljs-operator">|</span> <span class="hljs-operator">&lt;</span><span class="hljs-type">numeric</span><span class="hljs-operator">-</span>priority<span class="hljs-operator">&gt;</span> <span class="hljs-operator">|</span> <span class="hljs-variable">@deadlock_var</span> <span class="hljs-operator">|</span> <span class="hljs-variable">@deadlock_intvar</span> &#125;<br>  <br><span class="hljs-operator">&lt;</span><span class="hljs-type">numeric</span><span class="hljs-operator">-</span>priority<span class="hljs-operator">&gt;</span> ::<span class="hljs-operator">=</span> &#123; <span class="hljs-number">-10</span> <span class="hljs-operator">|</span> <span class="hljs-number">-9</span> <span class="hljs-operator">|</span> <span class="hljs-number">-8</span> <span class="hljs-operator">|</span> ... <span class="hljs-operator">|</span> <span class="hljs-number">0</span> <span class="hljs-operator">|</span> ... <span class="hljs-operator">|</span> <span class="hljs-number">8</span> <span class="hljs-operator">|</span> <span class="hljs-number">9</span> <span class="hljs-operator">|</span> <span class="hljs-number">10</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="2-参数"><a href="#2-参数" class="headerlink" title="2 参数"></a><a name="cp2"></a>2 参数</h3><p>LOW</p><p>指定如果当前会话发生死锁，并且死锁链中涉及的其他会话的死锁优先级设置为 NORMAL 或 HIGH 或大于 -5 的整数值，则当前会话将成为死锁牺牲品。 如果其他会话的死锁优先级设置为小于 -5 的整数值，则当前会话将不会成为死锁牺牲品。 此参数还指定如果其他会话的死锁优先级设置为 LOW 或 -5，则当前会话将可能成为死锁牺牲品。</p><p>NORMAL</p><p>指定如果死锁链中涉及的其他会话的死锁优先级设置为 HIGH 或大于 0 的整数值，则当前会话将成为死锁牺牲品，但如果其他会话的死锁优先级设置为 LOW 或小于 0 的整数值，则当前会话将不会成为死锁牺牲品。 此参数还指定如果其他会话的死锁优先级设置为 NORMAL 或 0，则当前会话将可能成为死锁牺牲品。 NORMAL 为默认优先级。</p><p>HIGH</p><p>指定如果死锁链中涉及的其他会话的死锁优先级设置为大于 5 的整数值，则当前会话将成为死锁牺牲品，或者如果其他会话的死锁优先级设置为 HIGH 或 5，则当前会话可能成为死锁牺牲品。</p><numeric-priority><p>用以提供 21 个死锁优先级别的整数值范围（-10 到 10）。 它指定如果死锁链中涉及的其他会话以更高的死锁优先级值运行，则当前会话将成为死锁牺牲品，但如果其他会话以低于当前会话的死锁优先级值运行，则当前会话不会成为死锁牺牲品。 它还指定如果其他会话以相同于当前会话的死锁优先级值运行，则当前会话可能成为死锁牺牲品。 LOW 对应于 -5、NORMAL 对应于 0 以及 HIGH 对应于 5。</p><p>@deadlock_var</p><p>指定死锁优先级的字符变量。 此变量必须设置为“LOW”、“NORMAL”或“HIGH”中的一个值。 而且必须足够大以保存整个字符串。</p><p>@deadlock_intvar</p><p>指定死锁优先级的整数变量。 此变量必须设置为 -10 到 10 范围中的一个整数值。</p><h3 id="3-备注"><a href="#3-备注" class="headerlink" title="3 备注"></a><a name="cp3"></a>3 备注</h3><p>当两个会话同时等待访问由其他会话锁定的资源时，便会发生死锁。 当 SQL Server 实例检测到两个会话发生死锁时，将选择其中一个会话作为死锁牺牲品来解决死锁。 此牺牲品的当前事务将回滚，且死锁错误消息 1205 返回客户端。 这样可释放由该会话所控制的所有锁，从而允许其他会话继续进行。</p><p>将哪个会话选为死锁牺牲品取决于每个会话的死锁优先级：</p><pre><code class="hljs">(1) 如果两个会话的死锁优先级相同，则 SQL Server 实例将回滚的开销较低的会话选为死锁牺牲品。 例如，如果两个会话都将其死锁优先级设置为 HIGH，则此实例便将它估计回滚的开销较低的会话选为牺牲品。 该成本是通过比较各事务此时已写入的日志字节数来确定的。 （可以在死锁图中将此值看作“已用日志”）。(2) 如果会话的死锁优先级不同，则将死锁优先级最低的会话选为死锁牺牲品。</code></pre><p>SET DEADLOCK_PRIORITY 是在执行或运行时设置，而不是在分析时设置。</p><p>此语法在 Azure Synapse Analytics 专用 SQL 池中不受支持。 它在 Azure Synapse Analytics 无服务器 SQL 池中受支持。</p><h3 id="4-权限"><a href="#4-权限" class="headerlink" title="4 权限"></a><a name="cp4"></a>4 权限</h3><p>要求 公共 角色具有成员身份。</p><h3 id="5-示例"><a href="#5-示例" class="headerlink" title="5 示例"></a><a name="cp5"></a>5 示例</h3><p>以下示例使用变量将死锁优先级设置为 LOW。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@deadlock_var</span> <span class="hljs-type">NCHAR</span>(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@deadlock_var</span> <span class="hljs-operator">=</span> N<span class="hljs-string">&#x27;LOW&#x27;</span>;<br>  <br><span class="hljs-keyword">SET</span> DEADLOCK_PRIORITY <span class="hljs-variable">@deadlock_var</span>;<br>GO<br></code></pre></td></tr></table></figure><p>以下示例将死锁优先级设置为 NORMAL。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> DEADLOCK_PRIORITY NORMAL;<br>GO<br></code></pre></td></tr></table></figure><h3 id="6-后续步骤"><a href="#6-后续步骤" class="headerlink" title="6 后续步骤"></a><a name="cp6"></a>6 后续步骤</h3><h4 id="参与贡献"><a href="#参与贡献" class="headerlink" title="参与贡献"></a>参与贡献</h4><ol><li>Fork 本仓库</li><li>新建 Feat_xxx 分支</li><li>提交代码</li><li>新建 Pull Request</li></ol><h4 id="特技"><a href="#特技" class="headerlink" title="特技"></a>特技</h4><ol><li>使用 Readme_XXX.md 来支持不同的语言，例如 Readme_en.md, Readme_zh.md</li><li>Gitee 官方博客 <a href="https://blog.gitee.com/">blog.gitee.com</a></li><li>你可以 <a href="https://gitee.com/explore">https://gitee.com/explore</a> 这个地址来了解 Gitee 上的优秀开源项目</li><li><a href="https://gitee.com/gvp">GVP</a> 全称是 Gitee 最有价值开源项目，是综合评定出的优秀开源项目</li><li>Gitee 官方提供的使用手册 <a href="https://gitee.com/help">https://gitee.com/help</a></li><li>Gitee 封面人物是一档用来展示 Gitee 会员风采的栏目 <a href="https://gitee.com/gitee-stars/">https://gitee.com/gitee-stars/</a></li></ol></numeric-priority>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
      <category>sqlserver</category>
      
      <category>lock</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>sqlserver</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入浅出无日志表</title>
    <link href="/2025/05/05/note/db/postgresql/unlogged/README/"/>
    <url>/2025/05/05/note/db/postgresql/unlogged/README/</url>
    
    <content type="html"><![CDATA[<h2 id="深入浅出无日志表"><a href="#深入浅出无日志表" class="headerlink" title="深入浅出无日志表"></a>深入浅出无日志表</h2><table><thead><tr><th>Chapter Contents</th></tr></thead><tbody><tr><td><a href="#cp1">1 前言</a></td></tr><tr><td><a href="#cp2">2 分析</a></td></tr><tr><td><a href="#cp3">3 见微知著</a></td></tr><tr><td><a href="#cp4">4 表的转换</a></td></tr><tr><td><a href="#cp5">5 块结构</a></td></tr><tr><td><a href="#cp6">6 小结</a></td></tr></tbody></table><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a><a name="cp1"></a>1. 前言</h3><p>在 PostgreSQL 中，支持多种类型的表 — 临时表、普通表，以及无日志表。</p><ol><li><p>顾名思义，”无日志”其优势在于不用记录 WAL，那么写入速度自然也杠杠的</p></li><li><p>同理，无日志表在备库上没有数据(只有一个壳)，也无法进行访问，会提示<br>ERROR: cannot access temporary or unlogged relations during recovery，</p><p> pg_basebackup<br> 的时候也会跳过无日志表 (除了 init 分支)。</p></li></ol><p>那么无日志表又有哪些鲜为人知的细节呢？</p><h3 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a><a name="cp2"></a>2. 分析</h3><p>首先，让我们思考一下，无日志表的数据会落盘吗？或者说，按照常识，执行正常检查点的时候会落盘吗？</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">However, they are not crash-safe: an unlogged table is automatically truncated after a <br>crash or unclean shutdown. The contents of an unlogged table are also not replicated <br>to standby servers. Any indexes created on an unlogged table are automatically unlogged as well.<br><br>然而，它们不具有崩溃安全性：未记录的表在崩溃或不正常关闭后会自动被截断。<br>未记录表的内容也不会被复制到备用服务器。在未记录表上创建的任何索引也会自动变为未记录状态。<br></code></pre></td></tr></table></figure><p>根据官网解释，在崩溃或者非正常关闭的时候，表文件会被截断，也就是说，在正常关闭的情况下，数据是会正常落盘的，让我们验证一下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br>postgres<span class="hljs-operator">=</span># <span class="hljs-keyword">create</span> unlogged <span class="hljs-keyword">table</span> t1(id <span class="hljs-type">int</span>,info text);<br><span class="hljs-keyword">CREATE TABLE</span><br>postgres<span class="hljs-operator">=</span># <span class="hljs-keyword">insert into</span> t1 <span class="hljs-keyword">select</span> n,md5(random()::text) <span class="hljs-keyword">from</span> generate_series(<span class="hljs-number">1</span>,<span class="hljs-number">10000</span>) <span class="hljs-keyword">as</span> n;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">10000</span><br>postgres<span class="hljs-operator">=</span># <span class="hljs-keyword">select</span> pg_relation_filepath(<span class="hljs-string">&#x27;t1&#x27;</span>);<br> pg_relation_filepath <br><span class="hljs-comment">----------------------</span><br> base<span class="hljs-operator">/</span><span class="hljs-number">5</span><span class="hljs-operator">/</span><span class="hljs-number">51158</span><br>(<span class="hljs-number">1</span> <span class="hljs-type">row</span>)<br>postgres<span class="hljs-operator">=</span># checkpoint ;<br>CHECKPOINT<br>[postgres<span class="hljs-variable">@mypg</span> <span class="hljs-number">5</span>]$ ls <span class="hljs-operator">-</span>lrth <span class="hljs-number">51158</span><span class="hljs-operator">*</span><br><span class="hljs-operator">-</span>rw<span class="hljs-comment">------- 1 postgres postgres    0 Dec  7 15:04 51158_init</span><br><span class="hljs-operator">-</span>rw<span class="hljs-comment">------- 1 postgres postgres  24K Dec  7 15:04 51158_fsm</span><br><span class="hljs-operator">-</span>rw<span class="hljs-comment">------- 1 postgres postgres 672K Dec  7 15:04 51158</span><br><span class="hljs-operator">-</span>rw<span class="hljs-comment">------- 1 postgres postgres 8.0K Dec  7 15:04 51158_vm</span><br>[postgres<span class="hljs-variable">@mypg</span> <span class="hljs-number">5</span>]$ hexdump <span class="hljs-operator">-</span>C <span class="hljs-number">51158</span><br><span class="hljs-number">00000000</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-operator">|</span>................<span class="hljs-operator">|</span><br><span class="hljs-operator">*</span><br><span class="hljs-number">000</span>a8000<br></code></pre></td></tr></table></figure><p>hexdump 会将相同的都是 0 的行标记为 *，用 vim 打开也确实全是 0。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>0000000: 0000 0000 0000 0000 0000 0000 0000 0000  ................<br>0000010: 0000 0000 0000 0000 0000 0000 0000 0000  ................<br>0000020: 0000 0000 0000 0000 0000 0000 0000 0000  ................<br>....<br></code></pre></td></tr></table></figure><p>让我们正常关闭，再观察一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">postgres=# \q<br>[postgres@mypg ~]$ pg_ctl -D 17data stop<br>waiting for server to shut down.... done<br>server stopped<br>[postgres@mypg 5]$ hexdump -C 51158 | head -n 10<br>00000000  00 00 00 00 00 00 00 00  00 00 04 00 f8 01 00 02  |................|<br>00000010  00 20 04 20 00 00 00 00  c0 9f 7a 00 80 9f 7a 00  |. . ......z...z.|<br>00000020  40 9f 7a 00 00 9f 7a 00  c0 9e 7a 00 80 9e 7a 00  |@.z...z...z...z.|<br>00000030  40 9e 7a 00 00 9e 7a 00  c0 9d 7a 00 80 9d 7a 00  |@.z...z...z...z.|<br>00000040  40 9d 7a 00 00 9d 7a 00  c0 9c 7a 00 80 9c 7a 00  |@.z...z...z...z.|<br>00000050  40 9c 7a 00 00 9c 7a 00  c0 9b 7a 00 80 9b 7a 00  |@.z...z...z...z.|<br>00000060  40 9b 7a 00 00 9b 7a 00  c0 9a 7a 00 80 9a 7a 00  |@.z...z...z...z.|<br>00000070  40 9a 7a 00 00 9a 7a 00  c0 99 7a 00 80 99 7a 00  |@.z...z...z...z.|<br>00000080  40 99 7a 00 00 99 7a 00  c0 98 7a 00 80 98 7a 00  |@.z...z...z...z.|<br>00000090  40 98 7a 00 00 98 7a 00  c0 97 7a 00 80 97 7a 00  |@.z...z...z...z.|<br></code></pre></td></tr></table></figure><p>这次就可以很清楚地看到，数据都被刷盘了。那么这二者有什么区别？其实代码的注释就很清楚:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  * Unless this is a shutdown checkpoint or we have been explicitly told,</span><br><span class="hljs-comment">  * we write only permanent, dirty buffers.  But at shutdown or end of</span><br><span class="hljs-comment">  * recovery, we write all dirty buffers.</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">if</span> (!((flags &amp; (CHECKPOINT_IS_SHUTDOWN | CHECKPOINT_END_OF_RECOVERY |<br>                 CHECKPOINT_FLUSH_ALL))))<br>     mask |= BM_PERMANENT;<br></code></pre></td></tr></table></figure><p>也就是说，如果 checkpoint 的时候，其 flags<br>不是 CHECKPOINT_IS_SHUTDOWN、CHECKPOINT_END_OF_RECOVERY 或者 CHECKPOINT_FLUSH_ALL，<br>那么只会刷持久化的表。让我们验证一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>(gdb) b CreateCheckPoint<br>Breakpoint 1 at 0x569430: file xlog.c, line 6827.<br>(gdb) signal SIGINT<br>Continuing with signal SIGINT.<br>Program received signal SIGINT, Interrupt.<br>0x00007f0ccd0ae0c3 in __epoll_wait_nocancel () from /lib64/libc.so.6<br>(gdb) c<br>Continuing.<br>Breakpoint 1, CreateCheckPoint (flags=108) at xlog.c:6827<br>6827    xlog.c: No such file or directory.<br>(gdb) p/x flags<br><span class="hljs-meta prompt_">$</span><span class="language-bash">1 = 0x6c</span><br>(gdb) p flags<br><span class="hljs-meta prompt_">$</span><span class="language-bash">2 = 108</span><br></code></pre></td></tr></table></figure><p>108 等于：</p><pre><code class="hljs">• CHECKPOINT_REQUESTED (0x0040 = 64)• CHECKPOINT_WAIT (0x0020 = 32)• CHECKPOINT_FORCE (0x0008 = 8)• CHECKPOINT_IMMEDIATE (0x0004 = 4)</code></pre><p>说明不带有 CHECKPOINT_IS_SHUTDOWN 或者 CHECKPOINT_FLUSH_ALL，对应到我们前面的现象，<br>没有刷新 unlogged tables。再看看正常关机的情况 (注意此处需要用 SIGUSR2 的信号)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>(gdb) b CreateCheckPoint<br>Breakpoint 1 at 0x569430: file xlog.c, line 6827.<br>(gdb) signal SIGUSR2<br>Continuing with signal SIGUSR2.<br>Program received signal SIGUSR2, User defined signal 2.<br>0x00007f0ccd0ae0c3 in __epoll_wait_nocancel () from /lib64/libc.so.6<br>(gdb) c<br>Continuing.<br>Breakpoint 1, CreateCheckPoint (flags=5) at xlog.c:6827<br>6827    xlog.c: No such file or directory.<br>(gdb) p/x flags<br><span class="hljs-meta prompt_">$</span><span class="language-bash">1 = 0x5</span><br></code></pre></td></tr></table></figure><p>flags &#x3D; 5 表示 CHECKPOINT_IS_SHUTDOWN | CHECKPOINT_IMMEDIATE，所以对应到我们前面的现象，正常关机会进行刷盘。</p><p>另外上面细心的读者可能发现了，执行正常的 checkpoint，其大小也变为了同样的大小，我没有看具体代码，<br>猜测是类似于打开 wal_init_zero 参数，调用 pg_pwrite_zeros，直接调用 mdextend -&gt; FileWrite</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * mdextend() -- Add a block to the specified relation.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * The semantics are nearly the same as mdwrite(): write at the</span><br><span class="hljs-comment"> * specified position.  However, this is to be used for the case of</span><br><span class="hljs-comment"> * extending a relation (i.e., blocknum is at or beyond the current</span><br><span class="hljs-comment"> * EOF).  Note that we assume writing a block beyond current EOF</span><br><span class="hljs-comment"> * causes intervening file space to become filled with zeroes.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span><br><span class="hljs-title function_">mdextend</span><span class="hljs-params">(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,</span><br><span class="hljs-params">         <span class="hljs-type">const</span> <span class="hljs-type">void</span> *buffer, <span class="hljs-type">bool</span> skipFsync)</span><br>&#123;<br>    <span class="hljs-type">off_t</span>        seekpos;<br>    <span class="hljs-type">int</span>            nbytes;<br>    MdfdVec    *v;<br></code></pre></td></tr></table></figure><h3 id="3-见微知著"><a href="#3-见微知著" class="headerlink" title="3. 见微知著"></a><a name="cp3"></a>3. 见微知著</h3><p>简单浏览了一下代码，CHECKPOINT_FLUSH_ALL 一共在两处进行了调用：</p><p>CreateDatabaseUsingFileCopy：Create a new database using the FILE_COPY strategy.<br>FILE_COPY 可以参照官网</p><p>movedb：对应到 ALTER DATABASE SET TABLESPACE</p><p>所以，对应到这些场景的时候，包括 unlogged tables，也需要进行刷盘，注意潜在的性能影响。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>/*<br> * Perform a checkpoint --- either during shutdown, or on-the-fly<br> *<br> * flags is a bitwise OR of the following:<br> *    CHECKPOINT_IS_SHUTDOWN: checkpoint is for database shutdown.<br> *    CHECKPOINT_END_OF_RECOVERY: checkpoint is for end of WAL recovery.<br> *    CHECKPOINT_IMMEDIATE: finish the checkpoint ASAP,<br> *        ignoring checkpoint_completion_target parameter.<br> *    CHECKPOINT_FORCE: force a checkpoint even if no XLOG activity has occurred<br> *        since the last one (implied by CHECKPOINT_IS_SHUTDOWN or<br> *        CHECKPOINT_END_OF_RECOVERY).<br> *    CHECKPOINT_FLUSH_ALL: also flush buffers of unlogged tables.<br></code></pre></td></tr></table></figure><h3 id="4-表的转换"><a href="#4-表的转换" class="headerlink" title="4. 表的转换"></a><a name="cp4"></a>4. 表的转换</h3><p>还有需要注意的点在于，普通表和无日志表之间的转换</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER TABLE</span> mytable <span class="hljs-keyword">SET</span> UNLOGGED; <span class="hljs-comment">-- cheap! </span><br><span class="hljs-keyword">ALTER TABLE</span> mytable <span class="hljs-keyword">SET</span> LOGGED; <span class="hljs-comment">-- expensive!</span><br></code></pre></td></tr></table></figure><p>也就是将无日志表转为普通表的时候，会需要写大量的 REDO，不难理解，不然崩溃了就无法恢复数据了。<br>反之则很快，只需要修改一下元数据即可。</p><p>因此，这种行为也可以进行发散，直接通过修改元数据的方式，<br>避免将无日志表转为普通表的时候写入大量 WAL，但是有什么幺蛾子就不好说了，<br>比如 PITR，都没有这个表的 WAL，那自然恢复出来的数据也不一致了。</p><h3 id="5-块结构"><a href="#5-块结构" class="headerlink" title="5. 块结构"></a><a name="cp5"></a>5. 块结构</h3><p>还有一点值得注意的细节是，块上面的 LSN👇🏻</p><p><img src="/2025/05/05/note/db/postgresql/unlogged/README/img.png" alt="img.png"></p><p>无日志表的 LSN 为 0，这意味着无日志表由其自己的数据文件中的数据表示，但不由日志文件中的数据表示。</p><h3 id="6-小结"><a href="#6-小结" class="headerlink" title="6. 小结"></a><a name="cp6"></a>6. 小结</h3><p><img src="/2025/05/05/note/db/postgresql/unlogged/README/img_1.png" alt="img_1.png"></p><p>参考：</p><p><a href="https://www.crunchydata.com/blog/postgresl-unlogged-tables">https://www.crunchydata.com/blog/postgresl-unlogged-tables</a></p><p><a href="https://levelup.gitconnected.com/logged-unlogged-and-temporary-tables-in-postgresql-d390d9a4ef15">https://levelup.gitconnected.com/logged-unlogged-and-temporary-tables-in-postgresql-d390d9a4ef15</a></p><p><a href="https://blog.japinli.top/2022/11/postgresql-debug-checkpointer/">https://blog.japinli.top/2022/11/postgresql-debug-checkpointer/</a></p><p><a href="https://github.com/digoal/blog/blob/master/202405/20240510_03.md">https://github.com/digoal/blog/blob/master/202405/20240510_03.md</a></p><h4 id="参与贡献"><a href="#参与贡献" class="headerlink" title="参与贡献"></a>参与贡献</h4><ol><li>Fork 本仓库</li><li>新建 Feat_xxx 分支</li><li>提交代码</li><li>新建 Pull Request</li></ol><h4 id="特技"><a href="#特技" class="headerlink" title="特技"></a>特技</h4><ol><li>使用 Readme_XXX.md 来支持不同的语言，例如 Readme_en.md, Readme_zh.md</li><li>Gitee 官方博客 <a href="https://blog.gitee.com/">blog.gitee.com</a></li><li>你可以 <a href="https://gitee.com/explore">https://gitee.com/explore</a> 这个地址来了解 Gitee 上的优秀开源项目</li><li><a href="https://gitee.com/gvp">GVP</a> 全称是 Gitee 最有价值开源项目，是综合评定出的优秀开源项目</li><li>Gitee 官方提供的使用手册 <a href="https://gitee.com/help">https://gitee.com/help</a></li><li>Gitee 封面人物是一档用来展示 Gitee 会员风采的栏目 <a href="https://gitee.com/gitee-stars/">https://gitee.com/gitee-stars/</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
      <category>PostgreSQL</category>
      
      <category>unlogged</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DelayCheckpoint</title>
    <link href="/2025/05/05/note/db/postgresql/Transactions/delayChkpt/DelayChkpt/"/>
    <url>/2025/05/05/note/db/postgresql/Transactions/delayChkpt/DelayChkpt/</url>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>DelayCheckpoint</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><h5 id="1、事务提交"><a href="#1、事务提交" class="headerlink" title="1、事务提交"></a>1、事务提交</h5><p>三个关键步骤：</p><p>提交标志的设置 ：执行“s-&gt;state&#x3D;TRANS_COMMIT”设置事务的状态。</p><p>记载到日志 ：调用RecordTransactionCommit（）记录日志并刷出日志<br>（不一定刷出到物理存储，需要根据fsync参数的设置值确定）。</p><p>释放锁 ：释放锁的位置是在设置提交标志之前还是之后，可以表明使用的封锁算法是否是<br>SS2PL。</p><p>CommitTransaction函数：</p><p><img src="/2025/05/05/note/db/postgresql/Transactions/delayChkpt/DelayChkpt/img.png" alt="img.png"></p><p>RecordTransactionCommit 函数<br>为了保证事务的原子性、一致性，<br>日志一定要在提交事务前刷出完成。</p><p><img src="/2025/05/05/note/db/postgresql/Transactions/delayChkpt/DelayChkpt/img_1.png" alt="img_1.png"><br><img src="/2025/05/05/note/db/postgresql/Transactions/delayChkpt/DelayChkpt/img_2.png" alt="img_2.png"><br><img src="/2025/05/05/note/db/postgresql/Transactions/delayChkpt/DelayChkpt/img_3.png" alt="img_3.png"><br><img src="/2025/05/05/note/db/postgresql/Transactions/delayChkpt/DelayChkpt/img_4.png" alt="img_4.png"></p><h5 id="2、DelayChkpt是什么"><a href="#2、DelayChkpt是什么" class="headerlink" title="2、DelayChkpt是什么"></a>2、DelayChkpt是什么</h5><p>综合上述代码，delayChkpt阻塞checkpoint发生位置如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">RecordTransactionCommit<br>  ...<br>  START_CRIT_SECTION();<br>  MyPgXact-&gt;delayChkpt = true;<br>  /* 写XLOG：COMMIT */<br>  /* 写CLOG：内存写不刷盘 */<br>  MyPgXact-&gt;delayChkpt = false;<br>  ...<br></code></pre></td></tr></table></figure><p>delayChkpt生效位置：<br>CreateCheckPoint等待delayChkpt</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs text">CreateCheckPoint<br>  // 【1】计算位置（重要）<br>  WALInsertLockAcquireExclusive();<br>  curInsert = XLogBytePosToRecPtr(Insert-&gt;CurrBytePos);<br>  freespace = INSERT_FREESPACE(curInsert);<br>if (freespace == 0)<br>&#123;<br>if (curInsert % XLogSegSize == 0)<br>curInsert += SizeOfXLogLongPHD;<br>else<br>curInsert += SizeOfXLogShortPHD;<br>&#125;<br>checkPoint.redo = curInsert;<br>RedoRecPtr = XLogCtl-&gt;Insert.RedoRecPtr = checkPoint.redo;<br>WALInsertLockRelease();<br>  <br>// 【2】通过delayChkpt等其他所有正在提交中、正在写日志的事务<br>vxids = GetVirtualXIDsDelayingChkpt(&amp;nvxids);<br>if (nvxids &gt; 0)<br>&#123;<br>do<br>&#123;<br>pg_usleep(10000L);/* wait for 10 msec */<br>&#125; while (HaveVirtualXIDsDelayingChkpt(vxids, nvxids));<br>&#125;<br>pfree(vxids);<br>  <br>  // 【3】刷数据<br>CheckPointGuts(checkPoint.redo, flags);<br>  // 【4】记chkpt日志<br>XLogBeginInsert();<br>XLogRegisterData((char *) (&amp;checkPoint), sizeof(checkPoint));<br>recptr = XLogInsert(RM_XLOG_ID,<br>shutdown ? XLOG_CHECKPOINT_SHUTDOWN :<br>XLOG_CHECKPOINT_ONLINE);<br><br>XLogFlush(recptr);<br></code></pre></td></tr></table></figure><h5 id="3、为什么需要DelayChkpt"><a href="#3、为什么需要DelayChkpt" class="headerlink" title="3、为什么需要DelayChkpt"></a>3、为什么需要DelayChkpt</h5><p>确定REDO点位是在createCheckpoint的函数前面执行的，<br>checkpoint和事务提交并发会有下面三种情况发生：</p><p><img src="/2025/05/05/note/db/postgresql/Transactions/delayChkpt/DelayChkpt/img_5.png" alt="img_5.png"></p><p>情况一：redo point在commit提交前，那么如果crash发生了，redo过程会覆盖这条xlog，<br>不会有问题</p><p>情况三：redo point在事务提交后，redo时xlog虽然还是做不到，但是clog一定会被刷下去，<br>所以我们不会丢失事务提交信息。</p><p>情况二：如果没有delayChkpt，redo point可能发生在上图中的位置<br>（然后checkpoint刷完数据后，当前事务才写clog），XLOG已经先写了，如果crash发生了，<br>redo过程不会覆盖这条xlog，而且clog信息不存在，那么commit信息彻底丢掉了。</p><h5 id="4、目前RAC中的DelayChkpt"><a href="#4、目前RAC中的DelayChkpt" class="headerlink" title="4、目前RAC中的DelayChkpt"></a>4、目前RAC中的DelayChkpt</h5><p>各个节点分别进行</p><h5 id="5、RAC支持2PC中的DelayChkpt"><a href="#5、RAC支持2PC中的DelayChkpt" class="headerlink" title="5、RAC支持2PC中的DelayChkpt"></a>5、RAC支持2PC中的DelayChkpt</h5><p>在RAC支持2PC的需求中，支持跨界点提交事务。<br>即node1 执行prepare的事务 p1，node2 可以执行 commit prepared ‘p1’进行提交操作。<br>如果执行了跨节点的事务提交，<br>那么目前的实现中，RecordTransactionCommit函数中xlog、clog的写入分别在两个节点进行，<br>其中xlog由执行SQL的节点写入，clog由执行prepare节点写入。</p><p>由于目前实现delayChkpt是各个节点分别进行，就需要考虑DelayChkpt的问题，</p><p>目前采用下图实现方法：假设node2提交node1 prepare的事务。<br><img src="/2025/05/05/note/db/postgresql/Transactions/delayChkpt/DelayChkpt/img_8.png" alt="img_8.png"></p><p>分析可行性：</p><p><img src="/2025/05/05/note/db/postgresql/Transactions/delayChkpt/DelayChkpt/img_7.png" alt="img_7.png"></p><p>对于情况一、情况三，事务clog 不会发生丢失;</p><p>重点分析情况二(1)~(3):</p><p>对于(1)，任一节点发起 checkpoint,首先node1未被阻塞，可正常完成，node2<br>被阻塞，直到 xlog 和 node1 clog 写入完成并且delayChkpt 为false时才开始<br>checkpoint，如图中(4)时刻 node2开始执行checkpoint，那么 node1 的clog<br>页面不会刷盘。<br>但是，在这种情况下，发起checkpoint时已经获取过全部节点的redo point,而<br>本次事务的 xlog 在 redo point 之后，因此此时发生故障也会回放这条xlog.不<br>会导致事务状态丢失。</p><p>对于(2)，处于 node1、node2的delayChkpt中，会被阻塞，发生故障则不会<br>丢失事务状态。<br>对于(3)，node1正常 checkpoint，将clog刷盘，node2 被阻塞。如果发生故<br>障，xlog 会被回放，不会丢失事务状态。</p><h4 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h4><ol><li>xxxx</li><li>xxxx</li><li>xxxx</li></ol><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><ol><li>xxxx</li><li>xxxx</li><li>xxxx</li></ol>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
      <category>PostgreSQL</category>
      
      <category>transactions</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>toast</title>
    <link href="/2025/05/05/note/db/postgresql/toast/README/"/>
    <url>/2025/05/05/note/db/postgresql/toast/README/</url>
    
    <content type="html"><![CDATA[<h2 id="toast"><a href="#toast" class="headerlink" title="toast"></a>toast</h2><p>toast in pg</p><p>本章主要内容如下：</p><table><thead><tr><th>Chapter Contents</th><th>sub Chapter</th></tr></thead><tbody><tr><td><a href="#cp1">1 TOAST in PG</a></td><td><a href="#cp1.1">1.1 xx</a></td></tr><tr><td></td><td><a href="#cp1.2">1.2 xx</a></td></tr><tr><td><a href="#cp2">2 xx</a></td><td></td></tr><tr><td><a href="#cp3">3 xx</a></td><td></td></tr></tbody></table><h3 id="1-xx"><a href="#1-xx" class="headerlink" title="1 xx"></a><a name="cp1"></a>1 xx</h3><h4 id="1-1-xx"><a href="#1-1-xx" class="headerlink" title="1.1 xx"></a><a name="cp1.1"></a>1.1 xx</h4><h4 id="1-2-xx"><a href="#1-2-xx" class="headerlink" title="1.2 xx"></a><a name="cp1.2"></a>1.2 xx</h4><h3 id="2-xx"><a href="#2-xx" class="headerlink" title="2 xx"></a><a name="cp2"></a>2 xx</h3><h3 id="3-xx"><a href="#3-xx" class="headerlink" title="3 xx"></a><a name="cp3"></a>3 xx</h3><h4 id="参与贡献"><a href="#参与贡献" class="headerlink" title="参与贡献"></a>参与贡献</h4><ol><li>Fork 本仓库</li><li>新建 Feat_xxx 分支</li><li>提交代码</li><li>新建 Pull Request</li></ol><h4 id="特技"><a href="#特技" class="headerlink" title="特技"></a>特技</h4><ol><li>使用 Readme_XXX.md 来支持不同的语言，例如 Readme_en.md, Readme_zh.md</li><li>Gitee 官方博客 <a href="https://blog.gitee.com/">blog.gitee.com</a></li><li>你可以 <a href="https://gitee.com/explore">https://gitee.com/explore</a> 这个地址来了解 Gitee 上的优秀开源项目</li><li><a href="https://gitee.com/gvp">GVP</a> 全称是 Gitee 最有价值开源项目，是综合评定出的优秀开源项目</li><li>Gitee 官方提供的使用手册 <a href="https://gitee.com/help">https://gitee.com/help</a></li><li>Gitee 封面人物是一档用来展示 Gitee 会员风采的栏目 <a href="https://gitee.com/gitee-stars/">https://gitee.com/gitee-stars/</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
      <category>PostgreSQL</category>
      
      <category>toast</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL中的WAL文件与LSN深入探索和分析</title>
    <link href="/2025/05/05/note/db/postgresql/PostgreSQL%E4%B8%AD%E7%9A%84WAL/WAL/"/>
    <url>/2025/05/05/note/db/postgresql/PostgreSQL%E4%B8%AD%E7%9A%84WAL/WAL/</url>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>PostgreSQL中的WAL文件与LSN深入探索和分析</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><h5 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h5><p>在16MB段大小的前提下，WAL文件的排列大概是这个样子的：<br><img src="/2025/05/05/note/db/postgresql/PostgreSQL%E4%B8%AD%E7%9A%84WAL/WAL/img.png" alt="img.png"><br><img src="/2025/05/05/note/db/postgresql/PostgreSQL%E4%B8%AD%E7%9A%84WAL/WAL/img_1.png" alt="img_1.png">  </p><h5 id="2、-16MB-wal-seg下的WAL段文件命名及LSN编码规则"><a href="#2、-16MB-wal-seg下的WAL段文件命名及LSN编码规则" class="headerlink" title="2、 16MB wal seg下的WAL段文件命名及LSN编码规则"></a>2、 16MB wal seg下的WAL段文件命名及LSN编码规则</h5><p><img src="/2025/05/05/note/db/postgresql/PostgreSQL%E4%B8%AD%E7%9A%84WAL/WAL/img_2.png" alt="img_2.png"><br>00000001 00000002 000000FA<br>分为三段，分别是 “时间线”、“32bit 逻辑日志号”、“32bit 日志段号”<br>我们也可以看到，上边的日志段号FE-&gt;FF然后又回到了00，但是这个时候日志号会从00000002递增到了00000003。<br>再看看当前的LSN号与WAL文件的对应关系：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mydb<span class="hljs-operator">=</span># <span class="hljs-keyword">select</span> pg_current_wal_lsn() <span class="hljs-keyword">as</span> lsn,  pg_walfile_name(pg_current_wal_lsn()) <span class="hljs-keyword">as</span> filename, pg_walfile_name_offset(pg_current_wal_lsn()) <span class="hljs-keyword">as</span> lsn_offset;<br>    lsn     <span class="hljs-operator">|</span>         filename         <span class="hljs-operator">|</span>             lsn_offset<br><span class="hljs-comment">------------+--------------------------+-------------------------------------</span><br> <span class="hljs-number">3</span><span class="hljs-operator">/</span><span class="hljs-number">3</span>A993360 <span class="hljs-operator">|</span> <span class="hljs-number">00000001000000030000003</span>A <span class="hljs-operator">|</span> (<span class="hljs-number">00000001000000030000003</span>A,<span class="hljs-number">10040160</span>)<br>(<span class="hljs-number">1</span> <span class="hljs-type">row</span>)<br><br>mydb<span class="hljs-operator">=</span># <span class="hljs-keyword">insert into</span> t <span class="hljs-keyword">select</span> n, <span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-operator">||</span> n <span class="hljs-keyword">from</span> generate_series(<span class="hljs-number">1</span>, <span class="hljs-number">550000</span>) <span class="hljs-keyword">as</span> n;                                                        <span class="hljs-keyword">INSERT</span> <span class="hljs-number">0</span> <span class="hljs-number">550000</span><br>mydb<span class="hljs-operator">=</span># <span class="hljs-keyword">select</span> pg_current_wal_lsn() <span class="hljs-keyword">as</span> lsn,  pg_walfile_name(pg_current_wal_lsn()) <span class="hljs-keyword">as</span> filename, pg_walfile_name_offset(pg_current_wal_lsn()) <span class="hljs-keyword">as</span> lsn_offset;<br>    lsn     <span class="hljs-operator">|</span>         filename         <span class="hljs-operator">|</span>            lsn_offset<br><span class="hljs-comment">------------+--------------------------+-----------------------------------</span><br> <span class="hljs-number">3</span><span class="hljs-operator">/</span><span class="hljs-number">3</span>D023F10 <span class="hljs-operator">|</span> <span class="hljs-number">00000001000000030000003</span>D <span class="hljs-operator">|</span> (<span class="hljs-number">00000001000000030000003</span>D,<span class="hljs-number">147216</span>)<br>(<span class="hljs-number">1</span> <span class="hljs-type">row</span>)<br></code></pre></td></tr></table></figure><p>看看上边的LSN:   3&#x2F;3D023F10 , 它是一个64位的BIGINT，划分为4部分：<br><img src="/2025/05/05/note/db/postgresql/PostgreSQL%E4%B8%AD%E7%9A%84WAL/WAL/img_3.png" alt="img_3.png"><br>但是这个023F10也只是个总体的偏移量，要想得到3D这个段文件里头具体哪一块，块内偏移，将这个二进制切成(11bit, 13bit)两部分，分别求值即可。<br><img src="/2025/05/05/note/db/postgresql/PostgreSQL%E4%B8%AD%E7%9A%84WAL/WAL/img_4.png" alt="img_4.png"><br>为什么上边段号最大是000000FF，然后重新回到00000000，这是因为一个段是16MB, 2^^24，最多总共提供2^^32的空间，只能分成2^^8 &#x3D; 256个段。<br><img src="/2025/05/05/note/db/postgresql/PostgreSQL%E4%B8%AD%E7%9A%84WAL/WAL/img_5.png" alt="img_5.png">  </p><h5 id="3、64MB-wal-seg下的WAL段文件命名及LSN编码规则"><a href="#3、64MB-wal-seg下的WAL段文件命名及LSN编码规则" class="headerlink" title="3、64MB wal seg下的WAL段文件命名及LSN编码规则"></a>3、64MB wal seg下的WAL段文件命名及LSN编码规则</h5><p><img src="/2025/05/05/note/db/postgresql/PostgreSQL%E4%B8%AD%E7%9A%84WAL/WAL/img_6.png" alt="img_6.png"><br><img src="/2025/05/05/note/db/postgresql/PostgreSQL%E4%B8%AD%E7%9A%84WAL/WAL/img_7.png" alt="img_7.png"></p><h5 id="4、-4MB-wal-seg大小下的WAL段文件命名及LSN编码规则"><a href="#4、-4MB-wal-seg大小下的WAL段文件命名及LSN编码规则" class="headerlink" title="4、 4MB wal seg大小下的WAL段文件命名及LSN编码规则"></a>4、 4MB wal seg大小下的WAL段文件命名及LSN编码规则</h5><p><img src="/2025/05/05/note/db/postgresql/PostgreSQL%E4%B8%AD%E7%9A%84WAL/WAL/img_8.png" alt="img_8.png"><br><img src="/2025/05/05/note/db/postgresql/PostgreSQL%E4%B8%AD%E7%9A%84WAL/WAL/img_9.png" alt="img_9.png"><br><img src="/2025/05/05/note/db/postgresql/PostgreSQL%E4%B8%AD%E7%9A%84WAL/WAL/img_10.png" alt="img_10.png">  </p><h5 id="5、默认page-size为16kB下wal段为8MB的分析"><a href="#5、默认page-size为16kB下wal段为8MB的分析" class="headerlink" title="5、默认page size为16kB下wal段为8MB的分析"></a>5、默认page size为16kB下wal段为8MB的分析</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://ftp.postgresql.org/pub/source/v14.7/postgresql-14.7.tar.gz<br>tar zxf postgresql-14.7.tar.gz<br>cd postgresql-14.7<br>su<br>yum install -y readline readline-devel flex bison openssl openssl-devel<br> mkdir build<br> cd build<br> ../configure -with-extra-version=&quot; [Sean]&quot; --prefix=/usr/pgsql-14.7build --with-blocksize=16<br><br>make -j 4 world-bin<br>su -c &quot;make install-world-bin&quot;<br><br>[07:17:13-postgres@sean-rh3:/opt/pg]$ cat env14build.sh<br>export PGROOT=/usr/pgsql-14.7build<br>export PGHOME=/var/lib/pgsql/14<br>export PGPORT=5555<br>export PGDATA=$PGHOME/data<br>export PATH=$PGROOT/bin:$PATH<br>export LD_LIBRARY_PATH=$PGROOT/lib:$LD_LIBRARY_PATH<br></code></pre></td></tr></table></figure><p><img src="/2025/05/05/note/db/postgresql/PostgreSQL%E4%B8%AD%E7%9A%84WAL/WAL/img_11.png" alt="img_11.png"><br><img src="/2025/05/05/note/db/postgresql/PostgreSQL%E4%B8%AD%E7%9A%84WAL/WAL/img_12.png" alt="img_12.png"><br><img src="/2025/05/05/note/db/postgresql/PostgreSQL%E4%B8%AD%E7%9A%84WAL/WAL/img_13.png" alt="img_13.png"><br><img src="/2025/05/05/note/db/postgresql/PostgreSQL%E4%B8%AD%E7%9A%84WAL/WAL/img_14.png" alt="img_14.png"><br><a href="https://www.postgresql.org/docs/15/app-initdb.html">https://www.postgresql.org/docs/15/app-initdb.html</a></p>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
      <category>PostgreSQL</category>
      
      <category>WAL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL中的WAL文件与LSN深入探索和分析</title>
    <link href="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/"/>
    <url>/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/</url>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>PostgreSQL中MemoryContext机制解析</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><h5 id="1-MemoryContext概述"><a href="#1-MemoryContext概述" class="headerlink" title="1. MemoryContext概述"></a>1. MemoryContext概述</h5><p>MemoryContext 以功能为单位组织起来的树形数据结构，不同的阶段使用不同的 MemoryContext，它的存在是为了更清晰的管理内存。  </p><p>合理管理碎片小内存。频繁的向 OS 申请和释放内存效率是很差的。<br>MemoryContext 会以 trunk 为单位向 OS 申请成块的内存，并管理起来。当程序需求小内存时从 trunk 中分配，<br>用完后归还给对应的 MemoryContext ，并不归还给 OS。<br>赋予内存功能和生命周期属性<br>（1）以功能为单位管理内存。不同功能和阶段使用对应的 MemoryContext。<br>（2）TopTransactionContext：一个事务的生命周期，事务管理相关数据放在 TopTransactionContext，当一个事务提交时该上下文被整个释放。  </p><p>树形的 MemoryContext 结构<br>（1）不同功能间的 MemoryContext 是以为树为单位组织起来的<br>（2）每个数据库后端进程顶层是 TopMemoryContext<br>（3）删除或重置一个 MemoryContext，它的子 MemoryContext 也一并被删除或重置。<br>（4）删除或重置一个 MemoryContext，它的子 MemoryContext 也一并被删除或重置。  </p><h5 id="2-内存上下文相关的四个数据类型"><a href="#2-内存上下文相关的四个数据类型" class="headerlink" title="2. 内存上下文相关的四个数据类型"></a>2. 内存上下文相关的四个数据类型</h5><p>相关数据结构</p><h6 id="2-1-MemoryContext"><a href="#2-1-MemoryContext" class="headerlink" title="2.1 MemoryContext"></a>2.1 MemoryContext</h6><p><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img.png" alt="img.png"><br>下面是该数据类型中各成员变量所代表的含义：  </p><ul><li><p>type – 是一个枚举类型，用于标示内存上下文类型。在默认只有一种类型，T_AllocSetContext。<br>NodeTag声明于src&#x2F;include&#x2F;nodes&#x2F;nodes.h 头文件中，下面列出了与内存上下文节点相关的几个枚举值。<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_1.png" alt="img_1.png">  </p></li><li><p>isReset – 如果为true，表明该上下文自从上次Reset（重置）后没有在上面分配过内存，可以避免一些不必要的操作。如果为false，则表明已经发生内存申请。  </p></li><li><p>allowInCritSection – 是否允许在临界区中分配内存。通常来说是不允许进行这样分配的，分配失败会导致PANIC，但这可以用于调试代码，方便开发调试，这些代码不建议进入实际生成环境中。    </p></li><li><p>mem_allocated – 跟踪为此上下文分配的内存。类似于C++ STL中的size()函数功能。  </p></li><li><p>methods – 记录了内存上下文使用的函数指针。类似于C++中的虚函数（vptr虚函数表），正如前面所言，MemoryContext类似于抽象类，所以存在虚函数是必须具有的。<br>methods的数据类型是MemoryContextMethods ，其结构如下：</p></li></ul><p><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_2.png" alt="img_2.png">  </p><ul><li>parent – 内存上下文的父节点，对于TopMemoryContext，其parent字段为NULL，因为TopMemoryContext是所有内存上下文的父节点。  </li><li>firstchild – 它是树形结构中所有子内存上下文（双向）链表的头节点，TopMemoryContext父节点中的firstchild指针变量永远指向子内存上下文的链表头节点。详情请阅读本文的第4节内容的说明。  </li><li>prevchild – 同一个父节点下（即兄弟节点）的prev指针，用于指向该双向链表节点（这里的节点均指MemoryContext类型的内存上下文）的前一个节点。   </li><li>nextchild – 同一个父节点下（即兄弟节点）的next指针，用于指向该双向链表节点（这里的节点均指MemoryContext类型的内存上下文）的下一个节点。  </li><li>name – 具体MemoryContext的名称，比如对于TopMemoryContext内存上下文，则name即为“TopMemoryContext”，ErrorContext内存上下文，其name成员的值就是“ErrorContext”。不同的MemoryContext具有不同的名称，主要用于调试使用。  </li><li>ident – MemoryContext的ID，主要用于调试使用。  </li><li>reset_cbs – reset&#x2F;delete回调函数列表。它是Postgres 9.5中引入的一项功能，允许将内存上下文用于管理更多资源，而不仅仅是普通的palloc分配的内存。<br>这是通过为内存上下文注册“重置回调函数”来完成的。在下一次重置或删除上下文之前，将调用一次此类函数。它可以用来放弃在某种意义上与上下文中分配的对象相关联的资源。<br>其数据类型为MemoryContextCallback ，结构如下所示：</li></ul><p><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_3.png" alt="img_3.png">  </p><p>在讲解了MemoryContext数据类型之后，下面就是MemoryContext抽象类的具体（也是唯一）实现AllocSetContext，参见本文的2.2节内容。  </p><h6 id="2-2-AllocSetContext"><a href="#2-2-AllocSetContext" class="headerlink" title="2.2 AllocSetContext"></a>2.2 AllocSetContext</h6><p>AllocSetContext是MemoryContext的标准实现。其结构如下：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_4.png" alt="img_4.png"><br>下面将对这个AllocSetContext数据类型中的各成员进行讲解：  </p><ul><li>header – 标准的内存上下文区域，即抽象类型MemoryContext（可理解为子类对象中的基类对象的内存区域。），通过这个字段可以区分各内存上下文的层次关系（如本文第4节中的示意图所示）。  </li><li>blocks – 内存块链表，记录内存上下文向操作系统申请的连续大块内存。它是实际分配内存的地方，AllocSetContext中内存的分配是以Block（块）为单位向OS申请的，多个Block之间以单链表的方式连接起来。此blocks是单链表的头节点，在清除内存上下文时从它开始遍历整个链表，是否所有的Block中的内存。  </li><li>freelist – 组织该内存上下文里所有内存块中已释放的内存片的链表结构。它是一个数组成员，其数组大小是ALLOCSET_NUM_FREELISTS（该值是11）。freelist数组中各成员分别表示不同大小的AllocChunkData。在AllocSetContext的实现中，对于小的内存块（8 ~ 8192Byte）来说，当释放的时候不会归还给OS，而是将其缓存到freelist中。  </li><li>initBlockSizeBlock的初始化大小，默认8KB。  </li><li>maxBlockSizeBlock的最大大小。  </li><li>nextBlockSize下一个Block的大小。  </li><li>allocChunkLimit内存片的阈值，申请的内存超过此阀值直接分配新的block。  </li><li>keeper为防止一些需要频繁重置的小的内存上下文重复的进行malloc，重置时保留第一次申请的内存块。  </li><li>freeListIndex – 在context_freelists全局数组中的顺序，0表示默认freelist，1表示小内存的freelist，-1表示不需要进入freelist（比如超过allocChunkLimit的Block）。<br>context_freelists的的数据类型是AllocSetFreeList ，结构如下所示：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_5.png" alt="img_5.png"></li></ul><p>注意：上面的AllocSetFreeList和AllocSetContext中的freelist不同，这里指的是空闲的AllocSetContextData，而非AllocChunkData。当发生delete时候，会将删除后的AllocSetContextData放入到AllocSetFreeList。  </p><h6 id="2-3-AllocBlockData"><a href="#2-3-AllocBlockData" class="headerlink" title="2.3 AllocBlockData"></a>2.3 AllocBlockData</h6><p>PostgreSQL向OS申请内存分配的基本单位是Block（块），一个Block可能被拆分为若干个Chunk，也可能只包含一个Chunk（比如较大块内存）。在chunk释放时候会放入freelist链表中，以便于下次分配，最后由Block统一释放归还给OS。<br>AllocBlockData的结构如下图所示：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_6.png" alt="img_6.png"><br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_8.png" alt="img_8.png">  </p><h6 id="2-4-AllocChunkData"><a href="#2-4-AllocChunkData" class="headerlink" title="2.4 AllocChunkData"></a>2.4 AllocChunkData</h6><p>AllocChunkData是AllocBlockData中每段内存的前缀。<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_7.png" alt="img_7.png"><br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_9.png" alt="img_9.png">  </p><h5 id="3-启动内存上下文子系统"><a href="#3-启动内存上下文子系统" class="headerlink" title="3. 启动内存上下文子系统"></a>3. 启动内存上下文子系统</h5><p>这必须在创建上下文或在上下文中分配内存之前调用。TopMemoryContext和ErrorContext在这里初始化；之后必须创建其他内存上下文。  </p><h6 id="3-1-初始化内存上下文"><a href="#3-1-初始化内存上下文" class="headerlink" title="3.1 初始化内存上下文"></a>3.1 初始化内存上下文</h6><p><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_10.png" alt="img_10.png">  </p><p>CurrentMemoryContext、ErrorContext、PostmasterContext、CacheMemoryContext、MessageContext、TopTransactionContext、CurTransactionContext和PortalContext均作为TopMemoryContext的子上下文。<br>它们之间以树的形式进行分布与管理，这几个内存上下文之间的关系如图所示：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_11.png" alt="img_11.png"><br>函数 MemoryContextInit 的实现如下：(postgresql-12.1\src\backend\utils\mmgr\mcxt.c)  </p><h6 id="3-2-初始化-TopMemoryContext"><a href="#3-2-初始化-TopMemoryContext" class="headerlink" title="3.2 初始化 TopMemoryContext"></a>3.2 初始化 TopMemoryContext</h6><p>首先，需要初始化TopMemoryContext内存上下文，因为它是所有其他内存上下文的父节点。<br>其初始化功能由函数AllocSetContextCreate()完成，该函数支持五个参数，其函数原型如下：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_12.png" alt="img_12.png">  </p><p>由于是初始化TopMemoryContext内存上下文，所以第二个参数就以该内存上下文变量为名称（TopMemoryContext）。在这里，ALLOCSET_DEFAULT_SIZES是一个宏定义，其声明于文件src&#x2F;include&#x2F;utils&#x2F;memutils.h中。如下：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_13.png" alt="img_13.png">  </p><p>AllocSetContextCreateInternal 实现解析：<br>postgresql-12.1\src\backend\utils\mmgr\aset.c  </p><p>####### 3.2.1 断言正确填充AllocChunkData<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_14.png" alt="img_14.png"><br>StaticAssertStmt()函数类似于C++11中的static_assert断言宏，它接收两个参数，第一个参数是判别式，需要为true；第二个参数是在第一个判别式为false情况下进行的错误字符串信息打印，并终止进程。<br>因此这里若表达式 ALLOC_CHUNKHDRSZ &#x3D;&#x3D; MAXALIGN(ALLOC_CHUNKHDRSZ不为true 的时候，打印”sizeof(AllocChunkData) is not maxaligned”，并终止进程。<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_15.png" alt="img_15.png"><br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_16.png" alt="img_16.png"><br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_17.png" alt="img_17.png">  </p><p>MAXIMUM_ALIGNOF的值是8，(???声明于Solution.pm文件中。)<br>因此，若sizeof(struct AllocChunkData)的值为8，则通过TYPEALIGN()宏的调用及内部位运算之后得到的值也是8，<br>即表达式ALLOC_CHUNKHDRSZ &#x3D;&#x3D; MAXALIGN(ALLOC_CHUNKHDRSZ为true，说明我们正确地填充了AllocChunkData，即struct AllocChunkData。  </p><p><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_18.png" alt="img_18.png">  </p><p>####### 3.2.2 对参数进行校验<br>这里接着对函数AllocSetContextCreateInternal()中的第三、四、五个参数进行校验，用来判别其值是否合理、对齐。<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_19.png" alt="img_19.png">  </p><p>函数AllocHugeSizeIsValid()是一个函数宏，声明于memutils.h文件中，用于检验“初始化最大分配块大小（maxBlockSize）”不能超过一定阈值。如下：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_20.png" alt="img_20.png"><br>宏SIZE_MAX 声明于exprscan.c文件中：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_21.png" alt="img_21.png">  </p><p>####### 3.2.3 检查参数是否与freelist匹配<br>这里是对TomMemoryContext内存上下文进行初始化，且其实参是minContextSize &#x3D; 0，initBlockSize &#x3D; 8 * 1024。所以freeListIndex &#x3D; 0。<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_22.png" alt="img_22.png"><br>freeListIndex用于对全局结构体数组变量（context_freelists）中的成员进行释放操作，该结构体后面会详细说明。  </p><p>####### 3.2.4 如果有匹配的freelist，则释放其空间<br>由于这里freeListIndex &#x3D; 0，所以得到的freelist指针变量中其成员变量first_free的值为NULL，不会进入if (freelist-&gt;first_free !&#x3D; NULL)的函数体中。<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_23.png" alt="img_23.png">  </p><p>####### 3.2.5 确定初始化块大小<br>ALLOC_BLOCKHDRSZ 和ALLOC_CHUNKHDRSZ都是一个宏，分别是等价于sizeof(AllocBlockData)和sizeof(struct AllocChunkData)。其中AllocBlockData声明如下：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_24.png" alt="img_24.png"><br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_25.png" alt="img_25.png"><br>实参minContextSize 的值为0，所以走else{}分支。其中initBlockSize的值是8KB，<br>显然这里的MAXALIGN(sizeof(AllocSetContext)) + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ值是小于8KB的，因此firstBlockSize 最终的值是8KB。<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_26.png" alt="img_26.png">  </p><p>####### 3.2.6 分配AllocSetContextData块<br>在得到了初始化块分配大小（firstBlockSize，8KB）之后，接下来就需要为我们的set申请内存空间，然后将这片内存地址强制转换为AllocSet类型。在这里需要对其内存申请结果状态信息进行判断。<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_27.png" alt="img_27.png"><br>如果set的值为NULL，表明系统内存不足，申请失败。此时需要对TopMemoryContext内存向下文及其所有的子内存上下文进行打印其统计信息处理。<br>由函数MemoryContextStats()负责，同时打印相应的错误日志提示信息。函数MemoryContextStats()实现如下：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_28.png" alt="img_28.png"><br>函数MemoryContextStatsDetail()实现如下：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_29.png" alt="img_29.png"><br>在该函数体实现中，有一个新的结构体数据类型MemoryContextCounters ，它声明于memnodes.h(src&#x2F;include&#x2F;nodes&#x2F;memnodes.h)头文件中，详情如下：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_30.png" alt="img_30.png"><br>在函数MemoryContextStatsDetail()内部间接调用MemoryContextStatsInternal()来进行子内存上下文的状态信息统计。<br>关于该函数的内部实现将不进行过多展开，只需要知道该函数内部完成TopMemoryContext中所有子内存上下文的状态信息（总空间、已使用空间、空闲空间等）统计。</p><p>####### 3.2.7 填写初始块的块头<br>当set内存申请成功后，它位于8KB的内存空间的头部。紧接着在set（AllocSet）数据类型的后面分配一个AllocBlock数据类型大小的空间。<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_31.png" alt="img_31.png"><br>同时使set中的成员blocks和keeper指向新分配的block变量的位置。并使用函数AllocSetContextCreateInternal()中提供的参数来<br>初始化set中的成员变量initBlockSize、maxBlockSize等。并将set中的成员数组freelist的值全部初始化零操作（freelist数组大小是11）。<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_32.png" alt="img_32.png"><br>当set（AllocSet类型）指针变量内存空间申请成功、以及block初始化完成之后，其set和block（AllocBlock）之间的关联示意图如下所示：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_33.png" alt="img_33.png">  </p><p>####### 3.2.8 计算内存上下文分配内存片大小限制<br>接下来计算指定的内存上下文中的分配内存片大小限制。由于freelist成员数组大小固定（为数组大小是11），它不能超过ALLOC_CHUNK_LIMIT（8192Byte）。<br>如果 maxBlockSize 很小，那么超过 maxBlockSize 甚至很大一部分的请求也应该被视为大内存片。对于maxBlockSize的2次方的典型情况，<br>内存片大小的限制最多为maxBlockSize的1&#x2F;8，因此，给定一个全部为最大块内存片大小的请求流，我们最多会浪费1&#x2F;8的分配空间。<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_34.png" alt="img_34.png"><br>们必须让allocChunkLimit是2的幂，因为任何内存片的请求大小和实际分配的大小都必须在限制的同一侧，否则我们会对该内存片是否 “big “感到困惑。<br>此外，allocChunkLimit不能超过ALLOCSET_SEPARATE_THRESHOLD（8192Byte）。<br>接下来要执行最为重要的一步就是初始化set指针变量中的其他成员的初始化操作。以及如果本次是非TopMemoryText内存上下文的初始化操作，<br>则需要将新创建的set添加到TopMemoryContext中。详细过程见3.2.9节内容。  </p><p>####### 3.2.9 执行与类型无关的上下文创建部分<br>执行与类型无关的内存上下文创建部分主要由函数MemoryContextCreate()负责完成，如下所示。<br>其中：<br>参数set是指向malloc的（8KB）内存空间地址，<br>T_AllocSetContext是该set的类型；<br>AllocSetMethods是一个指针数组，里面的各成员是函数指针，表明用来对内存上下文进行相关操作的函数实现；<br>parent是该内存上下文的父亲，如果是本次创建的内存上下文是TopMemoryContext，则parent参数为NULL；<br>name是该内存上下文的名字。<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_35.png" alt="img_35.png"><br>实现如下：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_36.png" alt="img_36.png"><br>该函数执行完成之后，其初始化效果如下图所示：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_37.png" alt="img_37.png"><br>之后，重新初始化mem_allocated的值为firstBlockSize大小。并将set强制类型转换为MemoryContext。<br>并返回上层调用的具体待初始化的内存上下文，比如TopMemoryContext，或ErrorContext、PostmasterContext等。<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_38.png" alt="img_38.png"><br>在执行完成TopMemoryContext内存上下文的初始化操作之后，接下来就是初始化ErrorContext，在该内存上下文初始化之后，其与TopMemoryContext之间的关联如下图所示：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_39.png" alt="img_39.png"><br>紧接着执行PostmasterContext内存上下文的初始化，在初始化完成之后，其与TopMemoryContext、ErrorContext间的关联如下图所示：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_40.png" alt="img_40.png">  </p><h5 id="4-内存上下文树形图"><a href="#4-内存上下文树形图" class="headerlink" title="4. 内存上下文树形图"></a>4. 内存上下文树形图</h5><p>在本文的第1节中也曾提到过，Mmeory Context是以树形结构来组织各内存上下文之间的关联关系。其中TopMemoryContext内存上下文是所有其他内存上下文的父（根）节点，<br>其中firstchild指针变量用于指向该节点的第一个孩子（内存上下文）节点。之后通过prevchild和nextchild指针变量可以分别向后、向前变量位于TopMemoryContext下的所有子内存上下文节点，就向一个双向链表。<br>此外，对于TopMemoryContext的子内存上下文节点，采用的是“前插法”的方式添加，详细细节如下图所示：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_41.png" alt="img_41.png"><br>把ErrorContext、PostmasterContext和MessageContext这三个内存上下文中的parent指针变量的指向由折线修改为直线后的效果图如下所示：<br><img src="/2025/05/05/note/db/postgresql/MemoryContext%E5%88%86%E6%9E%90/MemoryContext/img_42.png" alt="img_42.png">  </p>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
      <category>PostgreSQL</category>
      
      <category>MemoryContext</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL pg_recovery 拓展插件</title>
    <link href="/2025/05/05/note/db/postgresql/extension/PgExtension/pg_recovery/pg_recovery/"/>
    <url>/2025/05/05/note/db/postgresql/extension/PgExtension/pg_recovery/pg_recovery/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>PostgreSQL pg_recovery 拓展插件</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><a href="#%E4%B8%80%E6%9D%A1SQL%E5%AE%9E%E7%8E%B0PostgreSQL%E6%95%B0%E6%8D%AE%E6%89%BE%E5%9B%9E">1. 一条 SQL 实现 PostgreSQL 数据找回</a><br><a href="pg_recovery%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86%E4%B8%8E%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB">2. pg_recovery 设计原理与源码解读</a></p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="一条SQL实现PostgreSQL数据找回"><a href="#一条SQL实现PostgreSQL数据找回" class="headerlink" title="一条SQL实现PostgreSQL数据找回"></a>一条SQL实现PostgreSQL数据找回</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">快速找回丢失数据，是数据库的一项重要功能需求，一般建议使用官方推荐的工具。面向开源数据库，生态中也出现很多好用的开源工具。<br><br>PostgreSQL 是非常流行的开源数据库，接下来介绍一款近期在社区开源的 PostgreSQL 数据找回工具 pg_recovery ，并实例演示如何找回误操作而丢失的数据。<br></code></pre></td></tr></table></figure><h4 id="什么是-pg-recovery"><a href="#什么是-pg-recovery" class="headerlink" title="什么是 pg_recovery?"></a>什么是 pg_recovery?</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">pg_recovery 是一款 PostgreSQL 数据找回工具。可以恢复 COMMIT / DELETE / UPDATE / ROLLBACK / DROP COLUMN 操作后导致的数据变化，并以表的形式返回。安装方便，操作简单。仓库地址：https://github.com/radondb/pg_recovery<br></code></pre></td></tr></table></figure><h5 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">根据环境配置 PG_CONFIG。<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">make PG_CONFIG=/home/lzzhang/PG/postgresql/base/bin/pg_config</span><br>gcc -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Werror=vla -Wendif-labels -Wmissing-format-attribute -Wformat-security -fno-strict-aliasing -fwrapv -fexcess-precision=standard -Wno-format-truncation -Wno-stringop-truncation -g -g -O0 -fPIC -I. -I./ -I/home/lzzhang/PG/postgresql/base/include/server -I/home/lzzhang/PG/postgresql/base/include/internal  -D_GNU_SOURCE   -c -o pg_recovery.o pg_recovery.c<br>gcc -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Werror=vla -Wendif-labels -Wmissing-format-attribute -Wformat-security -fno-strict-aliasing -fwrapv -fexcess-precision=standard -Wno-format-truncation -Wno-stringop-truncation -g -g -O0 -fPIC -shared -o pg_recovery.so pg_recovery.o -L/home/lzzhang/PG/postgresql/base/lib    -Wl,--as-needed -Wl,-rpath,&#x27;/home/lzzhang/PG/postgresql/base/lib&#x27;,--enable-new-dtags  <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">make install PG_CONFIG=/home/lzzhang/PG/postgresql/base/bin/pg_config</span><br>/usr/bin/mkdir -p &#x27;/home/lzzhang/PG/postgresql/base/lib&#x27;<br>/usr/bin/mkdir -p &#x27;/home/lzzhang/PG/postgresql/base/share/extension&#x27;<br>/usr/bin/mkdir -p &#x27;/home/lzzhang/PG/postgresql/base/share/extension&#x27;<br>/usr/bin/install -c -m 755  pg_recovery.so &#x27;/home/lzzhang/PG/postgresql/base/lib/pg_recovery.so&#x27;<br>/usr/bin/install -c -m 644 .//pg_recovery.control &#x27;/home/lzzhang/PG/postgresql/base/share/extension/&#x27;<br>/usr/bin/install -c -m 644 .//pg_recovery--1.0.sql  &#x27;/home/lzzhang/PG/postgresql/base/share/extension/&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 初始化插件成功，返回如下信息。</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">create extension pg_recovery ;</span><br>CREATE EXTENSION<br></code></pre></td></tr></table></figure><h4 id="数据找回演示"><a href="#数据找回演示" class="headerlink" title="数据找回演示"></a>数据找回演示</h4><h5 id="1-准备初始化数据"><a href="#1-准备初始化数据" class="headerlink" title="1. 准备初始化数据"></a>1. 准备初始化数据</h5><p>准备表和一些数据  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> lzzhang(id <span class="hljs-type">int</span>, dp <span class="hljs-type">int</span>);<br><span class="hljs-keyword">insert into</span> lzzhang <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">insert into</span> lzzhang <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h5 id="2-找回-UPDATE-数据"><a href="#2-找回-UPDATE-数据" class="headerlink" title="2. 找回 UPDATE 数据"></a>2. 找回 UPDATE 数据</h5><p>对数据进行变更操作，不加 WHERE 条件。<br><img src="/2025/05/05/note/db/postgresql/extension/PgExtension/pg_recovery/pg_recovery/image.png" alt="Alt text">  </p><h5 id="3-找回-DELETE-数据"><a href="#3-找回-DELETE-数据" class="headerlink" title="3. 找回 DELETE 数据"></a>3. 找回 DELETE 数据</h5><p>尝试恢复 DELETE 的数据。<br><img src="/2025/05/05/note/db/postgresql/extension/PgExtension/pg_recovery/pg_recovery/image-1.png" alt="Alt text">  </p><h5 id="4-找回-ROLLBACK-数据"><a href="#4-找回-ROLLBACK-数据" class="headerlink" title="4. 找回 ROLLBACK 数据"></a>4. 找回 ROLLBACK 数据</h5><p>尝试恢复回滚操作之前的数据。<br><img src="/2025/05/05/note/db/postgresql/extension/PgExtension/pg_recovery/pg_recovery/image-2.png" alt="Alt text">  </p><h5 id="5-找回-DROP-COLUMN-数据"><a href="#5-找回-DROP-COLUMN-数据" class="headerlink" title="5. 找回 DROP COLUMN 数据"></a>5. 找回 DROP COLUMN 数据</h5><p>尝试恢复表中被删除的列及数据。<br><img src="/2025/05/05/note/db/postgresql/extension/PgExtension/pg_recovery/pg_recovery/image-3.png" alt="Alt text">  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql">$ <span class="hljs-keyword">alter table</span> lzzhang <span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> dp;<br><span class="hljs-keyword">ALTER TABLE</span><br>$ <span class="hljs-keyword">select</span> attnum <span class="hljs-keyword">from</span> pg_attribute, pg_class <span class="hljs-keyword">where</span> attrelid <span class="hljs-operator">=</span> pg_class.oid <span class="hljs-keyword">and</span> pg_class.relname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;lzzhang&#x27;</span> <span class="hljs-keyword">and</span> attname <span class="hljs-operator">~</span> <span class="hljs-string">&#x27;dropped&#x27;</span>;<br> attnum <br><span class="hljs-comment">--------</span><br>      <span class="hljs-number">2</span><br>(<span class="hljs-number">1</span> <span class="hljs-type">row</span>)<br><br>$ <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> lzzhang;<br> id <br><span class="hljs-comment">----</span><br>(<span class="hljs-number">0</span> <span class="hljs-keyword">rows</span>)<br><br>$ <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> pg_recovery(<span class="hljs-string">&#x27;lzzhang&#x27;</span>) <span class="hljs-keyword">as</span> (id <span class="hljs-type">int</span>, dropped_attnum_2 <span class="hljs-type">int</span>);<br> id <span class="hljs-operator">|</span> dropped_attnum_2 <br><span class="hljs-comment">----+------------------</span><br>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span>                <span class="hljs-number">1</span><br>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span>                <span class="hljs-number">2</span><br>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span>                <span class="hljs-number">3</span><br>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span>                <span class="hljs-number">3</span><br>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span>                <span class="hljs-number">4</span><br>(<span class="hljs-number">5</span> <span class="hljs-keyword">rows</span>)<br><br><span class="hljs-comment">-- dropped_attnum_2: if the drop attnum is 5, set dropped_attnum_2 to dropped_attnum_5</span><br></code></pre></td></tr></table></figure><h5 id="6-显示找回数据"><a href="#6-显示找回数据" class="headerlink" title="6. 显示找回数据"></a>6. 显示找回数据</h5><p>显示该表历史上所有写入过的数据。<br><img src="/2025/05/05/note/db/postgresql/extension/PgExtension/pg_recovery/pg_recovery/image-4.png" alt="Alt text">  </p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><h5 id="支持的-PostgreSQL-版本"><a href="#支持的-PostgreSQL-版本" class="headerlink" title="支持的 PostgreSQL 版本"></a>支持的 PostgreSQL 版本</h5><p>目前 pg_revovery工具已支持 PostgreSQL 12&#x2F;13&#x2F;14 。  </p><h5 id="可恢复事务数"><a href="#可恢复事务数" class="headerlink" title="可恢复事务数"></a>可恢复事务数</h5><p>PostgreSQL 通过参数 vacuum_defer_cleanup_age 值大小，可限制可恢复的事务数。如果预期需要恢复的数据量较大，可通过配置参数值，提高可恢复的事务数。  </p><p>pg_recovery 通过读取 PostgreSQL dead 元组来恢复不可见的表数据。如果元组被 vacuum 清除掉，那么 pg_recovery 便不能恢复数据。  </p><h5 id="锁请求"><a href="#锁请求" class="headerlink" title="锁请求"></a>锁请求</h5><p>pg_recovery 使用期间，支持正常的读表的锁请求。此外 pg_recovery未使用期间，不会对数据库造成任何额外的开销或是影响，无需暂停服务。  </p><h3 id="pg-recovery设计原理与源码解读"><a href="#pg-recovery设计原理与源码解读" class="headerlink" title="pg_recovery设计原理与源码解读"></a>pg_recovery设计原理与源码解读</h3><h4 id="数据找回的实现原理"><a href="#数据找回的实现原理" class="headerlink" title="数据找回的实现原理"></a>数据找回的实现原理</h4><p>一个数据库系统正常的数据读取方式，是从做 select * from pg_recovery 的查询开始（即执行事务），执行查询操作过程将同时生成事务的快照，通过 GetActiveSnapshot()函数，便可以看到当前可见的数据。  </p><h4 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h4><h5 id="1-如何读取-Dead-元组？"><a href="#1-如何读取-Dead-元组？" class="headerlink" title="1. 如何读取 Dead 元组？"></a>1. 如何读取 Dead 元组？</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">PostgreSQL 通过 快照 来决定当前数据库数据的可见性，因此当一条数据被删除时，数据的实体仍然存在于数据库实例中，通常管这种不可见的数据叫做 Dead 元组（PostgreSQL 中一条数据称为一个元组）。<br><br>PostgreSQL 中提供了 SnapshotAny 的特殊快照（还有很多其他类型）。这个快照可以读取任何数据，pg_recovery 便是通过该方式读取的所有数据。默认情况下，只返回 recovery 的数据，不返回可见的数据。<br></code></pre></td></tr></table></figure><h5 id="2-函数一次返回多少数据？"><a href="#2-函数一次返回多少数据？" class="headerlink" title="2. 函数一次返回多少数据？"></a>2. 函数一次返回多少数据？</h5><p>数据量是按行返回的，并且每次限定一行。  </p><h5 id="3-如何控制内存？"><a href="#3-如何控制内存？" class="headerlink" title="3. 如何控制内存？"></a>3. 如何控制内存？</h5><p>函数会多次执行，而有些状态是全局级的。因此可以使用 multi_call_memory_ctx （内存池的上下文）参数，来控制内存。  </p><h5 id="关于函数的参数"><a href="#关于函数的参数" class="headerlink" title="关于函数的参数"></a>关于函数的参数</h5><p>通过 SQL 创建函数时，执行如下语句。函数使用请参照上一期内容。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> pg_recovery(regclass, recoveryrow bool <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">true</span>) <span class="hljs-keyword">RETURNS</span> SETOF record<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">regclass：PostgreSQL 的表类型，会将表名自动转换成 OID（OID 数据库内部对象的唯一标识），因此只需输入表名即可。<br><br>reconveryrow bool DEFAULT ture：默认值 true，表示只返回 recovery 数据。取值 false, 表示返回所有数据。<br>执行下列语句，修改参数默认值<br>select * from pg_recovery(&#x27;aa&#x27;, recoveryrow =&gt; false)<br><br>RETURNS SETOF record：函数返回行类型数据。<br></code></pre></td></tr></table></figure><h4 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h4><h5 id="必要的数据"><a href="#必要的数据" class="headerlink" title="必要的数据"></a>必要的数据</h5><p><img src="/2025/05/05/note/db/postgresql/extension/PgExtension/pg_recovery/pg_recovery/image-5.png" alt="Alt text">  </p><h5 id="隐藏列"><a href="#隐藏列" class="headerlink" title="隐藏列"></a>隐藏列</h5><p>增加 recoveryrow 的隐藏列，当返回全部信息时，通过此列可以辨别出该行数据是 recovery 的数据，还是用户可见的数据。<br><img src="/2025/05/05/note/db/postgresql/extension/PgExtension/pg_recovery/pg_recovery/image-6.png" alt="Alt text">  </p><h5 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h5>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
      <category>PostgreSQL</category>
      
      <category>extension</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL pg_pageinspect 拓展插件</title>
    <link href="/2025/05/05/note/db/postgresql/extension/PgExtension/pageinspect/PageInspect/"/>
    <url>/2025/05/05/note/db/postgresql/extension/PgExtension/pageinspect/PageInspect/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>PostgreSQL pg_pageinspect 拓展插件</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><a href="#Postgresql%E7%9A%84pageinspect%E6%8F%92%E4%BB%B6%E6%A1%86%E6%9E%B6">1. Postgresql的pageinspect插件框架</a><br><a href="#%E4%BD%BF%E7%94%A8pageinspect%E7%A0%94%E7%A9%B6PostgreSQL%E7%9A%84infomask">2. 使用pageinspect研究PostgreSQL的infomask</a></p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="Postgresql的pageinspect插件框架"><a href="#Postgresql的pageinspect插件框架" class="headerlink" title="Postgresql的pageinspect插件框架"></a>Postgresql的pageinspect插件框架</h3><h4 id="1、插件源码分析"><a href="#1、插件源码分析" class="headerlink" title="1、插件源码分析"></a>1、插件源码分析</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">pageinspect是一个非常典型、简单的插件，大部分流程可以学习、复用。<br><br>如果需要写新的插件，可以直接<span class="hljs-keyword">copy</span>修改下面两个函数，大部分框架代码可以直接使用。<br></code></pre></td></tr></table></figure><h5 id="get-raw-page读取页面的经典流程"><a href="#get-raw-page读取页面的经典流程" class="headerlink" title="get_raw_page读取页面的经典流程"></a>get_raw_page读取页面的经典流程</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">get_raw_page 只返回一行数据，所以无需走插件循环产生元组的流程。<br><br>读取页面的经典流程：<br><br><span class="hljs-number">1</span>、<span class="hljs-keyword">schema</span>+<span class="hljs-keyword">table</span>名包装：makeRangeVarFromNameList<br><span class="hljs-number">2</span>、打开表：relation_openrv<br><span class="hljs-number">3</span>、读页面（返回pin住的页面）：ReadBufferExtended<br><span class="hljs-number">4</span>、页面加锁：LockBuffer<br><span class="hljs-number">5</span>、读取数据：memcpy<br><span class="hljs-number">6</span>、页面解锁：LockBuffer<br><span class="hljs-number">7</span>、释放页面（unpin）：ReleaseBuffer<br><span class="hljs-number">8</span>、关闭表：relation_close<br></code></pre></td></tr></table></figure><p><img src="/2025/05/05/note/db/postgresql/extension/PgExtension/pageinspect/PageInspect/image.png" alt="get_raw_page">  </p><h5 id="heap-page-items"><a href="#heap-page-items" class="headerlink" title="heap_page_items"></a>heap_page_items</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">如果插件需要返回多行数据，这里是一个典型的PG插件框架：<br></code></pre></td></tr></table></figure><p><img src="/2025/05/05/note/db/postgresql/extension/PgExtension/pageinspect/PageInspect/image-1.png" alt="heap_page_items">  </p><h4 id="2、恢复数据探索"><a href="#2、恢复数据探索" class="headerlink" title="2、恢复数据探索"></a>2、恢复数据探索</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">遇到一个客户刚刚删除一条数据，问有没有快捷的方法可以查到被删数据的某个字段？<br>这里尝试使用pageinspect做恢复实验。<br><br>结论先行：<br><br><span class="hljs-number">1</span>、使用pageinspect的data字段是可以反转为原数据的，但是前提是data字段还在。<br><span class="hljs-number">2</span>、即使没有<span class="hljs-keyword">vacuum</span>，下一次对删除数据所在页面的读写，都可能对页面进行purne，导致删除数据不再能被pageinspect发现。<br><span class="hljs-number">3</span>、使用pageinspect恢复数据可行性不大。<br></code></pre></td></tr></table></figure><p>实验数据：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> t21(id <span class="hljs-type">int</span>, d1 <span class="hljs-type">int</span>, d2 <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>), d3 text);<br><span class="hljs-keyword">alter table</span> t21 <span class="hljs-keyword">set</span> ( autovacuum_enabled <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>, toast.autovacuum_enabled <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>);<br><span class="hljs-keyword">insert into</span> t21 <span class="hljs-keyword">select</span> a, a<span class="hljs-operator">+</span><span class="hljs-number">100</span>, <span class="hljs-string">&#x27;aA012345&#x27;</span>,md5(random()::text) <span class="hljs-keyword">from</span> generate_series(<span class="hljs-number">1</span>,<span class="hljs-number">10000</span>) a;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t21;<br>  id   <span class="hljs-operator">|</span>  d1   <span class="hljs-operator">|</span>    d2    <span class="hljs-operator">|</span>                d3                <br><span class="hljs-comment">-------+-------+----------+----------------------------------</span><br>     <span class="hljs-number">1</span> <span class="hljs-operator">|</span>   <span class="hljs-number">101</span> <span class="hljs-operator">|</span> aA012345 <span class="hljs-operator">|</span> e10022e0fa6ecece950a1ab20caac824<br>     <span class="hljs-number">2</span> <span class="hljs-operator">|</span>   <span class="hljs-number">102</span> <span class="hljs-operator">|</span> aA012345 <span class="hljs-operator">|</span> <span class="hljs-number">7</span>c963b472d452c4dde9d36760b41a8de<br>     <span class="hljs-number">3</span> <span class="hljs-operator">|</span>   <span class="hljs-number">103</span> <span class="hljs-operator">|</span> aA012345 <span class="hljs-operator">|</span> <span class="hljs-number">8142</span>f1299d5cf7e384e7b3c43076710d<br>     <span class="hljs-number">4</span> <span class="hljs-operator">|</span>   <span class="hljs-number">104</span> <span class="hljs-operator">|</span> aA012345 <span class="hljs-operator">|</span> c3c76a8c0cf98e6004051b3bfe415310<br>     <span class="hljs-number">5</span> <span class="hljs-operator">|</span>   <span class="hljs-number">105</span> <span class="hljs-operator">|</span> aA012345 <span class="hljs-operator">|</span> <span class="hljs-number">163214</span>ae0c27f387d0207e89210e5a57<br>     <span class="hljs-number">6</span> <span class="hljs-operator">|</span>   <span class="hljs-number">106</span> <span class="hljs-operator">|</span> aA012345 <span class="hljs-operator">|</span> <span class="hljs-number">302</span>cb39b8ebc649d045f2a1123d379bb<br>     <span class="hljs-number">7</span> <span class="hljs-operator">|</span>   <span class="hljs-number">107</span> <span class="hljs-operator">|</span> aA012345 <span class="hljs-operator">|</span> be22d7234058e2e9247911c011eef47f<br>     <span class="hljs-number">8</span> <span class="hljs-operator">|</span>   <span class="hljs-number">108</span> <span class="hljs-operator">|</span> aA012345 <span class="hljs-operator">|</span> <span class="hljs-number">7</span>fe88087d8d6fea4470eece997f49360<br>     <span class="hljs-number">9</span> <span class="hljs-operator">|</span>   <span class="hljs-number">109</span> <span class="hljs-operator">|</span> aA012345 <span class="hljs-operator">|</span> <span class="hljs-number">279</span>eb01c225b71b083b5df2d9bd87d7b<br>    <span class="hljs-number">10</span> <span class="hljs-operator">|</span>   <span class="hljs-number">110</span> <span class="hljs-operator">|</span> aA012345 <span class="hljs-operator">|</span> <span class="hljs-number">0463</span>ef122689cb78f795c6d4309f3565<br>    <span class="hljs-number">11</span> <span class="hljs-operator">|</span>   <span class="hljs-number">111</span> <span class="hljs-operator">|</span> aA012345 <span class="hljs-operator">|</span> <span class="hljs-number">1587</span>dd3d027b6fda21d97085369434d7<br></code></pre></td></tr></table></figure><p>实验过程：<br>删除5页面数据<br>delete from t21 where ctid&#x3D;’(5,3)’;<br>DELETE 1<br>观察当前页面状态，data还在:<br><img src="/2025/05/05/note/db/postgresql/extension/PgExtension/pageinspect/PageInspect/image-2.png" alt="Alt text"><br><img src="/2025/05/05/note/db/postgresql/extension/PgExtension/pageinspect/PageInspect/image-3.png" alt="Alt text"><br><img src="/2025/05/05/note/db/postgresql/extension/PgExtension/pageinspect/PageInspect/image-4.png" alt="Alt text"><br><img src="/2025/05/05/note/db/postgresql/extension/PgExtension/pageinspect/PageInspect/image-5.png" alt="Alt text">  </p><h3 id="使用pageinspect研究PostgreSQL的infomask"><a href="#使用pageinspect研究PostgreSQL的infomask" class="headerlink" title="使用pageinspect研究PostgreSQL的infomask"></a>使用pageinspect研究PostgreSQL的infomask</h3>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
      <category>PostgreSQL</category>
      
      <category>extension</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL中的keepalive</title>
    <link href="/2025/05/05/note/db/postgresql/conf/keepalive/"/>
    <url>/2025/05/05/note/db/postgresql/conf/keepalive/</url>
    
    <content type="html"><![CDATA[<h2 id="xx"><a href="#xx" class="headerlink" title="xx"></a>xx</h2><p>TCP keepalive for a better PostgreSQL experience</p><p>TCP keepalive 以获得更好的 PostgreSQL 体验</p><p>本文主要内容如下：</p><table><thead><tr><th>Chapter Contents</th><th>sub Chapter</th></tr></thead><tbody><tr><td><a href="#cp1">1 Reasons for broken connections</a></td><td><a href="#cp1.1">1.1 Database server crashes</a></td></tr><tr><td></td><td><a href="#cp1.2">1.2 Connections abandoned by the client</a></td></tr><tr><td></td><td><a href="#cp1.3">1.3 Connections closed by a network component</a></td></tr><tr><td><a href="#cp2">2 What is TCP keepalive?</a></td><td></td></tr><tr><td><a href="#cp3">3 TCP keepalive default settings</a></td><td></td></tr><tr><td><a href="#cp4">4 Using TCP keepalive to keep an idle database session alive</a></td><td></td></tr><tr><td><a href="#cp5">5 Using TCP keepalive to detect dead connections</a></td><td></td></tr><tr><td><a href="#cp6">6 Setting TCP keepalive parameters on the PostgreSQL server</a></td><td></td></tr><tr><td><a href="#cp7">7 Setting TCP keepalive parameters on the PostgreSQL client</a></td><td></td></tr><tr><td><a href="#cp8">8 Setting TCP keepalive parameters on the operating system</a></td><td></td></tr><tr><td><a href="#cp9">9 Conclusion</a></td><td></td></tr><tr><td><a href="#cp10">10 Other problems</a></td><td></td></tr></tbody></table><p>如果您听说过TCP keepalive但不确定那是什么，请继续阅读。如果您曾对如下错误消息感到惊讶：</p><pre><code class="hljs">(1) 服务器意外关闭了连接(2) SSL SYSCALL 错误：检测到EOF(3) 客户端连接意外结束(4) 无法从客户端接收数据：连接被对方重置</code></pre><p><img src="/2025/05/05/note/db/postgresql/conf/keepalive/img.png" alt="img.png"><br>那么，这篇文章就是为您准备的。</p><h3 id="1-Reasons-for-broken-connections"><a href="#1-Reasons-for-broken-connections" class="headerlink" title="1 Reasons for broken connections"></a><a name="cp1"></a>1 Reasons for broken connections</h3><p>断开的连接可能有几种原因：</p><h4 id="1-1-Database-server-crashes"><a href="#1-1-Database-server-crashes" class="headerlink" title="1.1 Database server crashes"></a><a name="cp1.1"></a>1.1 Database server crashes</h4><p>上述列表中的前两个消息可能是 PostgreSQL 服务器问题的结果。<br>如果服务器由于某种原因崩溃，您会看到类似的消息。<br>要调查是否存在服务器问题，您应该首先查看 PostgreSQL 日志，看看是否能找到匹配的崩溃报告。</p><p>我们不会在下文中处理这种情况，因为它不是网络问题。</p><h4 id="1-2-Connections-abandoned-by-the-client"><a href="#1-2-Connections-abandoned-by-the-client" class="headerlink" title="1.2 Connections abandoned by the client"></a><a name="cp1.2"></a>1.2 Connections abandoned by the client</h4><p>客户端放弃的连接</p><p>如果客户端退出时未正确关闭数据库连接，则服务器在网络套接字通信时将收到文件结束符或错误。<br>自 v14 版本引入的新会话统计信息中，您可以跟踪此类“被放弃”的数据库连接数量，<br>在 pg_stat_database.sessions_abandoned 中。</p><p>(<a href="https://www.cybertec-postgresql.com/en/estimating-connection-pool-size-with-postgresql-database-statistics/">https://www.cybertec-postgresql.com/en/estimating-connection-pool-size-with-postgresql-database-statistics/</a>).</p><p>例如，如果应用程序服务器出现故障并重新启动，通常它不会关闭与数据库服务器的连接。<br>这并不令人惊慌，当服务器尝试向客户端发送数据时，数据库服务器会迅速检测到。但如果数据库会话处于空闲状态，<br>服务器进程则等待客户端发送下一个语句（您可以在 pg_stat_activity 中看到 wait_event “ClientRead”）。<br>然后服务器不会立即注意到客户端已不存在！这种滞留的后端进程占用了一个进程槽，<br>并可能导致您超出 max_connections。</p><p>PostgreSQL v14 引入了一个新参数 idle_session_timeout，该参数会在一段时间后关闭空闲连接。<br>但这也会终止“健康”的空闲连接，因此这不是一个很好的解决方案。TCP keepalive 为此问题提供了一个更好的解决方案。</p><h4 id="1-3-Connections-closed-by-a-network-component"><a href="#1-3-Connections-closed-by-a-network-component" class="headerlink" title="1.3 Connections closed by a network component"></a><a name="cp1.3"></a>1.3 Connections closed by a network component</h4><p>由网络组件关闭的连接</p><p>有时数据库连接的两端都会遇到相同的问题：每一端都发现另一端“挂断了”。在这种情况下，<br>问题是位于数据库客户端和服务器之间的某个地方。</p><p>如果有实际的连接问题，网络连接可能会断开。在软件级别上您无法对此进行更改。但通常情况下，<br>断开连接是由防火墙或路由器的配置方式引起的。网络组件可能必须“记住”每个开放连接的状态，<br>而用于此的资源是有限的。因此，放弃并丢弃长时间空闲的连接似乎是一种权宜之计。</p><p>由于当今大部分的 TCP 流量是通过 HTTP 进行的，而 HTTP 是无状态的，这通常不是问题。<br>如果您的 HTTP 连接中断，只需为下一个请求建立一个新的连接即可，这并不会非常耗资源。但是数据库则不同：</p><pre><code class="hljs">(1) 建立数据库连接的成本很高(2) 数据库连接不是无状态的；例如，连接关闭时，打开的事务、临时表和预准备语句都会丢失(3) 对于数据库会话来说，长时间处于空闲状态是正常的，例如如果您正在使用连接池，或者当客户端正在等待长时间运行的分析查询的结果时</code></pre><p>这时 TCP keepalive 就派上用场了，它可以保持空闲连接的开放。</p><h3 id="2-What-is-TCP-keepalive"><a href="#2-What-is-TCP-keepalive" class="headerlink" title="2 What is TCP keepalive?"></a><a name="cp2"></a>2 What is TCP keepalive?</h3><p>Keepalive 是 TCP 协议的一项功能。当您在 TCP 网络套接字上设置 SO_KEEPALIVE 选项时，<br>一旦套接字进入空闲状态，计时器将开始运行。当 keepalive 空闲时间到期且套接字上没有进一步活动时，<br>内核将向通信伙伴发送一个“keepalive 数据包”。如果伙伴回应，连接被视为良好，计时器将重新开始运行。</p><p>如果没有收到回应，内核会在发送另一个 keepalive 数据包之前等待 keepalive 间隔时间。<br>此过程会重复进行，直到发送的 keepalive packets数量达到 keepalive count。之后，连接被视为已断开，<br>尝试使用网络套接字将会导致错误。</p><p>请注意，是操作系统内核而不是应用程序（数据库服务器或客户端）发送 keepalive 消息。<br>应用程序并不知晓这一过程。</p><p>TCP keepalive 有两个目的：</p><p>(1) 防止网络连接长时间处于空闲状态；<br>(2) 检测另一端通信方是否在未关闭网络连接的情况下离开。<br>（名称“keepalive”并不能很好地描述这一点——“detectdead”会更准确一些）。</p><h3 id="3-TCP-keepalive-default-settings"><a href="#3-TCP-keepalive-default-settings" class="headerlink" title="3 TCP keepalive default settings"></a><a name="cp3"></a>3 TCP keepalive default settings</h3><p>TCP keepalive 默认设置<br>keepalive 参数的默认值因操作系统而异。在 Linux 和 Windows 上，默认值为：</p><p>keepalive 空闲时间：Linux、MacOS 和 Windows 上为 2 小时<br>keepalive 间隔：Linux 和 MacOS 上为 75 秒，Windows 上为 1 秒<br>keepalive 计数：MacOS 上为 8，Linux 上为 9，Windows 上为 10（此值在 Windows 上无法更改）</p><h3 id="4-Using-TCP-keepalive-to-keep-an-idle-database-session-alive"><a href="#4-Using-TCP-keepalive-to-keep-an-idle-database-session-alive" class="headerlink" title="4 Using TCP keepalive to keep an idle database session alive"></a><a name="cp4"></a>4 Using TCP keepalive to keep an idle database session alive</h3><p>使用 TCP keepalive 维持空闲数据库会话</p><p>为了防止防火墙和路由器关闭空闲连接，我们需要将 keepalive 空闲时间设置得更低。<br>这样，在连接被关闭之前就会发送 keepalive 数据包。这会欺骗有问题的网络组件，使其认为连接并未空闲，<br>即使数据库客户端和服务器都没有发送任何数据。</p><h3 id="5-Using-TCP-keepalive-to-detect-dead-connections"><a href="#5-Using-TCP-keepalive-to-detect-dead-connections" class="headerlink" title="5 Using TCP keepalive to detect dead connections"></a><a name="cp5"></a>5 Using TCP keepalive to detect dead connections</h3><p>使用 TCP keepalive 检测死连接</p><p>对于这种用例，减少 keepalive 空闲时间通常是不够的。如果服务器发送了九个间隔时间为 75 秒的 keepalive 数据包，<br>则需要超过 10 分钟才能检测到死连接。因此，我们也会减少 keepalive 计数，或 keepalive 间隔，或同时减少两者。</p><p>这里还有一个缺失的部分：即使操作系统检测到网络连接已断开，除非数据库服务器尝试使用网络套接字，<br>否则它不会注意到这一点。如果它正在等待来自客户端的请求，这将立即发生。但如果服务器忙于执行<br>长时间运行的 SQL 语句，它将不会注意到死连接，直到查询完成并尝试将结果返回给客户端！<br>为了避免这种情况的发生，PostgreSQL v14 引入了一个新参数 client_connection_check_interval，<br>目前仅在 Linux 上支持。设置此参数会导致服务器定期“轮询”套接字，即使它还没有任何要发送的数据。<br>这样，它可以检测到已关闭的连接并中断 SQL 语句的执行。</p><h3 id="6-Setting-TCP-keepalive-parameters-on-the-PostgreSQL-server"><a href="#6-Setting-TCP-keepalive-parameters-on-the-PostgreSQL-server" class="headerlink" title="6 Setting TCP keepalive parameters on the PostgreSQL server"></a><a name="cp6"></a>6 Setting TCP keepalive parameters on the PostgreSQL server</h3><p>在 PostgreSQL 服务器上设置 TCP keepalive 参数</p><p>PostgreSQL 服务器总是在 TCP 套接字上设置 SO_KEEPALIVE 以检测断开的连接，但默认的两小时空闲超时时间非常长。</p><p>您可以设置配置参数 tcp_keepalives_idle、tcp_keepalives_interval 和 tcp_keepalives_count<br>（最后一个在 Windows 上不支持）来更改所有服务器套接字的设置。</p><p>这是为所有数据库连接配置 TCP keepalive 的最便捷方式，无论使用何种客户端。</p><h3 id="7-Setting-TCP-keepalive-parameters-on-the-PostgreSQL-client"><a href="#7-Setting-TCP-keepalive-parameters-on-the-PostgreSQL-client" class="headerlink" title="7 Setting TCP keepalive parameters on the PostgreSQL client"></a><a name="cp7"></a>7 Setting TCP keepalive parameters on the PostgreSQL client</h3><p>在 PostgreSQL 客户端上设置 TCP keepalive 参数</p><p>PostgreSQL 客户端共享库 libpq 具有连接参数 keepalives_idle、keepalives_interval<br>和 keepalives_count（同样，后者在 Windows 上不支持），以便在客户端配置 keepalive。</p><p>这些参数可以与所有链接到 libpq 的客户端接口一起在 PostgreSQL 连接字符串中使用，例如 Psycopg 或 PHP。</p><p>不使用 libpq 的 PostgreSQL JDBC 驱动程序仅有一个连接参数 tcpKeepAlive 来<br>启用 TCP keepalive（默认情况下禁用），但没有参数来配置 keepalive 空闲时间和其它 keepalive 设置。</p><h3 id="8-Setting-TCP-keepalive-parameters-on-the-operating-system"><a href="#8-Setting-TCP-keepalive-parameters-on-the-operating-system" class="headerlink" title="8 Setting TCP keepalive parameters on the operating system"></a><a name="cp8"></a>8 Setting TCP keepalive parameters on the operating system</h3><p>而不是专门为 PostgreSQL 连接配置 keepalive 设置，您可以更改操作系统中所有 TCP 连接的<br>默认值——这在您使用的 PostgreSQL 客户端应用程序不允许设置 keepalive 连接参数时非常有用。</p><p><img src="/2025/05/05/note/db/postgresql/conf/keepalive/img_1.png" alt="img_1.png"></p><p><img src="/2025/05/05/note/db/postgresql/conf/keepalive/img_2.png" alt="img_2.png"></p><p>如上所述，没有设置 keepalive 探针的数量，该数量被硬编码为 10。注册表项必须是 DWORD 类型，且值以毫秒为单位而非秒。</p><p>更改这些键后，重新启动 Windows 以激活它们。</p><h3 id="9-Conclusion"><a href="#9-Conclusion" class="headerlink" title="9 Conclusion"></a><a name="cp9"></a>9 Conclusion</h3><p>配置 TCP keepalive 可以通过保持空闲数据库连接的开放或通过及时检测断开的连接来<br>提升您的 PostgreSQL 体验。您可以在 PostgreSQL 客户端、服务器或操作系统上配置 keepalive。</p><p>除了配置 keepalive 之外，还应设置新参数 client_connection_check_interval，以便在客户端放弃<br>会话时取消长时间运行的查询。</p><h3 id="10-Other-problems"><a href="#10-Other-problems" class="headerlink" title="10 Other problems"></a><a name="cp10"></a>10 Other problems</h3><p>(1) 一些防火墙默认策略是阻止 keepalive 数据包。注意在 postgres 服务器和客户端之间没有任何此类防火墙。如果有，请允许 postgres 端口的 keepalive 数据包。</p><p>(2) 我想知道下面两个错误有什么区别？</p><p>“could not receive data from client: Connection reset by peer”</p><p>“could not receive data from client: Connection timed out”。</p><p>这两个都是由于 keepalive 相关的问题吗？</p><p>答：不，只有第一个错误与 keepalive 相关：对等端（TCP 连接的另一端）终止了连接。<br>第二个错误意味着在一定时间内没有人响应 TCP 连接请求。<br>这种情况通常发生在您尝试连接到已关闭、不存在或被防火墙阻止的机器时。</p><p>(3) 发散文章：<br><a href="https://blog.csdn.net/liuzhenghua66/article/details/145260469">https://blog.csdn.net/liuzhenghua66/article/details/145260469</a> (连接池偶现15分钟超时问题)</p><p><a href="https://www.cnblogs.com/trust-freedom/p/6992952.html">https://www.cnblogs.com/trust-freedom/p/6992952.html</a></p><p><a href="https://www.laoxiong.net/firewall-dcd-and-tcp-keep-alive.html">https://www.laoxiong.net/firewall-dcd-and-tcp-keep-alive.html</a></p><p><a href="https://www.cnblogs.com/trust-freedom/p/6992952.html">https://www.cnblogs.com/trust-freedom/p/6992952.html</a></p><p><a href="https://blog.csdn.net/zhang_road/article/details/104473143">https://blog.csdn.net/zhang_road/article/details/104473143</a></p><h4 id="参与贡献"><a href="#参与贡献" class="headerlink" title="参与贡献"></a>参与贡献</h4><ol><li>Fork 本仓库</li><li>新建 Feat_xxx 分支</li><li>提交代码</li><li>新建 Pull Request</li></ol><h4 id="特技"><a href="#特技" class="headerlink" title="特技"></a>特技</h4><ol><li>使用 Readme_XXX.md 来支持不同的语言，例如 Readme_en.md, Readme_zh.md</li><li>Gitee 官方博客 <a href="https://blog.gitee.com/">blog.gitee.com</a></li><li>你可以 <a href="https://gitee.com/explore">https://gitee.com/explore</a> 这个地址来了解 Gitee 上的优秀开源项目</li><li><a href="https://gitee.com/gvp">GVP</a> 全称是 Gitee 最有价值开源项目，是综合评定出的优秀开源项目</li><li>Gitee 官方提供的使用手册 <a href="https://gitee.com/help">https://gitee.com/help</a></li><li>Gitee 封面人物是一档用来展示 Gitee 会员风采的栏目 <a href="https://gitee.com/gitee-stars/">https://gitee.com/gitee-stars/</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
      <category>PostgreSQL</category>
      
      <category>conf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL 调试 checkpointer 进程</title>
    <link href="/2025/05/05/note/db/postgresql/checkpoint/gdb/README/"/>
    <url>/2025/05/05/note/db/postgresql/checkpoint/gdb/README/</url>
    
    <content type="html"><![CDATA[<h2 id="How-to-gdb-checkpointer"><a href="#How-to-gdb-checkpointer" class="headerlink" title="How to gdb checkpointer?"></a>How to gdb checkpointer?</h2><p>PostgreSQL 调试 checkpointer 进程</p><p><a href="https://blog.japinli.top/2022/11/postgresql-debug-checkpointer/">https://blog.japinli.top/2022/11/postgresql-debug-checkpointer/</a></p><p><a href="https://stackoverflow.com/questions/36993909/debugging-a-program-that-uses-sigint-with-gdb">https://stackoverflow.com/questions/36993909/debugging-a-program-that-uses-sigint-with-gdb</a></p><p>本章主要内容如下：</p><p>Checkpointer 进程负责将 PostgreSQL 数据库中的脏页刷到磁盘中，当我们通过 GDB 附加<br>到 checkpointer 进程之后，通过执行 CHECKPOINT 语句发现不能触发后续的 checkpoint 代码。<br>本文针对这个问题简要介绍一下如何调试 PostgreSQL 数据库的 checkpointer 进程。</p><table><thead><tr><th>Chapter Contents</th></tr></thead><tbody><tr><td><a href="#cp1">1 现象</a></td></tr><tr><td><a href="#cp2">2 分析</a></td></tr></tbody></table><h3 id="1-现象"><a href="#1-现象" class="headerlink" title="1. 现象"></a><a name="cp1"></a>1. 现象</h3><p>当我们通过 GDB 附加到 checkponter 进程之后，我们可以在 CheckpointerMain() 函数的 for 循环中<br>打断点来跟踪其执行流程，这里我断点打在 HandleCheckpointerInterrupts() 函数上，因此，<br>每次循环都将执行该函数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> gdb -p $(ps -ef | awk <span class="hljs-string">&#x27;$NF ~ /checkpointer/ &#123;print $2&#125;&#x27;</span>)</span><br>(gdb) b HandleCheckpointerInterrupts<br></code></pre></td></tr></table></figure><p>随后，我们新建一个连接，并执行 CHECKPOINIT 语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">$ psql postgres<br>postgres<span class="hljs-operator">=</span># CHECKPOINT;<br></code></pre></td></tr></table></figure><p>我们在 GDB 的窗口中，可以看到如下所示的信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">Program received signal SIGINT, Interrupt.<br>0x00007f83751d342a in epoll_wait (epfd=8, events=0x55afd620a668, maxevents=1, timeout=299000) at ../sysdeps/unix/sysv/linux/epoll_wait.c:30<br>30      ../sysdeps/unix/sysv/linux/epoll_wait.c: No such file or directory.<br>(gdb)<br>Continuing.<br></code></pre></td></tr></table></figure><p>此时，psql 进程也阻塞在了 CHECKPOINT 语句上，我们可以通过 Ctrl-C 来结束 CHECKPOINT 的执行。这是为什么呢？</p><h3 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a><a name="cp2"></a>2. 分析</h3><p>通过分析 RequestCheckpoint() 函数，可以看到它实际上是向 checkpointer 进程发送了 SIGINT 信号，如下所示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br><span class="hljs-title function_">RequestCheckpoint</span><span class="hljs-params">(<span class="hljs-type">int</span> flags)</span><br>&#123;<br>    [...]<br><br>    <span class="hljs-keyword">for</span> (ntries = <span class="hljs-number">0</span>;; ntries++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (CheckpointerShmem-&gt;checkpointer_pid == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (ntries &gt;= MAX_SIGNAL_TRIES || !(flags &amp; CHECKPOINT_WAIT))<br>            &#123;<br>                elog((flags &amp; CHECKPOINT_WAIT) ? ERROR : LOG,<br>                     <span class="hljs-string">&quot;could not signal for checkpoint: checkpointer is not running&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (kill(CheckpointerShmem-&gt;checkpointer_pid, SIGINT) != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (ntries &gt;= MAX_SIGNAL_TRIES || !(flags &amp; CHECKPOINT_WAIT))<br>            &#123;<br>                elog((flags &amp; CHECKPOINT_WAIT) ? ERROR : LOG,<br>                     <span class="hljs-string">&quot;could not signal for checkpoint: %m&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">break</span>;              <span class="hljs-comment">/* signal sent successfully */</span><br><br>        CHECK_FOR_INTERRUPTS();<br>        pg_usleep(<span class="hljs-number">100000L</span>);     <span class="hljs-comment">/* wait 0.1 sec, then retry */</span><br>    &#125;<br><br>    [...]<br>&#125;<br></code></pre></td></tr></table></figure><p>但是，当我们在通过 GDB 附加进程之后，SIGINT 信号被 GDB 拦截了并且不会向<br>程序发送 SIGINT 信息，因此导致 checkpointer 进程始终接收不到 SIGINT 信号。<br>我们可以通过 GDB 的 info signals 命令看到 GDB 拦截的信号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">(gdb) info signals<br>Signal        Stop      Print   Pass to program Description<br><br>SIGHUP        Yes       Yes     Yes             Hangup<br>SIGINT        Yes       Yes     No              Interrupt<br>SIGQUIT       Yes       Yes     Yes             Quit<br>SIGILL        Yes       Yes     Yes             Illegal instruction<br>SIGTRAP       Yes       Yes     No              Trace/breakpoint trap<br>SIGABRT       Yes       Yes     Yes             Aborted<br>SIGEMT        Yes       Yes     Yes             Emulation trap<br>SIGFPE        Yes       Yes     Yes             Arithmetic exception<br>SIGKILL       Yes       Yes     Yes             Killed<br>SIGBUS        Yes       Yes     Yes             Bus error<br>SIGSEGV       Yes       Yes     Yes             Segmentation fault<br>SIGSYS        Yes       Yes     Yes             Bad system call<br>[...]<br></code></pre></td></tr></table></figure><p>因此，我们可以在 GDB 的命令行中手动的向 checkpointer 进程发送 SIGINT 信号来触发后续的 checkpoint 代码流程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">(gdb) c<br>Continuing.<br><br>Program received signal SIGINT, Interrupt.<br>0x00007f83751d342a in epoll_wait (epfd=8, events=0x55afd620a668, maxevents=1, timeout=169802) at ../sysdeps/unix/sysv/linux/epoll_wait.c:30<br>30      in ../sysdeps/unix/sysv/linux/epoll_wait.c<br>(gdb) signal SIGINT<br>Continuing with signal SIGINT.<br><br>Breakpoint 1, HandleCheckpointerInterrupts ()<br>    at /home/japin/Codes/postgresql/Debug/../src/backend/postmaster/checkpointer.c:545<br>(gdb)<br></code></pre></td></tr></table></figure><p>接着，我们便可以跟踪后续的 checkpoint 执行流程，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">(gdb) b CreateCheckPoint<br>Breakpoint 2 at 0x55afd4492083: file /home/japin/Codes/postgresql/Debug/../src/backend/access/transam/xlog.c, line 6441.<br>(gdb) c<br>Continuing.<br><br>Breakpoint 2, CreateCheckPoint (flags=32766)<br>    at /home/japin/Codes/postgresql/Debug/../src/backend/access/transam/xlog.c:6441<br></code></pre></td></tr></table></figure><h4 id="参与贡献"><a href="#参与贡献" class="headerlink" title="参与贡献"></a>参与贡献</h4><ol><li>Fork 本仓库</li><li>新建 Feat_xxx 分支</li><li>提交代码</li><li>新建 Pull Request</li></ol><h4 id="特技"><a href="#特技" class="headerlink" title="特技"></a>特技</h4><ol><li>使用 Readme_XXX.md 来支持不同的语言，例如 Readme_en.md, Readme_zh.md</li><li>Gitee 官方博客 <a href="https://blog.gitee.com/">blog.gitee.com</a></li><li>你可以 <a href="https://gitee.com/explore">https://gitee.com/explore</a> 这个地址来了解 Gitee 上的优秀开源项目</li><li><a href="https://gitee.com/gvp">GVP</a> 全称是 Gitee 最有价值开源项目，是综合评定出的优秀开源项目</li><li>Gitee 官方提供的使用手册 <a href="https://gitee.com/help">https://gitee.com/help</a></li><li>Gitee 封面人物是一档用来展示 Gitee 会员风采的栏目 <a href="https://gitee.com/gitee-stars/">https://gitee.com/gitee-stars/</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
      <category>PostgreSQL</category>
      
      <category>checkpoint</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Global Resource Drectory (GRD)</title>
    <link href="/2025/05/05/note/db/Oracle/RAC/GRD/README/"/>
    <url>/2025/05/05/note/db/Oracle/RAC/GRD/README/</url>
    
    <content type="html"><![CDATA[<p>Global Resource Drectory (GRD)</p><h2 id="Global-Resource-Drectory-GRD"><a href="#Global-Resource-Drectory-GRD" class="headerlink" title="Global Resource Drectory (GRD)"></a>Global Resource Drectory (GRD)</h2><p>本章主要内容如下：</p><table><thead><tr><th>Chapter Contents</th></tr></thead><tbody><tr><td><a href="#ch1">1.1 GRD introduction</a></td></tr><tr><td><a href="#ch2">1.2 Cache Coherency</a></td></tr><tr><td><a href="#ch3">1.3 Resources and Enqueues</a></td></tr><tr><td><a href="#ch4">1.4 Global Enqueue Services (GES)</a></td></tr><tr><td><a href="#ch5">1.5 Global Locks</a></td></tr><tr><td><a href="#ch6">1.6 Messaging</a></td></tr><tr><td><a href="#ch7">1.7 Global Cache Services (GCS)</a></td></tr></tbody></table><h3 id="1-1-GRD-introduction"><a href="#1-1-GRD-introduction" class="headerlink" title="1.1 GRD introduction"></a><a name="data-Organization"></a>1.1 GRD introduction</h3><p>RAC 环境包括许多资源，如不同模式下的缓冲区缓存中的多个版本的数据块缓冲区。<br>Oracle 使用锁定和排队机制来协调锁资源、数据和实例间的数据请求。诸如数据块和锁<br>之类的资源必须在节点之间进行同步，因为集群内的节点会获取和释放它们的所有权。<br>由全局资源目录 (GRD) 提供的同步维护了资源在整个集群中的并发性，从而确保共享数据的<br>完整性。对于缓冲区缓存管理也需要同步，因为它被划分为多个缓存，每个实例负责管理其<br>自己的本地版本的缓冲区缓存。数据副本在节点之间交换，这有时被称为全局缓存，<br>但实际上每个节点的缓冲区缓存是分开的，通过传统的分布式锁定机制交换块的副本。</p><p>全局缓存服务 (GCS) 维护跨缓冲区缓存资源的缓存一致性，全局队列服务 (GES) 控制集群内<br>非缓冲区缓存资源的资源管理。</p><h3 id="1-2-Cache-Coherency"><a href="#1-2-Cache-Coherency" class="headerlink" title="1.2 Cache Coherency"></a><a name="data-Organization"></a>1.2 Cache Coherency</h3><p>缓存一致性识别资源的最新副本，也称为主副本，它使用一种机制来确保在Oracle实例之间保持对象的多个副本之间的一致性。并行缓存管理（PCM）确保数据块的主副本存储在一个缓冲区缓存中，而数据块的一致副本存储在其他缓冲区缓存中，进程LCKx负责此任务。</p><p>实例锁的锁和资源结构位于GRD（也称为DLM）中，这是共享池中的一个专用区域。关于数据块资源和缓存版本的详细信息由GCS维护。其他详细信息，如最新版本的位置、缓冲区状态、数据块的角色（本地或全局）和所有权由GES维护。全局缓存与GES一起构成GRD。每个实例在其SGA中维护GRD的一部分。GCS和GES指定一个实例作为资源主控，以管理有关特定资源的所有信息。每个实例都知道哪个实例是哪个资源的主控。</p><h3 id="1-3-Resources-and-Enqueues"><a href="#1-3-Resources-and-Enqueues" class="headerlink" title="1.3 Resources and Enqueues"></a><a name="data-Organization"></a>1.3 Resources and Enqueues</h3><p>资源是可标识的实体，它具有名称或引用。所引用的实体通常是一个内存区域、磁盘文件、数据块或抽象实体。资源可以以各种状态（独占或共享）被拥有或锁定，所有资源都是可锁定的。全局资源在整个集群中可见，因此本地资源只能由其本地实例使用。每个资源可以有一个当前授予用户的锁列表，称为授予队列。转换队列是一组等待转换为特定模式的锁，这是将锁从一种模式更改为另一种模式的过程，甚至NULL也是一种锁。资源有一个锁值块（LVB）。全局资源管理器（GRM）确保跨集群的锁信息有效且正确。</p><p>锁被放置在资源的授予队列或转换队列上，如果锁发生更改，则它会在这些队列之间移动。锁在以下情况下离开转换队列：</p><pre><code class="hljs">1. 进程请求终止锁（移除锁）2. 进程取消转换，锁以之前的模式移回授予队列3. 请求的模式与授予队列中最严格的锁及转换队列之前的所有模式兼容，并且锁位于转换队列的头部</code></pre><p>转换请求按先进先出的原则处理，授予队列和转换队列与由GES管理的每个资源相关联。</p><p><img src="/2025/05/05/note/db/Oracle/RAC/GRD/README/img.png" alt="img.png"></p><p>队列基本上是支持排队机制并且可以在不同模式下获取的锁。一个队列可以由一个进程以独占模式持有，其他进程可以根据类型持有非独占模式。RAC中的队列与单实例中的相同。</p><h3 id="1-4-Global-Enqueue-Services-GES"><a href="#1-4-Global-Enqueue-Services-GES" class="headerlink" title="1.4 Global Enqueue Services (GES)"></a><a name="data-Organization"></a>1.4 Global Enqueue Services (GES)</h3><p>GES协调所有全局队列的请求，它还处理死锁和超时。有两种类型的本地锁，闩锁和队列，闩锁不影响集群只影响本地实例，队列可以影响集群和实例。</p><p>队列是用于序列化对数据库资源访问的共享结构，它们支持多种模式并且持有时间比闩锁长，它们保护诸如表或库缓存对象之类的持久对象。队列可以使用以下任何一种模式：</p><table><thead><tr><th>Mode</th><th>Summary</th><th>Description</th></tr></thead><tbody><tr><td>NULL</td><td>NULL</td><td>无访问权限，锁在此级别保持以指示进程对资源感兴趣</td></tr><tr><td>SS</td><td>SubShared</td><td>可以在不被保护的情况下读取资源，其他进程可以读取和写入资源，该锁也称为行共享锁</td></tr><tr><td>SX</td><td>Shared Exclusive</td><td>资源可以在不被保护的情况下读取和写入，这也被称为RX（行独占）锁</td></tr><tr><td>S</td><td>Shared</td><td>进程不能写入资源，但多个进程可以读取它。这是传统的共享锁。</td></tr><tr><td>SSX</td><td>SubShared Exclusive</td><td>只有一个进程可以在此级别持有锁，这确保了每次只能由进程进行修改。其他进程可以执行未受保护的读取。这也被称为SRX（共享行独占）表锁。</td></tr><tr><td>X</td><td>Exclusive</td><td>授予持有进程对资源的独占访问权，其他进程不能读取或写入资源。这也是传统的独占锁。</td></tr></tbody></table><h3 id="1-5-Global-Locks"><a href="#1-5-Global-Locks" class="headerlink" title="1.5 Global Locks"></a><a name="data-Organization"></a>1.5 Global Locks</h3><p>每个节点都有一组资源的信息，Oracle使用哈希算法来确定哪个节点持有资源的目录树信息。全局锁主要有两种类型：</p><pre><code class="hljs">1. GCS用于缓冲区缓存管理的锁，这些被称为PCM锁。2. Oracle在集群内同步以协调非PCM资源的全局锁（全局队列），它们保护队列结构。</code></pre><p>当资源进入实例的SGA时，实例拥有保护资源（即数据块或数据字典条目）的全局锁。</p><p>GES锁控制对数据文件（不是数据块）和控制文件的访问，并且也序列化实例间通信。它们还控制库缓存和字典缓存。例如DDL、DML队列表锁、事务队列以及DDL锁或字典锁。SCN和挂载锁是全局锁。</p><p>事务锁和行锁与单实例数据库相同，唯一的区别是队列是全局队列，查看锁定机制以深入了解Oracle锁定的工作原理。</p><h3 id="1-6-Messaging"><a href="#1-6-Messaging" class="headerlink" title="1.6 Messaging"></a><a name="data-Organization"></a>1.6 Messaging</h3><p>RAC与单实例消息传递之间的区别在于，RAC使用高速互连，而单实例则使用共享内存和信号量，在多CPU架构中，当一个或多个进程希望使用处理器时会用到中断。全局增强系统（GES）使用消息进行实例间通信，这是通过消息和异步陷阱（ASTs）完成的。LMON和LMD都使用消息与其他实例通信，当需要锁时，全局资源目录（GRD）将被更新。可以使用视图V$GES_MISC查看消息流量。</p><p>三路锁消息最多涉及三个实例，包括主实例（M）、持有实例（H）和请求实例（R），具体序列如下所示，其中请求实例R对持有实例H的块B1感兴趣。资源在主实例M中被管理。</p><p><img src="/2025/05/05/note/db/Oracle/RAC/GRD/README/img_1.png" alt="img_1.png"></p><pre><code class="hljs">1. 实例R从GRD获取关于资源的所有权信息，然后实例R向主实例M发送消息请求访问该资源。此消息通过直接发送，因为它至关重要。2. 实例M接收到消息并将其转发给持有实例H。这也通过直接方式发送，这被称为阻塞异步陷阱（BAST）。3. 实例H使用互连将资源发送给实例R，资源被复制到实例R的内存中。4. 一旦在资源上获得了锁句柄，实例R就向实例M发送确认消息。此消息被排队发送，因为它不那么关键，这称为获取异步陷阱（AAST）。</code></pre><p>由于GES严重依赖消息传递，互连必须是高质量的（高性能、低延迟），同时消息保持较小（128字节）以提高性能。交通控制器（TRFC）用于控制集群中实例之间的DLM流量，它使用缓冲来适应大流量。TRFC通过使用票证（序列号）跟踪一切，有一个预定义的票证池，这取决于网络发送缓冲区大小。在发送任何消息之前需要获取一张票证，一旦消息发送出去，票证就会返回到池中，由LMS或LMD执行此操作。如果没有可用的票证，则消息必须等待直到有票证可用。你可以控制票证的数量并查看它们。</p><p><img src="/2025/05/05/note/db/Oracle/RAC/GRD/README/img_2.png" alt="img_2.png"></p><h3 id="1-7-Global-Cache-Services-GCS"><a href="#1-7-Global-Cache-Services-GCS" class="headerlink" title="1.7 Global Cache Services (GCS)"></a><a name="data-Organization"></a>1.7 Global Cache Services (GCS)</h3><p>GCS锁仅保护全局缓存中的数据块（也称为PCM锁），可以在共享或独占模式下获取。每个锁元素可以将其锁角色设置为本地（与单实例相同）或全局。当处于全局角色时，可能有三种锁模式：共享、独占和空。在全局角色模式下，你只能根据该资源的主实例的指示读取或写入数据块。锁和状态信息保存在SGA中，并由GCS维护，这些被称为锁元素。它还持有一系列由相应锁元素覆盖的缓存缓冲区链。这些可以通过v$lock_element查看，参数_db_block_hash_buckets控制哈希缓冲区链桶的数量。</p><p>如上所述，GCS锁使用以下模式。</p><table><thead><tr><th>锁模式</th><th>描述</th></tr></thead><tbody><tr><td>独占 (X)</td><td>在更新或任何DML操作期间使用，如果另一个实例需要具有独占锁的块，则请求GES让第二个实例放弃全局锁。</td></tr><tr><td>共享 (S)</td><td>用于选择操作，读取数据不需要实例放弃全局锁。</td></tr><tr><td>空 (N)</td><td>允许实例在没有权限的情况下保持对块的锁。此模式用于避免频繁创建和销毁锁，只需将一个锁转换为另一个。</td></tr></tbody></table><p>锁角色由Cache Fusion使用，它可以是本地的或全局的。如果块仅在本地缓存中变脏，则资源是本地的；如果块在一个远程缓存或多个远程缓存中变脏，则资源是全局的。当一个块被发送到另一个实例时，该实例会保留一个过去的映像（PI），然后角色变为全局角色，因此PI表示脏缓冲区的状态。节点必须保持PI直到它从主实例接收到写入磁盘已完成的通知覆盖该版本后，节点将记录一个块写入记录（BWR）。我已经在我的备份部分讨论了PI和BWR。</p><p>当新的当前块到达时，先前的PI保持不变以防其他节点需要它。如果有多个PI存在，它们可能会也可能不会合并为单个PI，这取决于主实例根据是否需要旧的PI来决定，可以存在不确定数量的PI。</p><p>在本地角色中，只允许S和X模式。当主实例请求时，持有实例向其他实例提供块的副本。如果块在全球范围内是干净的，此实例锁角色保持本地。如果块被修改（变脏），则保留PI并且锁变为全局。在全局锁角色中，锁模式可以是N、S和X，块是全局的，甚至可能在任何实例中都是脏的，并且磁盘版本可能已过时。感兴趣的一方只能使用X模式修改块，实例不能从磁盘读取因为它可能不是最新的，持有实例可以根据主实例的指示发送副本给其他实例。</p><p>在我的cache_fusion部分有一个完整的详细指南，这将帮助你更好地理解。</p><p>锁元素持有锁状态信息（转换、授予等）。锁元素由锁进程管理以确定锁的模式，它们也保存一系列由锁元素覆盖的缓存缓冲区，允许Oracle数据库跟踪在锁元素（模式）需要降级（X &gt; N）的情况下必须写入磁盘的缓存缓冲区。</p><p><img src="/2025/05/05/note/db/Oracle/RAC/GRD/README/img_3.png" alt="img_3.png"></p><p>锁元素保护缓冲缓存中的所有数据块，下面的列表描述了由LEs使用GCS锁管理的数据块类别（x$bh.class）。</p><p><img src="/2025/05/05/note/db/Oracle/RAC/GRD/README/img_4.png" alt="img_4.png"></p><p>因此，将所有这些放在一起，你得到以下内容：GCS在GRD中管理PCM锁，PCM锁管理全局缓存中的数据块。数据块可以保存在任何一个实例的缓冲缓存（这是全局的）中，如果找不到，则可以通过请求实例从磁盘读取。GCS监控并维护所有实例中块的列表和模式。每个实例将管理一定数量的资源，但一个资源只能由一个实例管理。GCS通过要求实例在修改或读取数据库块之前获取锁来确保缓存一致性。GCS锁不是行级锁，行级锁与PCM锁结合使用。GCS锁确保块由一个实例访问，然后行级锁在行级别管理这些块。如果一个块被修改，所有过去的映像(PI)不再是最新的，需要获得新的副本。</p><p>一致读处理意味着读者永远不会阻塞写者，这与单实例中的情况相同。一个可以帮助的参数是_db_block_max_cr_dba，它限制了缓冲缓存中每个DBA的CR副本数量。如果有太多针对特定缓冲区的CR请求到达，持有者可以放弃该缓冲区上的锁并将缓冲区写入磁盘，这样请求者就可以从磁盘读取它，特别是当请求的块有较旧的SCN并需要重建时（称为CR构造）。这在技术上被称为公平降级转换，参数_fairness_threshold可以用于配置它。</p><p>当CR构造涉及过多工作且缓存中没有当前块或PI块可用于块清除时，lightwork规则会被触发。下面的内容可以用来查看降级转换发生的次数。</p><p><img src="/2025/05/05/note/db/Oracle/RAC/GRD/README/img_5.png" alt="img_5.png"></p><p>GRD是锁和资源的中央存储库，它分布在所有节点上（不是单个节点），但只有一个实例管理一个资源。维护资源信息的过程称为锁主控或资源主控。我在备份部分谈到了锁重新主控。</p><p>资源亲和性允许在其本地节点上对常用资源进行资源主控，它使用动态资源主控来移动资源主的位置。通常，资源主控仅在实例加入或离开RAC环境时发生，从Oracle 10g R2开始，主控发生在对象级别，这有助于细粒度的对象重新主控。可以使用多个参数动态地对对象进行重新主控。</p><p><img src="/2025/05/05/note/db/Oracle/RAC/GRD/README/img_6.png" alt="img_6.png"></p><p>在更改上述任何参数之前，应咨询Oracle。</p>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
      <category>Oracle</category>
      
      <category>RAC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>oracle DBMS_LOCK</title>
    <link href="/2025/05/05/note/db/Oracle/PLSQL/DBMS_LOCK/README/"/>
    <url>/2025/05/05/note/db/Oracle/PLSQL/DBMS_LOCK/README/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>oracle DBMS_LOCK 包</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>DBMS_LOCK包为Oracle锁定管理服务提供了接口。</p><p>您可以请求特定模式的锁，为其分配一个唯一名称，使得该名称在同一实例或其他实例中的另一个进程中可被识别，<br>进而改变锁的模式并释放该锁。</p><p>本章包含以下内容：</p><table><thead><tr><th>Chapter Contents</th></tr></thead><tbody><tr><td><a href="#Overview">1. 概述</a></td></tr><tr><td><a href="#Security-Model">2. 安全模型</a></td></tr><tr><td><a href="#Constants">3. 常量</a></td></tr><tr><td><a href="#Rules-and-Limits">4. 规则与限制</a></td></tr><tr><td><a href="#Operational-Notes">5. 操作注意事项</a></td></tr><tr><td><a href="#Summary-of-DBMS_LOCK-Subprograms">6. DBMS_LOCK子程序摘要</a></td></tr><tr><td><a href="#USE-of-DBMS_LOCK">7. 使用Oracle锁定管理服务（用户锁）</a></td></tr></tbody></table><p>另请参阅：</p><p>欲了解更多详细信息及如何使用DBMS_LOCK包的示例，请参考《Oracle数据库开发人员指南》。</p><h3 id="1-DBMS-LOCK-概述"><a href="#1-DBMS-LOCK-概述" class="headerlink" title="1. DBMS_LOCK 概述"></a><a name="Overview"></a>1. DBMS_LOCK 概述</h3><p>DBMS_LOCK包有许多有益的用途，包括以下方面：</p><ol><li><p>为设备（如终端）提供独占访问权限。</p></li><li><p>在应用级别实施读取锁的强制执行。</p></li><li><p>检测锁何时释放及在应用程序后进行清理。</p></li><li><p>同步应用程序并强制执行顺序处理。</p></li></ol><h3 id="2-DBMS-LOCK-安全模型"><a href="#2-DBMS-LOCK-安全模型" class="headerlink" title="2. DBMS_LOCK 安全模型"></a><a name="Security-Model"></a>2. DBMS_LOCK 安全模型</h3><p>可能存在操作系统特定的限制，影响可获得的最大锁总数。在使用锁或向其他用户开放此包时，必须考虑这一点。<br>可以考虑仅向特定用户或角色授予执行权限。</p><p>一个更好的替代方案是创建一个封装包，限制所使用的锁的数量，并仅向特定用户授予执行权限。<br>封装包的一个示例在DBMS_LOCK.SQL包规范文件中有记录。这些锁在企业管理器监控中显示的缩写形式也在括号中进行了说明。</p><h3 id="3-DBMS-LOCK-常量"><a href="#3-DBMS-LOCK-常量" class="headerlink" title="3. DBMS_LOCK 常量"></a><a name="Constants"></a>3. DBMS_LOCK 常量</h3><p>DBMS_LOCK包包含了一些常量，用于在指定参数值时使用。这些常量在下表中展示。</p><p>Table 94-1 DBMS_LOCK Constants</p><table><thead><tr><th>Name</th><th>Alternate Name(s)</th><th>Type</th><th>Value</th><th>OEM Abbreviation(OEM缩写)</th><th>Description</th></tr></thead><tbody><tr><td>NL_MODE</td><td>NuL1</td><td>INTEGER</td><td>1</td><td>-</td><td>-</td></tr><tr><td>SS_MODE</td><td>Sub Shared</td><td>INTEGER</td><td>2</td><td>ULRS</td><td>这可用于聚合对象上，以指示正在对对象的各个子部分获取共享锁。</td></tr><tr><td>SX_MODE</td><td>1.Sub eXclusive  2.Row Exclusive Mode</td><td>INTEGER</td><td>3</td><td>ULRX</td><td>这可用于聚合对象，以表明正在对对象的各子部分获取排他锁。</td></tr><tr><td>S_MODE</td><td>1.Shared  2.Row Exclusive Mode 3. Intended Exclusive</td><td>INTEGER</td><td>4</td><td>ULRSX</td><td>-</td></tr><tr><td>SSX_MODE</td><td>1.Shared Sub eXclusive  2.Share Row Exclusive Mode</td><td>INTEGER</td><td>5</td><td>-</td><td>这表示整个聚合对象已被共享锁锁定，但该对象的部分子集可能还额外持有排他锁。</td></tr><tr><td>X_MODE</td><td>Exclusive</td><td>INTEGER</td><td>6</td><td>ULX</td><td>-</td></tr></tbody></table><p>这些是不同的锁模式：</p><ul><li><strong>nl（NuLl）</strong>：无锁模式，</li><li><strong>ss（Sub Shared）</strong>：子共享锁，</li><li><strong>sx（Sub eXclusive）</strong>：子独占锁，</li><li><strong>s（Shared）</strong>：共享锁，</li><li><strong>ssx（Shared Sub eXclusive）</strong>：共享子独占锁，</li><li><strong>x（eXclusive）</strong>：独占锁。</li></ul><h3 id="4-DBMS-LOCK-规则与限制"><a href="#4-DBMS-LOCK-规则与限制" class="headerlink" title="4. DBMS_LOCK 规则与限制"></a><a name="Rules-and-Limits"></a>4. DBMS_LOCK 规则与限制</h3><p>当另一个进程持有“held”时，尝试获取“get”的操作会成功或失败，这取决于持有的模式和get的类型。</p><p>下表描述了这些结果：</p><table><thead><tr><th>HELD MODE</th><th>GET NL</th><th>GET SS</th><th>GET SX</th><th>GET S</th><th>GET SSX</th><th>GET X</th></tr></thead><tbody><tr><td>NL</td><td>&check;</td><td>&check;</td><td>&check;</td><td>&check;</td><td>&check;</td><td>&check;</td></tr><tr><td>SS</td><td>&check;</td><td>&check;</td><td>&check;</td><td>&check;</td><td>&check;</td><td>&times;</td></tr><tr><td>SX</td><td>&check;</td><td>&check;</td><td>&check;</td><td>&times;</td><td>&times;</td><td>&times;</td></tr><tr><td>S</td><td>&check;</td><td>&check;</td><td>&times;</td><td>&check;</td><td>&times;</td><td>&times;</td></tr><tr><td>SSX</td><td>&check;</td><td>&check;</td><td>&times;</td><td>&times;</td><td>&times;</td><td>&times;</td></tr><tr><td>X</td><td>&check;</td><td>&times;</td><td>&times;</td><td>&times;</td><td>&times;</td><td>&times;</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">maxwait  constant <span class="hljs-type">integer</span> :<span class="hljs-operator">=</span> <span class="hljs-number">32767</span>;<br></code></pre></td></tr></table></figure><p>常量maxwait表示永久等待。</p><h3 id="5-DBMS-LOCK-操纵注意事项"><a href="#5-DBMS-LOCK-操纵注意事项" class="headerlink" title="5. DBMS_LOCK 操纵注意事项"></a><a name="Operational-Notes"></a>5. DBMS_LOCK 操纵注意事项</h3><p>用户锁与Oracle锁永远不会发生冲突，因为它们以”UL”前缀标识。您可以使用企业管理器的锁监视屏幕或相应的固定视图来查看这些锁。</p><p>用户锁会在会话终止时自动释放。锁标识符是一个介于0到1073741823之间的数字。</p><p>由于预留的用户锁与Oracle锁相同，它具有Oracle锁的所有功能，例如死锁检测。<br>请确保在分布式事务中使用的任何用户锁在COMMIT时被释放，否则可能会发生未检测到的死锁。</p><p>DBMS_LOCK在每个会话限制为几百个锁时效率最高。Oracle强烈建议您制定使用这些锁的标准约定，<br>以避免尝试使用相同锁的程序之间发生冲突。例如，可以将公司名称作为锁名的一部分包含在内。</p><h3 id="6-DBMS-LOCK-子程序摘要"><a href="#6-DBMS-LOCK-子程序摘要" class="headerlink" title="6. DBMS_LOCK 子程序摘要"></a><a name="Summary-of-DBMS_LOCK-Subprograms"></a>6. DBMS_LOCK 子程序摘要</h3><p>此表列出了DBMS_LOCK子程序并简要描述了它们。</p><table><thead><tr><th>Subprogram</th><th>Description</th></tr></thead><tbody><tr><td><a href="#ALLOCATE_UNIQUE">6.1 ALLOCATE_UNIQUE 过程</a></td><td>分配给命名锁的一个唯一锁ID</td></tr><tr><td><a href="#ALLOCATE_UNIQUE_AUTONOMOUS">6.2 ALLOCATE_UNIQUE_AUTONOMOUS 过程</a></td><td>分配给命名锁的一个唯一锁ID</td></tr><tr><td><a href="#CONVERT">6.3 CONVERT 函数</a></td><td>将锁从一种模式转换为另一种模式</td></tr><tr><td><a href="#RELEASE">6.4 RELEASE 函数</a></td><td>释放一个锁</td></tr><tr><td><a href="#REQUEST">6.5 REQUEST 函数</a></td><td>请求特定模式的锁</td></tr><tr><td><a href="#SLEEP">6.6 SLEEP 过程</a></td><td>让会话睡眠指定的时间</td></tr></tbody></table><h4 id="6-1-ALLOCATE-UNIQUE-过程"><a href="#6-1-ALLOCATE-UNIQUE-过程" class="headerlink" title="6.1 ALLOCATE_UNIQUE 过程"></a><a name="ALLOCATE_UNIQUE"></a>6.1 ALLOCATE_UNIQUE 过程</h4><p>此过程为指定的锁名分配一个唯一的锁标识符（范围在1073741824到1999999999之间）。<br>锁标识符用于使应用程序能够协调它们对锁的使用。这是因为它可能使得应用程序基于锁名称而非锁编号来协调它们的锁使用更为简便。</p><p>句法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">DBMS_LOCK.ALLOCATE_UNIQUE (<br>   lockname         <span class="hljs-keyword">IN</span>  VARCHAR2,<br>   lockhandle       <span class="hljs-keyword">OUT</span> VARCHAR2,<br>   expiration_secs  <span class="hljs-keyword">IN</span>  <span class="hljs-type">INTEGER</span>   <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">864000</span>);<br></code></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td>lockname</td><td>您想为其生成唯一ID的锁的名称。<br> 不要使用以ORA$开头的锁名称；这些名称保留给Oracle提供的产品使用。</td></tr><tr><td>lockhandle</td><td>返回由ALLOCATE_UNIQUE生成的锁ID的句柄。<br> 您可以在后续的REQUEST、CONVERT和RELEASE调用中使用这个句柄。 <br> 返回句柄而不是实际的锁ID是为了减少因编程错误意外创建了不正确但有效的锁ID的可能性。这为使用此包的不同应用程序之间提供了更好的隔离。<br> LOCKHANDLE可以是长度最多为VARCHAR2(128)的字符串。<br>所有使用ALLOCATE_UNIQUE相同锁名返回的锁句柄的会话都指的是同一个锁。因此，请不要在不同会话之间传递锁句柄。</td></tr><tr><td>expiration_specs</td><td>在允许从DBMS_LOCK_ALLOCATED表中删除指定锁之前，自上次对该锁执行ALLOCATE_UNIQUE后需要等待的秒数。 <br> 默认的等待期限是10天。你不应该从这个表中手动删除锁。后续对ALLOCATE_UNIQUE的调用可能会删除过期的锁以回收空间。</td></tr></tbody></table><p>使用说明</p><p>如果您选择通过名称来识别锁，可以使用ALLOCATE_UNIQUE为这些命名锁生成一个唯一的锁标识号。</p><p>首个使用新锁名调用ALLOCATE_UNIQUE的会话将导致生成一个唯一的锁ID，并将其存储在dbms_lock_allocated表中。<br>随后的调用（通常由其他会话发起）将返回之前生成的锁ID。</p><p>至少在最后一次针对指定锁名调用ALLOCATE_UNIQUE之后的expiration_secs（默认为10天）期间，锁名会与返回的锁ID关联。<br>在此时间之后，为了回收空间，该锁名在dbms_lock_allocated表中的行可能会被删除。ALLOCATE_UNIQUE执行一次提交操作。</p><p><strong>警告：命名用户锁可能效率较低，因为Oracle需使用SQL来确定与指定名称相关的锁。</strong></p><p>异常：</p><p>ORA-20000, ORU-10003: 无法在dbms_lock_allocated目录中查找或插入锁<lockname>。</lockname></p><h4 id="6-2-ALLOCATE-UNIQUE-AUTONOMOUS-过程"><a href="#6-2-ALLOCATE-UNIQUE-AUTONOMOUS-过程" class="headerlink" title="6.2 ALLOCATE_UNIQUE_AUTONOMOUS 过程"></a><a name="ALLOCATE_UNIQUE_AUTONOMOUS"></a>6.2 ALLOCATE_UNIQUE_AUTONOMOUS 过程</h4><p>此过程为指定的锁名分配一个唯一的锁标识符（范围在1073741824到1999999999之间）。<br>锁标识符用于使应用程序能够协调它们对锁的使用。这是因为它可能使得应用程序基于锁名称而非锁编号来协调它们的锁使用更为简便。</p><p>句法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">DBMS_LOCK.ALLOCATE_UNIQUE_AUTONOMOUS (<br>   lockname         <span class="hljs-keyword">IN</span>  VARCHAR2,<br>   lockhandle       <span class="hljs-keyword">OUT</span> VARCHAR2,<br>   expiration_secs  <span class="hljs-keyword">IN</span>  <span class="hljs-type">INTEGER</span>   <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">864000</span>);<br></code></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td>lockname</td><td>您想为其生成唯一ID的锁的名称。<br> 不要使用以ORA$开头的锁名称；这些名称保留给Oracle提供的产品使用。</td></tr><tr><td>lockhandle</td><td>返回由ALLOCATE_UNIQUE_AUTONOMOUS生成的锁ID的句柄。<br> 您可以在后续的REQUEST、CONVERT和RELEASE调用中使用这个句柄。 <br> 返回句柄而不是实际的锁ID是为了减少因编程错误意外创建了不正确但有效的锁ID的可能性。这为使用此包的不同应用程序之间提供了更好的隔离。<br> LOCKHANDLE可以是长度最多为VARCHAR2(128)的字符串。<br>所有使用ALLOCATE_UNIQUE_AUTONOMOUS相同锁名返回的锁句柄的会话都指的是同一个锁。因此，请不要在不同会话之间传递锁句柄。</td></tr><tr><td>expiration_specs</td><td>在允许从DBMS_LOCK_ALLOCATED表中删除指定锁之前，自上次对该锁执行ALLOCATE_UNIQUE_AUTONOMOUS后需要等待的秒数。 <br> 默认的等待期限是10天。你不应该从这个表中手动删除锁。后续对ALLOCATE_UNIQUE_AUTONOMOUS的调用可能会删除过期的锁以回收空间。</td></tr></tbody></table><p>使用说明</p><p>如果您选择通过名称来识别锁，可以使用ALLOCATE_UNIQUE_AUTONOMOUS为这些命名锁生成一个唯一的锁标识号。</p><p>首个使用新锁名调用ALLOCATE_UNIQUE_AUTONOMOUS的会话将导致生成一个唯一的锁ID，并将其存储在dbms_lock_allocated表中。<br>随后的调用（通常由其他会话发起）将返回之前生成的锁ID。</p><p>至少在最后一次针对指定锁名调用ALLOCATE_UNIQUE_AUTONOMOUS之后的expiration_secs（默认为10天）期间，锁名会与返回的锁ID关联。<br>在此时间之后，为了回收空间，该锁名在dbms_lock_allocated表中的行可能会被删除。ALLOCATE_UNIQUE_AUTONOMOUS执行一次提交操作。</p><p><strong>警告：命名用户锁可能效率较低，因为Oracle需使用SQL来确定与指定名称相关的锁。</strong></p><p>异常：</p><p>ORA-20000, ORU-10003: 无法在dbms_lock_allocated目录中查找或插入锁<lockname>。</lockname></p><h4 id="6-3-CONVERT-函数"><a href="#6-3-CONVERT-函数" class="headerlink" title="6.3 CONVERT 函数"></a><a name="CONVERT"></a>6.3 CONVERT 函数</h4><p>此函数将锁从一种模式转换为另一种模式。CONVERT 是一个重载函数，它可以接受用户定义的<br>锁标识符，或是由 ALLOCATE_UNIQUE 过程返回的锁句柄。</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">DBMS_LOCK.CONVERT(<br>   id         <span class="hljs-keyword">IN</span> <span class="hljs-type">INTEGER</span> <span class="hljs-operator">||</span> <br>   lockhandle <span class="hljs-keyword">IN</span> VARCHAR2,<br>   lockmode   <span class="hljs-keyword">IN</span> <span class="hljs-type">INTEGER</span>,<br>   timeout    <span class="hljs-keyword">IN</span> NUMBER <span class="hljs-keyword">DEFAULT</span> MAXWAIT)<br>  <span class="hljs-keyword">RETURN</span> <span class="hljs-type">INTEGER</span>;<br></code></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td>id or lockhandle</td><td>用户分配的锁标识符，取值范围从0到1073741823，或你想要更改其模式的锁的锁句柄，该锁句柄由ALLOCATE_UNIQUE过程返回。</td></tr><tr><td>lockmode</td><td>你想要分配给指定锁的新模式。<br> 可用模式及其关联的整数标识符，请参见常量。</td></tr><tr><td>timeout</td><td>继续尝试改变锁模式的秒数。<br>如果在这个时间段内无法转换锁模式，则调用将返回1（表示超时）。</td></tr></tbody></table><p>返回值：</p><table><thead><tr><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>成功</td></tr><tr><td>1</td><td>超时</td></tr><tr><td>2</td><td>死锁</td></tr><tr><td>3</td><td>参数错误</td></tr><tr><td>4</td><td>未拥有由id或lockhandle指定的锁</td></tr><tr><td>5</td><td>非法的锁句柄</td></tr></tbody></table><h4 id="6-4-RELEASE-函数"><a href="#6-4-RELEASE-函数" class="headerlink" title="6.4 RELEASE 函数"></a><a name="RELEASE"></a>6.4 RELEASE 函数</h4><p>此函数显式释放先前使用REQUEST函数获取的锁。</p><p>锁会在会话结束时自动释放。RELEASE是一个重载函数，它可以接受用户定义的锁标识符，或者是ALLOCATE_UNIQUE过程返回的锁句柄。</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">DBMS_LOCK.RELEASE (<br>   id         <span class="hljs-keyword">IN</span> <span class="hljs-type">INTEGER</span>)<br>  <span class="hljs-keyword">RETURN</span> <span class="hljs-type">INTEGER</span>;<br><br>DBMS_LOCK.RELEASE (<br>   lockhandle <span class="hljs-keyword">IN</span> VARCHAR2)<br>  <span class="hljs-keyword">RETURN</span> <span class="hljs-type">INTEGER</span>;<br></code></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td>id or lockhandle</td><td>用户分配的锁标识符，取值范围从0到1073741823，或你想更改其模式的锁的锁句柄，该锁句柄由ALLOCATE_UNIQUE过程返回。</td></tr></tbody></table><p>返回值：</p><table><thead><tr><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>成功</td></tr><tr><td>3</td><td>参数错误</td></tr><tr><td>4</td><td>未拥有由id或lockhandle指定的锁</td></tr><tr><td>5</td><td>非法的锁句柄</td></tr></tbody></table><h4 id="6-5-REQUEST-函数"><a href="#6-5-REQUEST-函数" class="headerlink" title="6.5 REQUEST 函数"></a><a name="REQUEST"></a>6.5 REQUEST 函数</h4><p>此函数请求具有指定模式的锁。</p><p>REQUEST是一个重载函数，它可以接受用户定义的锁标识符，或者是ALLOCATE_UNIQUE过程返回的锁句柄。</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">DBMS_LOCK.REQUEST(<br>   id                 <span class="hljs-keyword">IN</span>  <span class="hljs-type">INTEGER</span> <span class="hljs-operator">||</span><br>   lockhandle         <span class="hljs-keyword">IN</span>  VARCHAR2,<br>   lockmode           <span class="hljs-keyword">IN</span>  <span class="hljs-type">INTEGER</span> <span class="hljs-keyword">DEFAULT</span> X_MODE,<br>   timeout            <span class="hljs-keyword">IN</span>  <span class="hljs-type">INTEGER</span> <span class="hljs-keyword">DEFAULT</span> MAXWAIT,<br>   release_on_commit  <span class="hljs-keyword">IN</span>  <span class="hljs-type">BOOLEAN</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">FALSE</span>)<br>  <span class="hljs-keyword">RETURN</span> <span class="hljs-type">INTEGER</span>;<br></code></pre></td></tr></table></figure><p>当前的默认值，如X_MODE和MAXWAIT，是在DBMS_LOCK包规范中定义的。</p><p>参数：</p><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td>id or lockhandle</td><td>用户分配的锁标识符，取值范围从0到1073741823，或你想要更改其模式的锁的锁句柄，该锁句柄由ALLOCATE_UNIQUE过程返回。</td></tr><tr><td>lockmode</td><td>你想要分配给指定锁的新模式。<br> 可用模式及其关联的整数标识符，请参见常量。</td></tr><tr><td>timeout</td><td>继续尝试授予锁的秒数。如果在这段时间内无法授予锁，则调用将返回值1（超时）。</td></tr><tr><td>release_on_commit</td><td>将此参数设置为TRUE可在提交或回滚时释放锁。<br> 否则，锁将一直保持直到被显式释放或会话结束。</td></tr></tbody></table><p>返回值：</p><table><thead><tr><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>成功</td></tr><tr><td>1</td><td>超时</td></tr><tr><td>2</td><td>死锁</td></tr><tr><td>3</td><td>参数错误</td></tr><tr><td>4</td><td>未拥有由id或lockhandle指定的锁</td></tr><tr><td>5</td><td>非法的锁句柄</td></tr></tbody></table><h4 id="6-6-SLEEP-过程"><a href="#6-6-SLEEP-过程" class="headerlink" title="6.6 SLEEP 过程"></a><a name="SLEEP"></a>6.6 SLEEP 过程</h4><p>此过程使会话暂停指定的一段时间。</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">DBMS_LOCK.SLEEP (<br>   seconds  <span class="hljs-keyword">IN</span> NUMBER);<br></code></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td>seconds</td><td>暂停会话的时间长度，以秒为单位。<br> 最小的时间增量可以输入到百分之一秒；例如，1.95 是一个合法的时间值。</td></tr></tbody></table><h3 id="7-使用Oracle锁定管理服务（用户锁）"><a href="#7-使用Oracle锁定管理服务（用户锁）" class="headerlink" title="7. 使用Oracle锁定管理服务（用户锁）"></a><a name="USE-of-DBMS_LOCK"></a>7. 使用Oracle锁定管理服务（用户锁）</h3><p>您的应用程序可以通过调用DBMS_LOCK包中的子程序来使用Oracle锁定管理服务（用户锁）。</p><p>一个应用程序可以请求特定模式的锁，给予它一个唯一名称（在同一个或另一个实例中的另一个子程序中可识别），改变锁的模式，并释放它。<br>因为保留的用户锁是Oracle数据库锁，所以它具有数据库锁的所有特性，比如死锁检测。</p><p>确保在分布式事务中使用的任何用户锁在COMMIT时都会被释放，否则可能会发生未被检测到的死锁。</p><table><thead><tr><th>Topic</th></tr></thead><tbody><tr><td><a href="#WHEN_TO_USE">7.1 何时使用用户锁</a></td></tr><tr><td><a href="#HOW_TO_LOOK">7.2 查看与监控锁</a></td></tr></tbody></table><h4 id="7-1-何时使用用户锁"><a href="#7-1-何时使用用户锁" class="headerlink" title="7.1 何时使用用户锁"></a><a name="WHEN_TO_USE"></a>7.1 何时使用用户锁</h4><p>用户锁可以协助实现以下功能：</p><ol><li><p>为设备提供独占访问：如终端的独占使用。</p></li><li><p>在应用层实施读取锁控制。</p></li><li><p>检测锁释放并进行应用后的清理。</p></li><li><p>同步应用程序并强制顺序处理。</p></li></ol><p>示例8-2演示了Pro*COBOL预编译器如何使用锁来确保当多人必须访问同一设备时，不会发生冲突。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <br><span class="hljs-operator">*</span> Print <span class="hljs-keyword">Check</span>                                                    <span class="hljs-operator">*</span> <br><span class="hljs-operator">*</span> <span class="hljs-keyword">Any</span> cashier may issue a refund <span class="hljs-keyword">to</span> a customer returning goods.  <span class="hljs-operator">*</span> <br><span class="hljs-operator">*</span> Refunds under $<span class="hljs-number">50</span> <span class="hljs-keyword">are</span> given <span class="hljs-keyword">in</span> cash, more than $<span class="hljs-number">50</span> <span class="hljs-keyword">by</span> check.   <span class="hljs-operator">*</span> <br><span class="hljs-operator">*</span> This code prints the check. <span class="hljs-keyword">One</span> printer <span class="hljs-keyword">is</span> opened <span class="hljs-keyword">by</span> <span class="hljs-keyword">all</span>       <span class="hljs-operator">*</span> <br><span class="hljs-operator">*</span> the cashiers <span class="hljs-keyword">to</span> avoid the overhead <span class="hljs-keyword">of</span> opening <span class="hljs-keyword">and</span> closing it   <span class="hljs-operator">*</span> <br><span class="hljs-operator">*</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">every</span> <span class="hljs-keyword">check</span>, meaning that lines <span class="hljs-keyword">of</span> output <span class="hljs-keyword">from</span> multiple    <span class="hljs-operator">*</span> <br><span class="hljs-operator">*</span> cashiers can become interleaved if you do <span class="hljs-keyword">not</span> ensure exclusive <span class="hljs-operator">*</span> <br><span class="hljs-operator">*</span> access <span class="hljs-keyword">to</span> the printer. The DBMS_LOCK package <span class="hljs-keyword">is</span> used <span class="hljs-keyword">to</span>        <span class="hljs-operator">*</span> <br><span class="hljs-operator">*</span> ensure exclusive access.                                       <span class="hljs-operator">*</span> <br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <br>打印支票<br>任何收银员均可向退货的顾客发放退款。 <br>退款金额低于<span class="hljs-number">50</span>美元的以现金形式给予，超过<span class="hljs-number">50</span>美元则开具支票。 <br>本代码用于打印支票。所有收银员共用一台打印机以避免为每张支票打开和关闭所带来的开销，<br>这意味着如果不对打印机进行独占访问控制，来自多个收银员的输出行可能会相互交织。 <br>使用DBMS_LOCK包来确保对打印机的独占访问。<br><br><span class="hljs-keyword">CHECK</span><span class="hljs-operator">-</span>PRINT <br><span class="hljs-operator">*</span>    <span class="hljs-keyword">Get</span> the lock &quot;handle&quot; <span class="hljs-keyword">for</span> the printer lock. <br>   MOVE &quot;CHECKPRINT&quot; <span class="hljs-keyword">TO</span> LOCKNAME<span class="hljs-operator">-</span>ARR. <br>   MOVE <span class="hljs-number">10</span> <span class="hljs-keyword">TO</span> LOCKNAME<span class="hljs-operator">-</span>LEN. <br>   <span class="hljs-keyword">EXEC</span> <span class="hljs-keyword">SQL</span> <span class="hljs-keyword">EXECUTE</span> <br>      <span class="hljs-keyword">BEGIN</span> DBMS_LOCK.ALLOCATE_UNIQUE ( :LOCKNAME, :LOCKHANDLE ); <br>      <span class="hljs-keyword">END</span>; <span class="hljs-keyword">END</span><span class="hljs-operator">-</span>EXEC. <br><span class="hljs-operator">*</span>   Lock the printer <span class="hljs-keyword">in</span> exclusive mode (<span class="hljs-keyword">default</span> mode).<br>   <span class="hljs-keyword">EXEC</span> <span class="hljs-keyword">SQL</span> <span class="hljs-keyword">EXECUTE</span> <br>      <span class="hljs-keyword">BEGIN</span> DBMS_LOCK.REQUEST ( :LOCKHANDLE ); <br>      <span class="hljs-keyword">END</span>; <span class="hljs-keyword">END</span><span class="hljs-operator">-</span>EXEC. <br><span class="hljs-operator">*</span>   You now have exclusive use <span class="hljs-keyword">of</span> the printer, print the check. <br>  ... <br><span class="hljs-operator">*</span>   Unlock the printer so other people can use it <br><span class="hljs-keyword">EXEC</span> <span class="hljs-keyword">SQL</span> <span class="hljs-keyword">EXECUTE</span> <br>      <span class="hljs-keyword">BEGIN</span> DBMS_LOCK.RELEASE ( :LOCKHANDLE ); <br>      <span class="hljs-keyword">END</span>; <span class="hljs-keyword">END</span><span class="hljs-operator">-</span>EXEC.<br></code></pre></td></tr></table></figure><h4 id="7-2-查看与监控锁"><a href="#7-2-查看与监控锁" class="headerlink" title="7.2 查看与监控锁"></a><a name="HOW_TO_LOOK"></a>7.2 查看与监控锁</h4><p>表8-3描述了Oracle数据库中用于显示实例内正在进行的事务锁定信息的设施。</p><table><thead><tr><th>Tool</th><th>Description</th></tr></thead><tbody><tr><td>性能监控数据字典视图</td><td><a href="https://docs.oracle.com/en/database/oracle/oracle-database/12.2/admin/monitoring-the-database.html#GUID-93C0C7B2-33E1-4733-909F-1CDCAC636791">https://docs.oracle.com/en/database/oracle/oracle-database/12.2/admin/monitoring-the-database.html#GUID-93C0C7B2-33E1-4733-909F-1CDCAC636791</a></td></tr><tr><td>UTLLOCKT.SQL</td><td>UTLLOCKT.SQL 脚本用于以树状结构的方式展示一个简单的字符锁等待图。通过任何SQL工具（如SQL*Plus）运行此脚本，它会打印系统中正在等待锁的会话以及相应的阻塞锁。该脚本文件的位置取决于操作系统。（在使用UTLLOCKT.SQL之前，必须先运行CATBLOCK.SQL脚本。）</td></tr></tbody></table><p>你可以查询一组数据字典视图来监控Oracle数据库实例。</p><p>这些视图的范围较为广泛。针对特定进程的其他视图，则会在本书描述该进程的部分进行讨论。</p><table><thead><tr><th>视图</th><th>描述</th></tr></thead><tbody><tr><td>V$LOCK</td><td>列出Oracle数据库当前持有的锁及待处理的锁或 latch 请求</td></tr><tr><td>DBA_BLOCKERS</td><td>显示持有对象锁导致其他会话等待的会话</td></tr><tr><td>DBA_WAITERS</td><td>显示等待对象锁的会话</td></tr><tr><td>DBA_DDL_LOCKS</td><td>列出DDL锁及待处理的DDL锁请求</td></tr><tr><td>DBA_DML_LOCKS</td><td>列出DML锁及待处理的DML锁请求</td></tr><tr><td>DBA_LOCK</td><td>列出所有锁及待处理的锁或 latch 请求</td></tr><tr><td>DBA_LOCK_INTERNAL</td><td>显示每条事务的锁详情及待处理的锁请求</td></tr><tr><td>V$SESSION_WAIT</td><td>列出活跃会话正在等待的资源或事件</td></tr><tr><td>V$SYSSTAT</td><td>包含会话统计信息</td></tr><tr><td>V$RESOURCE_LIMIT</td><td>提供系统资源当前使用与最大限制信息</td></tr><tr><td>V$SQLAREA</td><td>包含共享SQL区域统计信息，每个SQL字符串一行，及已解析和执行的SQL统计信息</td></tr><tr><td>V$LATCH</td><td>包含非顶层 latch 统计数据及顶层 latch 的汇总统计</td></tr></tbody></table><p>|</p>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
      <category>Oracle</category>
      
      <category>package</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL Locking Functions</title>
    <link href="/2025/05/05/note/db/mysql/LockFunc/README/"/>
    <url>/2025/05/05/note/db/mysql/LockFunc/README/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>MySQL Locking Functions</p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/locking-functions.html">https://dev.mysql.com/doc/refman/8.0/en/locking-functions.html</a></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>本章包含以下内容：</p><table><thead><tr><th>Chapter Contents</th></tr></thead><tbody><tr><td><a href="#ch1">1. GET_LOCK</a></td></tr><tr><td><a href="#ch2">2. IS_FREE_LOCK</a></td></tr><tr><td><a href="#ch3">3. IS_USED_LOCK</a></td></tr><tr><td><a href="#ch4">4. RELEASE_ALL_LOCKS</a></td></tr><tr><td><a href="#ch5">5. RELEASE_LOCK</a></td></tr><tr><td><a href="#ch6">6. 总结</a></td></tr></tbody></table><p>以下是内容简介：</p><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>GET_LOCK()</td><td>Get a named lock</td></tr><tr><td>IS_FREE_LOCK()</td><td>Whether the named lock is free</td></tr><tr><td>IS_USED_LOCK()</td><td>Whether the named lock is in use; return connection identifier if true</td></tr><tr><td>RELEASE_ALL_LOCKS()</td><td>Release all current named locks</td></tr><tr><td>RELEASE_LOCK()</td><td>Release the named lock</td></tr></tbody></table><h3 id="1-GET-LOCK-str-timeout"><a href="#1-GET-LOCK-str-timeout" class="headerlink" title="1. GET_LOCK(str,timeout)"></a><a name="ch1"></a>1. GET_LOCK(str,timeout)</h3><p>尝试使用由字符串 str 给定的名称获取一个锁，并使用 timeout 秒作为超时时间。<br>负的超时值表示无限超时。该锁是exclusive模式。当被一个会话持有时，其他会话不能获得相同名称的锁。</p><p>如果成功获得锁，则返回 1；如果尝试超时（例如，因为另一个客户端之前已锁定该名称），则返回 0；<br>如果发生错误（如内存不足或线程被 mysqladmin kill 命令终止），则返回 NULL。</p><p>通过 GET_LOCK() 获得的锁可以通过执行 RELEASE_LOCK() 显式释放，<br>或者在会话结束时（无论是正常还是异常）隐式释放。<strong>通过 GET_LOCK() 获得的锁在事务提交或回滚时不会被释放。</strong></p><p>GET_LOCK() 使用元数据锁定 (MDL) 子系统实现。可以同时获得多个锁，并且 GET_LOCK() 不会释放任何现有的锁。<br>例如，假设你执行以下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> GET_LOCK(<span class="hljs-string">&#x27;lock1&#x27;</span>,<span class="hljs-number">10</span>);<br><span class="hljs-keyword">SELECT</span> GET_LOCK(<span class="hljs-string">&#x27;lock2&#x27;</span>,<span class="hljs-number">10</span>);<br><span class="hljs-keyword">SELECT</span> RELEASE_LOCK(<span class="hljs-string">&#x27;lock2&#x27;</span>);<br><span class="hljs-keyword">SELECT</span> RELEASE_LOCK(<span class="hljs-string">&#x27;lock1&#x27;</span>);<br></code></pre></td></tr></table></figure><p>第二个 GET_LOCK() 获得第二个锁，并且两个 RELEASE_LOCK() 调用都返回 1（成功）。</p><p>甚至可以在给定会话中对同一名称多次获得锁。直到获取会话释放所有对该名称的锁，其他会话才能获得该名称的锁。</p><p>通过 GET_LOCK() 获得的唯一命名锁会出现在 Performance Schema 的 metadata_locks 表中。<br>OBJECT_TYPE 列显示 USER LEVEL LOCK，OBJECT_NAME 列指示锁的名称。<br>如果有多个锁对同一名称进行获取，只有第一个锁为该名称注册一行到 metadata_locks 表中。<br>后续对该名称的锁会增加锁中的计数器，但不会获取额外的元数据锁。当最后一个锁实例在该名称上释放时，<br>该名称的 metadata_locks 行将被删除。</p><p>能够获取多个锁意味着客户端之间可能存在死锁。当发生这种情况时，<br>服务器会选择一个调用者并以其 ER_USER_LOCK_DEADLOCK 错误终止其锁获取请求。此错误不会导致事务回滚。</p><p>MySQL 对锁名称的最大长度强制限制为 64 个字符。</p><p>GET_LOCK() 可用于实现应用程序锁或模拟记录锁。名称是在服务器范围内锁定的。如果在一个会话中已经锁定了某个名称，<br>GET_LOCK() 将阻止任何其他会话对该名称发出的锁请求。这使得同意某一给定锁名称的客户端可以使用该名称进行协作式<br>的建议锁定。但要注意的是，这也允许不属于合作客户端集的一个客户端无意或故意锁定一个名称，从而阻止任何合作<br>客户端锁定该名称。减少这种情况可能性的一种方法是使用特定于数据库或应用程序的锁名称。例如，使用<br>形式为 db_name.str 或 app_name.str 的锁名称。</p><p>如果有多个客户端正在等待一个锁，他们获取锁的顺序是未定义的。应用程序不应假设客户端按照它们<br>发出锁请求的顺序获取锁。</p><p>GET_LOCK() 在基于语句的复制中是不安全的。如果你在 binlog_format 设置为 STATEMENT 时使用此函数，则会记录一条警告。</p><p>由于 GET_LOCK() 仅在单个 mysqld 上建立锁，因此不适合与 NDB Cluster 一起使用，因为没有方法在多个 MySQL 服务<br>器之间强制执行 SQL 锁。更多信息请参阅第 25.2.7.10 节，“与多个 NDB 集群节点相关的限制”。</p><pre><code class="hljs">**注意**由于能够获取多个命名锁，单个语句可能会获得大量锁。例如：INSERT INTO ... SELECT GET_LOCK(t1.col_name) FROM t1;这类语句可能会产生某些不良影响。例如，如果语句在执行过程中部分失败并回滚，则到失败点为止已获得的锁仍然存在。如果意图是使插入的行与获得的锁之间存在对应关系，则该意图无法实现。此外，如果锁必须按照特定顺序授予，请注意结果集的顺序可能因优化器选择的执行计划而异。基于这些原因，最好将应用程序限制为每个语句只调用一次锁获取。</code></pre><p>还提供了一个不同的锁定接口，作为插件服务或一组可加载函数。此接口提供了锁命名空间以及独立的读锁和写锁，<br>不同于 GET_LOCK() 及相关函数提供的接口。有关详细信息，请参阅第 7.6.9.1 节，“锁定服务”。<br>(<a href="https://dev.mysql.com/doc/refman/8.0/en/locking-service.html">https://dev.mysql.com/doc/refman/8.0/en/locking-service.html</a>)</p><h3 id="2-IS-FREE-LOCK-str"><a href="#2-IS-FREE-LOCK-str" class="headerlink" title="2. IS_FREE_LOCK(str)"></a><a name="ch2"></a>2. IS_FREE_LOCK(str)</h3><p>检查名为 str 的锁是否空闲可用（即未被锁定）。如果锁是空闲的（无人使用该锁），则返回 1；<br>如果锁正在使用中，则返回 0；如果发生错误（如参数不正确），则返回 NULL。</p><p>此函数在基于语句的复制中是不安全的。如果你在 binlog_format 设置为 STATEMENT<br>时使用此函数，则会记录一条警告。</p><h3 id="3-IS-USED-LOCK-str"><a href="#3-IS-USED-LOCK-str" class="headerlink" title="3. IS_USED_LOCK(str)"></a><a name="ch3"></a>3. IS_USED_LOCK(str)</h3><p>检查名为 str 的锁是否正在使用中（即已锁定）。如果是，则返回持有该锁的客户端会话的连接标识符。<br>否则，返回 NULL。</p><p>此函数在基于语句的复制中是不安全的。如果你在 binlog_format<br>设置为 STATEMENT 时使用此函数，则会记录一条警告。</p><h3 id="4-RELEASE-ALL-LOCKS"><a href="#4-RELEASE-ALL-LOCKS" class="headerlink" title="4. RELEASE_ALL_LOCKS()"></a><a name="ch4"></a>4. RELEASE_ALL_LOCKS()</h3><p>释放当前会话持有的所有命名锁，并返回释放的锁数量（如果没有锁，则返回 0）。</p><p>此函数在基于语句的复制中是不安全的。如果你在 binlog_format 设置为 STATEMENT 时使用此函数，则会记录一条警告。</p><h3 id="5-RELEASE-ALL-LOCKS"><a href="#5-RELEASE-ALL-LOCKS" class="headerlink" title="5. RELEASE_ALL_LOCKS()"></a><a name="ch5"></a>5. RELEASE_ALL_LOCKS()</h3><p>释放由字符串 str 命名的锁，该锁通过 GET_LOCK() 获得。如果成功释放锁，则返回 1；<br>如果该线程未建立此锁（在此情况下不会释放锁），则返回 0；如果指定名称的锁不存在，<br>则返回 NULL。如果从未通过 GET_LOCK() 获得该锁或之前已经释放，则该锁不存在。</p><p>DO 语句与 RELEASE_LOCK() 结合使用非常方便。详见第 15.2.3 节，“DO 语句”。</p><p>此函数在基于语句的复制中是不安全的。如果你在 binlog_format 设置为 STATEMENT 时使用此函数，则会记录一条警告。</p><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a><a name="ch6"></a>6. 总结</h3><pre><code class="hljs">注意事项锁的范围：GET_LOCK() 获取的锁是MySQL服务级别的，不是数据库或表级别的。这意味着它适用于跨数据库或表的操作保护。锁的释放：必须显式地使用 RELEASE_LOCK() 释放锁，或者当持有锁的会话结束时锁会被自动释放。其他线程无法释放。锁的性能：在高并发环境下，频繁地获取和释放锁可能会对性能产生影响。应该谨慎使用，并确保其必要性。锁的可见性：锁是MySQL服务级别的，不是跨服务器的。如果应用是分布式的，并且需要在不同的 MySQL服务实例间共享锁，那么可能需要实现自己的分布式锁机制。锁的名称：锁的名称在数据库实例中是唯一的，但是不同的 MySQL 实例之间锁的名称可以相同，它们互不干扰。</code></pre><p>函数锁虽然对于流程处理非常严谨，但对MySQL数据库性能来说，非常不友好。这种服务级别锁，因为获取锁之后，<br>就是等待过程，所以消耗CPU资源。大量的函数锁，会占有CPU资源（信号量、自旋锁），<br>导致无法处理其他任务。实际生产中，不建议使用。</p>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
      <category>MySQL</category>
      
      <category>lock</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/05/05/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/05/05/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>1</p><p>2</p><p>3</p><p>45</p><p><img src="/2025/05/05/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/123.jpg" alt="123"></p><p>6</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
